diff --git a/testsuite/tests/asmcomp/polling.c b/testsuite/tests/asmcomp/polling.c
index 93620c9bcc..4f6bf1dcab 100644
--- a/testsuite/tests/asmcomp/polling.c
+++ b/testsuite/tests/asmcomp/polling.c
@@ -12,7 +12,11 @@ CAMLprim value request_minor_gc(value v) {
     tests are only run in a single domain, so we're probably
     good.
   */
+#if 0
   Caml_state->young_limit = (uintnat)Caml_state->young_end;
+#endif
+  caml_something_to_do = 1;
+  Caml_state->young_limit = Caml_state->young_alloc_end;
 
   return Val_unit;
 }
diff --git a/testsuite/tests/backtrace/backtrace2.reference b/testsuite/tests/backtrace/backtrace2.reference
index 20ef708fe0..54c5ab7570 100644
--- a/testsuite/tests/backtrace/backtrace2.reference
+++ b/testsuite/tests/backtrace/backtrace2.reference
@@ -35,7 +35,7 @@ Uncaught exception Invalid_argument("index out of bounds")
 Raised by primitive operation at Backtrace2.run in file "backtrace2.ml", line 62, characters 14-22
 test_Not_found
 Uncaught exception Not_found
-Raised at Stdlib__Hashtbl.find in file "hashtbl.ml", line 541, characters 13-28
+Raised at Stdlib__Hashtbl.find in file "hashtbl.ml", line 549, characters 13-28
 Called from Backtrace2.test_Not_found in file "backtrace2.ml", line 43, characters 9-42
 Re-raised at Backtrace2.test_Not_found in file "backtrace2.ml", line 43, characters 61-70
 Called from Backtrace2.run in file "backtrace2.ml", line 62, characters 11-23
@@ -46,13 +46,13 @@ Called from Backtrace2.test_lazy.aux in file "backtrace2.ml", line 47, character
 Called from Backtrace2.test_lazy.aux in file "backtrace2.ml", line 47, characters 43-52
 Called from Backtrace2.test_lazy.aux in file "backtrace2.ml", line 47, characters 43-52
 Called from Backtrace2.test_lazy.aux in file "backtrace2.ml", line 47, characters 43-52
-Called from CamlinternalLazy.do_force_block in file "camlinternalLazy.ml", line 49, characters 17-27
-Re-raised at CamlinternalLazy.do_force_block in file "camlinternalLazy.ml", line 56, characters 4-11
+Called from CamlinternalLazy.force_lazy_block in file "camlinternalLazy.ml", line 119, characters 17-27
+Re-raised at CamlinternalLazy.force_lazy_block in file "camlinternalLazy.ml", line 124, characters 4-11
 Called from Backtrace2.run in file "backtrace2.ml", line 62, characters 11-23
 Uncaught exception Not_found
-Raised at Stdlib__Hashtbl.find in file "hashtbl.ml", line 541, characters 13-28
+Raised at Stdlib__Hashtbl.find in file "hashtbl.ml", line 549, characters 13-28
 Called from Backtrace2.test_lazy.exception_raised_internally in file "backtrace2.ml", line 50, characters 8-41
-Re-raised at CamlinternalLazy.do_force_block.(fun) in file "camlinternalLazy.ml", line 54, characters 43-50
-Called from CamlinternalLazy.do_force_block in file "camlinternalLazy.ml", line 49, characters 17-27
-Re-raised at CamlinternalLazy.do_force_block in file "camlinternalLazy.ml", line 56, characters 4-11
+Re-raised at CamlinternalLazy.force_lazy_block.(fun) in file "camlinternalLazy.ml", line 123, characters 56-63
+Called from CamlinternalLazy.force_lazy_block in file "camlinternalLazy.ml", line 119, characters 17-27
+Re-raised at CamlinternalLazy.force_lazy_block in file "camlinternalLazy.ml", line 124, characters 4-11
 Called from Backtrace2.run in file "backtrace2.ml", line 62, characters 11-23
diff --git a/testsuite/tests/backtrace/backtrace_c_exn.ml b/testsuite/tests/backtrace/backtrace_c_exn.ml
index 9b0077d509..1680c23f7b 100644
--- a/testsuite/tests/backtrace/backtrace_c_exn.ml
+++ b/testsuite/tests/backtrace/backtrace_c_exn.ml
@@ -2,6 +2,8 @@
    modules = "backtrace_c_exn_.c"
    flags = "-g"
    ocamlrunparam += ",b=1"
+   * skip
+   reason = "OCaml 5 only"
 *)
 
 (* https://github.com/ocaml-multicore/ocaml-multicore/issues/498 *)
diff --git a/testsuite/tests/backtrace/backtrace_dynlink.flambda.reference b/testsuite/tests/backtrace/backtrace_dynlink.flambda.reference
index 17df8e7796..70b0651d3a 100644
--- a/testsuite/tests/backtrace/backtrace_dynlink.flambda.reference
+++ b/testsuite/tests/backtrace/backtrace_dynlink.flambda.reference
@@ -2,20 +2,24 @@ Raised by primitive operation at Backtrace_dynlink_plugin in file "backtrace_dyn
 Called from Dynlink.Native.run.(fun) in file "otherlibs/dynlink/native/dynlink.ml", line 85, characters 12-29
 Called from Stdlib__List.iter in file "list.ml" (inlined), line 110, characters 12-15
 Called from Dynlink.Native.run in file "otherlibs/dynlink/native/dynlink.ml", line 84, characters 4-273
-Called from Dynlink_common.Make.load.(fun) in file "otherlibs/dynlink/dynlink_common.ml" (inlined), line 350, characters 13-44
+Called from Dynlink_common.Make.load.(fun) in file "otherlibs/dynlink/dynlink_common.ml" (inlined), line 352, characters 13-44
 Called from Stdlib__List.iter in file "list.ml" (inlined), line 110, characters 12-15
-Called from Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml" (inlined), line 348, characters 8-240
-Called from Dynlink_common.Make.loadfile in file "otherlibs/dynlink/dynlink_common.ml", line 360, characters 26-45
+Called from Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml" (inlined), line 350, characters 8-240
+Called from Dynlink_common.Make.loadfile in file "otherlibs/dynlink/dynlink_common.ml", line 362, characters 26-45
 Called from Backtrace_dynlink in file "backtrace_dynlink.ml", line 39, characters 4-52
 execution of module initializers in the shared library failed: Failure("SUCCESS")
-Raised by primitive operation at Dynlink.Native.run.(fun) in file "otherlibs/dynlink/native/dynlink.ml", line 85, characters 12-29
+Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
+Called from Backtrace_dynlink_plugin in file "backtrace_dynlink_plugin.ml", line 3, characters 4-22
+Re-raised at Backtrace_dynlink_plugin in file "backtrace_dynlink_plugin.ml", line 8, characters 5-12
+Called from Dynlink.Native.run.(fun) in file "otherlibs/dynlink/native/dynlink.ml", line 85, characters 12-29
+Called from Dynlink.Native.run.(fun) in file "otherlibs/dynlink/native/dynlink.ml", line 85, characters 12-29
 Re-raised at Dynlink.Native.run.(fun) in file "otherlibs/dynlink/native/dynlink.ml", line 87, characters 10-149
 Called from Stdlib__List.iter in file "list.ml" (inlined), line 110, characters 12-15
 Called from Dynlink.Native.run in file "otherlibs/dynlink/native/dynlink.ml", line 84, characters 4-273
-Called from Dynlink_common.Make.load.(fun) in file "otherlibs/dynlink/dynlink_common.ml" (inlined), line 350, characters 13-44
+Called from Dynlink_common.Make.load.(fun) in file "otherlibs/dynlink/dynlink_common.ml" (inlined), line 352, characters 13-44
 Called from Stdlib__List.iter in file "list.ml" (inlined), line 110, characters 12-15
-Called from Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml" (inlined), line 348, characters 8-240
-Called from Dynlink_common.Make.loadfile in file "otherlibs/dynlink/dynlink_common.ml", line 360, characters 26-45
-Re-raised at Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml" (inlined), line 358, characters 8-17
-Called from Dynlink_common.Make.loadfile in file "otherlibs/dynlink/dynlink_common.ml", line 360, characters 26-45
+Called from Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml" (inlined), line 350, characters 8-240
+Called from Dynlink_common.Make.loadfile in file "otherlibs/dynlink/dynlink_common.ml", line 362, characters 26-45
+Re-raised at Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml" (inlined), line 360, characters 8-17
+Called from Dynlink_common.Make.loadfile in file "otherlibs/dynlink/dynlink_common.ml", line 362, characters 26-45
 Called from Backtrace_dynlink in file "backtrace_dynlink.ml", line 39, characters 4-52
diff --git a/testsuite/tests/backtrace/backtrace_dynlink.reference b/testsuite/tests/backtrace/backtrace_dynlink.reference
index 8f12a2dcbc..6992dbc04f 100644
--- a/testsuite/tests/backtrace/backtrace_dynlink.reference
+++ b/testsuite/tests/backtrace/backtrace_dynlink.reference
@@ -1,18 +1,22 @@
 Raised by primitive operation at Backtrace_dynlink_plugin in file "backtrace_dynlink_plugin.ml", line 6, characters 13-38
 Called from Dynlink.Native.run.(fun) in file "otherlibs/dynlink/native/dynlink.ml", line 85, characters 12-29
 Called from Stdlib__List.iter in file "list.ml", line 110, characters 12-15
-Called from Dynlink_common.Make.load.(fun) in file "otherlibs/dynlink/dynlink_common.ml", line 350, characters 13-44
+Called from Dynlink_common.Make.load.(fun) in file "otherlibs/dynlink/dynlink_common.ml", line 352, characters 13-44
 Called from Stdlib__List.iter in file "list.ml", line 110, characters 12-15
-Called from Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 348, characters 8-240
-Called from Dynlink_common.Make.loadfile in file "otherlibs/dynlink/dynlink_common.ml" (inlined), line 360, characters 26-45
+Called from Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 350, characters 8-240
+Called from Dynlink_common.Make.loadfile in file "otherlibs/dynlink/dynlink_common.ml" (inlined), line 362, characters 26-45
 Called from Backtrace_dynlink in file "backtrace_dynlink.ml", line 39, characters 4-52
 execution of module initializers in the shared library failed: Failure("SUCCESS")
-Raised by primitive operation at Dynlink.Native.run.(fun) in file "otherlibs/dynlink/native/dynlink.ml", line 85, characters 12-29
+Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
+Called from Backtrace_dynlink_plugin in file "backtrace_dynlink_plugin.ml", line 3, characters 4-22
+Re-raised at Backtrace_dynlink_plugin in file "backtrace_dynlink_plugin.ml", line 8, characters 5-12
+Called from Dynlink.Native.run.(fun) in file "otherlibs/dynlink/native/dynlink.ml", line 85, characters 12-29
+Called from Dynlink.Native.run.(fun) in file "otherlibs/dynlink/native/dynlink.ml", line 85, characters 12-29
 Re-raised at Dynlink.Native.run.(fun) in file "otherlibs/dynlink/native/dynlink.ml", line 87, characters 10-149
 Called from Stdlib__List.iter in file "list.ml", line 110, characters 12-15
-Called from Dynlink_common.Make.load.(fun) in file "otherlibs/dynlink/dynlink_common.ml", line 350, characters 13-44
+Called from Dynlink_common.Make.load.(fun) in file "otherlibs/dynlink/dynlink_common.ml", line 352, characters 13-44
 Called from Stdlib__List.iter in file "list.ml", line 110, characters 12-15
-Called from Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 348, characters 8-240
-Re-raised at Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 358, characters 8-17
-Called from Dynlink_common.Make.loadfile in file "otherlibs/dynlink/dynlink_common.ml" (inlined), line 360, characters 26-45
+Called from Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 350, characters 8-240
+Re-raised at Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 360, characters 8-17
+Called from Dynlink_common.Make.loadfile in file "otherlibs/dynlink/dynlink_common.ml" (inlined), line 362, characters 26-45
 Called from Backtrace_dynlink in file "backtrace_dynlink.ml", line 39, characters 4-52
diff --git a/testsuite/tests/backtrace/backtrace_effects.ml b/testsuite/tests/backtrace/backtrace_effects.ml
index dcd4480a02..39d9880db6 100644
--- a/testsuite/tests/backtrace/backtrace_effects.ml
+++ b/testsuite/tests/backtrace/backtrace_effects.ml
@@ -2,6 +2,8 @@
    flags = "-g"
    ocamlrunparam += ",b=1"
    exit_status = "2"
+   * skip
+   reason = "OCaml 5 only"
 *)
 
 open Effect
diff --git a/testsuite/tests/backtrace/backtrace_effects_nested.ml b/testsuite/tests/backtrace/backtrace_effects_nested.ml
index 6bb1597761..b818ede59e 100644
--- a/testsuite/tests/backtrace/backtrace_effects_nested.ml
+++ b/testsuite/tests/backtrace/backtrace_effects_nested.ml
@@ -1,12 +1,14 @@
 (* TEST
 
 flags = "-g"
-* bytecode
-* no-flambda
-** native
-* flambda
+* skip
+reason = "OCaml 5 only"
+** bytecode
+** no-flambda
+*** native
+** flambda
 reference = "${test_source_directory}/backtrace_effects_nested.flambda.reference"
-** native
+*** native
 
 *)
 
diff --git a/testsuite/tests/backtrace/backtrace_systhreads.reference b/testsuite/tests/backtrace/backtrace_systhreads.reference
index c1b45f1b63..b6e95802e6 100644
--- a/testsuite/tests/backtrace/backtrace_systhreads.reference
+++ b/testsuite/tests/backtrace/backtrace_systhreads.reference
@@ -2,24 +2,24 @@ Thread 2 killed on uncaught exception Failure("0")
 Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
 Called from Backtrace_systhreads.thread_func in file "backtrace_systhreads.ml", line 14, characters 6-37
 Re-raised at Backtrace_systhreads.thread_func in file "backtrace_systhreads.ml", line 18, characters 5-14
-Called from Thread.create.(fun) in file "thread.ml", line 49, characters 8-14
+Called from Thread.create.(fun) in file "thread.ml", line 51, characters 8-14
 Thread 3 killed on uncaught exception Failure("1")
 Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
 Called from Backtrace_systhreads.thread_func in file "backtrace_systhreads.ml", line 14, characters 6-37
 Re-raised at Backtrace_systhreads.thread_func in file "backtrace_systhreads.ml", line 18, characters 5-14
-Called from Thread.create.(fun) in file "thread.ml", line 49, characters 8-14
+Called from Thread.create.(fun) in file "thread.ml", line 51, characters 8-14
 Thread 4 killed on uncaught exception Failure("2")
 Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
 Called from Backtrace_systhreads.thread_func in file "backtrace_systhreads.ml", line 14, characters 6-37
 Re-raised at Backtrace_systhreads.thread_func in file "backtrace_systhreads.ml", line 18, characters 5-14
-Called from Thread.create.(fun) in file "thread.ml", line 49, characters 8-14
+Called from Thread.create.(fun) in file "thread.ml", line 51, characters 8-14
 Thread 5 killed on uncaught exception Failure("3")
 Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
 Called from Backtrace_systhreads.thread_func in file "backtrace_systhreads.ml", line 14, characters 6-37
 Re-raised at Backtrace_systhreads.thread_func in file "backtrace_systhreads.ml", line 18, characters 5-14
-Called from Thread.create.(fun) in file "thread.ml", line 49, characters 8-14
+Called from Thread.create.(fun) in file "thread.ml", line 51, characters 8-14
 Thread 1 killed on uncaught exception Failure("backtrace")
 Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
 Called from Backtrace_systhreads.thread_backtrace in file "backtrace_systhreads.ml", line 22, characters 6-27
 Re-raised at Backtrace_systhreads.thread_backtrace in file "backtrace_systhreads.ml", line 26, characters 5-14
-Called from Thread.create.(fun) in file "thread.ml", line 49, characters 8-14
+Called from Thread.create.(fun) in file "thread.ml", line 51, characters 8-14
diff --git a/testsuite/tests/backtrace/callstack.reference b/testsuite/tests/backtrace/callstack.reference
index 2243abe4fd..c83ca05156 100644
--- a/testsuite/tests/backtrace/callstack.reference
+++ b/testsuite/tests/backtrace/callstack.reference
@@ -12,4 +12,4 @@ Raised by primitive operation at Callstack.f0 in file "callstack.ml", line 11, c
 Called from Callstack.f1 in file "callstack.ml", line 12, characters 27-32
 Called from Callstack.f2 in file "callstack.ml", line 13, characters 27-32
 Called from Callstack.f3 in file "callstack.ml", line 14, characters 27-32
-Called from Thread.create.(fun) in file "thread.ml", line 49, characters 8-14
+Called from Thread.create.(fun) in file "thread.ml", line 51, characters 8-14
diff --git a/testsuite/tests/backtrace/lazy.reference b/testsuite/tests/backtrace/lazy.reference
index 5e8f53482f..af15509686 100644
--- a/testsuite/tests/backtrace/lazy.reference
+++ b/testsuite/tests/backtrace/lazy.reference
@@ -1,14 +1,12 @@
 Uncaught exception Not_found
 Raised at Lazy.l1 in file "lazy.ml", line 7, characters 28-45
-Called from CamlinternalLazy.do_force_block in file "camlinternalLazy.ml", line 49, characters 17-27
-Re-raised at CamlinternalLazy.do_force_block in file "camlinternalLazy.ml", line 56, characters 4-11
-Called from CamlinternalLazy.force_lazy_block in file "camlinternalLazy.ml" (inlined), line 78, characters 27-67
+Called from CamlinternalLazy.force_lazy_block in file "camlinternalLazy.ml", line 119, characters 17-27
+Re-raised at CamlinternalLazy.force_lazy_block in file "camlinternalLazy.ml", line 124, characters 4-11
 Called from Lazy.test1 in file "lazy.ml", line 10, characters 11-24
 Called from Lazy.run in file "lazy.ml", line 19, characters 4-11
 Uncaught exception Not_found
 Raised at Lazy.l2 in file "lazy.ml", line 12, characters 28-45
-Called from CamlinternalLazy.do_force_block in file "camlinternalLazy.ml", line 49, characters 17-27
-Re-raised at CamlinternalLazy.do_force_block in file "camlinternalLazy.ml", line 56, characters 4-11
-Called from CamlinternalLazy.force_lazy_block in file "camlinternalLazy.ml" (inlined), line 78, characters 27-67
+Called from CamlinternalLazy.force_lazy_block in file "camlinternalLazy.ml", line 119, characters 17-27
+Re-raised at CamlinternalLazy.force_lazy_block in file "camlinternalLazy.ml", line 124, characters 4-11
 Called from Lazy.test2 in file "lazy.ml", line 15, characters 6-15
 Called from Lazy.run in file "lazy.ml", line 19, characters 4-11
diff --git a/testsuite/tests/basic/patmatch_for_multiple.ml b/testsuite/tests/basic/patmatch_for_multiple.ml
index e14525620b..78f3ecd88a 100644
--- a/testsuite/tests/basic/patmatch_for_multiple.ml
+++ b/testsuite/tests/basic/patmatch_for_multiple.ml
@@ -26,15 +26,15 @@ match (3, 2, 1) with
 | _ -> false
 ;;
 [%%expect{|
-(let (*match*/277 = 3 *match*/278 = 2 *match*/279 = 1)
+(let (*match*/272 = 3 *match*/273 = 2 *match*/274 = 1)
   (catch
     (catch
-      (catch (if (!= *match*/278 3) (exit 3) (exit 1)) with (3)
-        (if (!= *match*/277 1) (exit 2) (exit 1)))
+      (catch (if (!= *match*/273 3) (exit 3) (exit 1)) with (3)
+        (if (!= *match*/272 1) (exit 2) (exit 1)))
      with (2) 0)
    with (1) 1))
-(let (*match*/277 = 3 *match*/278 = 2 *match*/279 = 1)
-  (catch (if (!= *match*/278 3) (if (!= *match*/277 1) 0 (exit 1)) (exit 1))
+(let (*match*/272 = 3 *match*/273 = 2 *match*/274 = 1)
+  (catch (if (!= *match*/273 3) (if (!= *match*/272 1) 0 (exit 1)) (exit 1))
    with (1) 1))
 - : bool = false
 |}];;
@@ -47,26 +47,26 @@ match (3, 2, 1) with
 | _ -> false
 ;;
 [%%expect{|
-(let (*match*/282 = 3 *match*/283 = 2 *match*/284 = 1)
+(let (*match*/277 = 3 *match*/278 = 2 *match*/279 = 1)
   (catch
     (catch
       (catch
-        (if (!= *match*/283 3) (exit 6)
-          (let (x/286 =a (makeblock 0 *match*/282 *match*/283 *match*/284))
-            (exit 4 x/286)))
+        (if (!= *match*/278 3) (exit 6)
+          (let (x/281 =a (makeblock 0 *match*/277 *match*/278 *match*/279))
+            (exit 4 x/281)))
        with (6)
-        (if (!= *match*/282 1) (exit 5)
-          (let (x/285 =a (makeblock 0 *match*/282 *match*/283 *match*/284))
-            (exit 4 x/285))))
+        (if (!= *match*/277 1) (exit 5)
+          (let (x/280 =a (makeblock 0 *match*/277 *match*/278 *match*/279))
+            (exit 4 x/280))))
      with (5) 0)
-   with (4 x/280) (seq (ignore x/280) 1)))
-(let (*match*/282 = 3 *match*/283 = 2 *match*/284 = 1)
+   with (4 x/275) (seq (ignore x/275) 1)))
+(let (*match*/277 = 3 *match*/278 = 2 *match*/279 = 1)
   (catch
-    (if (!= *match*/283 3)
-      (if (!= *match*/282 1) 0
-        (exit 4 (makeblock 0 *match*/282 *match*/283 *match*/284)))
-      (exit 4 (makeblock 0 *match*/282 *match*/283 *match*/284)))
-   with (4 x/280) (seq (ignore x/280) 1)))
+    (if (!= *match*/278 3)
+      (if (!= *match*/277 1) 0
+        (exit 4 (makeblock 0 *match*/277 *match*/278 *match*/279)))
+      (exit 4 (makeblock 0 *match*/277 *match*/278 *match*/279)))
+   with (4 x/275) (seq (ignore x/275) 1)))
 - : bool = false
 |}];;
 
@@ -76,8 +76,8 @@ let _ = fun a b ->
   | ((true, _) as _g)
   | ((false, _) as _g) -> ()
 [%%expect{|
-(function a/287[int] b/288 : int 0)
-(function a/287[int] b/288 : int 0)
+(function a/282[int] b/283 : int 0)
+(function a/282[int] b/283 : int 0)
 - : bool -> 'a -> unit = <fun>
 |}];;
 
@@ -96,8 +96,8 @@ let _ = fun a b -> match a, b with
 | (false, _) as p -> p
 (* outside, trivial *)
 [%%expect {|
-(function a/291[int] b/292 (let (p/293 =a (makeblock 0 a/291 b/292)) p/293))
-(function a/291[int] b/292 (makeblock 0 a/291 b/292))
+(function a/286[int] b/287 (let (p/288 =a (makeblock 0 a/286 b/287)) p/288))
+(function a/286[int] b/287 (makeblock 0 a/286 b/287))
 - : bool -> 'a -> bool * 'a = <fun>
 |}]
 
@@ -106,8 +106,8 @@ let _ = fun a b -> match a, b with
 | ((false, _) as p) -> p
 (* inside, trivial *)
 [%%expect{|
-(function a/295[int] b/296 (let (p/297 =a (makeblock 0 a/295 b/296)) p/297))
-(function a/295[int] b/296 (makeblock 0 a/295 b/296))
+(function a/290[int] b/291 (let (p/292 =a (makeblock 0 a/290 b/291)) p/292))
+(function a/290[int] b/291 (makeblock 0 a/290 b/291))
 - : bool -> 'a -> bool * 'a = <fun>
 |}];;
 
@@ -116,11 +116,11 @@ let _ = fun a b -> match a, b with
 | (false as x, _) as p -> x, p
 (* outside, simple *)
 [%%expect {|
-(function a/301[int] b/302
-  (let (x/303 =a[int] a/301 p/304 =a (makeblock 0 a/301 b/302))
-    (makeblock 0 (int,*) x/303 p/304)))
-(function a/301[int] b/302
-  (makeblock 0 (int,*) a/301 (makeblock 0 a/301 b/302)))
+(function a/296[int] b/297
+  (let (x/298 =a[int] a/296 p/299 =a (makeblock 0 a/296 b/297))
+    (makeblock 0 (int,*) x/298 p/299)))
+(function a/296[int] b/297
+  (makeblock 0 (int,*) a/296 (makeblock 0 a/296 b/297)))
 - : bool -> 'a -> bool * (bool * 'a) = <fun>
 |}]
 
@@ -129,11 +129,11 @@ let _ = fun a b -> match a, b with
 | ((false as x, _) as p) -> x, p
 (* inside, simple *)
 [%%expect {|
-(function a/307[int] b/308
-  (let (x/309 =a[int] a/307 p/310 =a (makeblock 0 a/307 b/308))
-    (makeblock 0 (int,*) x/309 p/310)))
-(function a/307[int] b/308
-  (makeblock 0 (int,*) a/307 (makeblock 0 a/307 b/308)))
+(function a/302[int] b/303
+  (let (x/304 =a[int] a/302 p/305 =a (makeblock 0 a/302 b/303))
+    (makeblock 0 (int,*) x/304 p/305)))
+(function a/302[int] b/303
+  (makeblock 0 (int,*) a/302 (makeblock 0 a/302 b/303)))
 - : bool -> 'a -> bool * (bool * 'a) = <fun>
 |}]
 
@@ -142,15 +142,15 @@ let _ = fun a b -> match a, b with
 | (false, x) as p -> x, p
 (* outside, complex *)
 [%%expect{|
-(function a/317[int] b/318[int]
-  (if a/317
-    (let (x/319 =a[int] a/317 p/320 =a (makeblock 0 a/317 b/318))
-      (makeblock 0 (int,*) x/319 p/320))
-    (let (x/321 =a b/318 p/322 =a (makeblock 0 a/317 b/318))
-      (makeblock 0 (int,*) x/321 p/322))))
-(function a/317[int] b/318[int]
-  (if a/317 (makeblock 0 (int,*) a/317 (makeblock 0 a/317 b/318))
-    (makeblock 0 (int,*) b/318 (makeblock 0 a/317 b/318))))
+(function a/312[int] b/313[int]
+  (if a/312
+    (let (x/314 =a[int] a/312 p/315 =a (makeblock 0 a/312 b/313))
+      (makeblock 0 (int,*) x/314 p/315))
+    (let (x/316 =a b/313 p/317 =a (makeblock 0 a/312 b/313))
+      (makeblock 0 (int,*) x/316 p/317))))
+(function a/312[int] b/313[int]
+  (if a/312 (makeblock 0 (int,*) a/312 (makeblock 0 a/312 b/313))
+    (makeblock 0 (int,*) b/313 (makeblock 0 a/312 b/313))))
 - : bool -> bool -> bool * (bool * bool) = <fun>
 |}]
 
@@ -160,19 +160,19 @@ let _ = fun a b -> match a, b with
   -> x, p
 (* inside, complex *)
 [%%expect{|
-(function a/323[int] b/324[int]
+(function a/318[int] b/319[int]
   (catch
-    (if a/323
-      (let (x/331 =a[int] a/323 p/332 =a (makeblock 0 a/323 b/324))
-        (exit 10 x/331 p/332))
-      (let (x/329 =a b/324 p/330 =a (makeblock 0 a/323 b/324))
-        (exit 10 x/329 p/330)))
-   with (10 x/325[int] p/326) (makeblock 0 (int,*) x/325 p/326)))
-(function a/323[int] b/324[int]
+    (if a/318
+      (let (x/326 =a[int] a/318 p/327 =a (makeblock 0 a/318 b/319))
+        (exit 10 x/326 p/327))
+      (let (x/324 =a b/319 p/325 =a (makeblock 0 a/318 b/319))
+        (exit 10 x/324 p/325)))
+   with (10 x/320[int] p/321) (makeblock 0 (int,*) x/320 p/321)))
+(function a/318[int] b/319[int]
   (catch
-    (if a/323 (exit 10 a/323 (makeblock 0 a/323 b/324))
-      (exit 10 b/324 (makeblock 0 a/323 b/324)))
-   with (10 x/325[int] p/326) (makeblock 0 (int,*) x/325 p/326)))
+    (if a/318 (exit 10 a/318 (makeblock 0 a/318 b/319))
+      (exit 10 b/319 (makeblock 0 a/318 b/319)))
+   with (10 x/320[int] p/321) (makeblock 0 (int,*) x/320 p/321)))
 - : bool -> bool -> bool * (bool * bool) = <fun>
 |}]
 
@@ -185,15 +185,15 @@ let _ = fun a b -> match a, b with
 | (false as x, _) as p -> x, p
 (* outside, onecase *)
 [%%expect {|
-(function a/333[int] b/334[int]
-  (if a/333
-    (let (x/335 =a[int] a/333 _p/336 =a (makeblock 0 a/333 b/334))
-      (makeblock 0 (int,*) x/335 [0: 1 1]))
-    (let (x/337 =a[int] a/333 p/338 =a (makeblock 0 a/333 b/334))
-      (makeblock 0 (int,*) x/337 p/338))))
-(function a/333[int] b/334[int]
-  (if a/333 (makeblock 0 (int,*) a/333 [0: 1 1])
-    (makeblock 0 (int,*) a/333 (makeblock 0 a/333 b/334))))
+(function a/328[int] b/329[int]
+  (if a/328
+    (let (x/330 =a[int] a/328 _p/331 =a (makeblock 0 a/328 b/329))
+      (makeblock 0 (int,*) x/330 [0: 1 1]))
+    (let (x/332 =a[int] a/328 p/333 =a (makeblock 0 a/328 b/329))
+      (makeblock 0 (int,*) x/332 p/333))))
+(function a/328[int] b/329[int]
+  (if a/328 (makeblock 0 (int,*) a/328 [0: 1 1])
+    (makeblock 0 (int,*) a/328 (makeblock 0 a/328 b/329))))
 - : bool -> bool -> bool * (bool * bool) = <fun>
 |}]
 
@@ -202,11 +202,11 @@ let _ = fun a b -> match a, b with
 | ((false as x, _) as p) -> x, p
 (* inside, onecase *)
 [%%expect{|
-(function a/339[int] b/340
-  (let (x/341 =a[int] a/339 p/342 =a (makeblock 0 a/339 b/340))
-    (makeblock 0 (int,*) x/341 p/342)))
-(function a/339[int] b/340
-  (makeblock 0 (int,*) a/339 (makeblock 0 a/339 b/340)))
+(function a/334[int] b/335
+  (let (x/336 =a[int] a/334 p/337 =a (makeblock 0 a/334 b/335))
+    (makeblock 0 (int,*) x/336 p/337)))
+(function a/334[int] b/335
+  (makeblock 0 (int,*) a/334 (makeblock 0 a/334 b/335)))
 - : bool -> 'a -> bool * (bool * 'a) = <fun>
 |}]
 
@@ -223,14 +223,14 @@ let _ =fun a b -> match a, b with
 | (_, _) as p -> p
 (* outside, tuplist *)
 [%%expect {|
-(function a/352[int] b/353
+(function a/347[int] b/348
   (catch
-    (if a/352 (if b/353 (let (p/354 =a (field_imm 0 b/353)) p/354) (exit 12))
+    (if a/347 (if b/348 (let (p/349 =a (field_imm 0 b/348)) p/349) (exit 12))
       (exit 12))
-   with (12) (let (p/355 =a (makeblock 0 a/352 b/353)) p/355)))
-(function a/352[int] b/353
-  (catch (if a/352 (if b/353 (field_imm 0 b/353) (exit 12)) (exit 12))
-   with (12) (makeblock 0 a/352 b/353)))
+   with (12) (let (p/350 =a (makeblock 0 a/347 b/348)) p/350)))
+(function a/347[int] b/348
+  (catch (if a/347 (if b/348 (field_imm 0 b/348) (exit 12)) (exit 12))
+   with (12) (makeblock 0 a/347 b/348)))
 - : bool -> bool tuplist -> bool * bool tuplist = <fun>
 |}]
 
@@ -239,20 +239,20 @@ let _ = fun a b -> match a, b with
 | ((_, _) as p) -> p
 (* inside, tuplist *)
 [%%expect{|
-(function a/356[int] b/357
+(function a/351[int] b/352
   (catch
     (catch
-      (if a/356
-        (if b/357 (let (p/361 =a (field_imm 0 b/357)) (exit 13 p/361))
+      (if a/351
+        (if b/352 (let (p/356 =a (field_imm 0 b/352)) (exit 13 p/356))
           (exit 14))
         (exit 14))
-     with (14) (let (p/360 =a (makeblock 0 a/356 b/357)) (exit 13 p/360)))
-   with (13 p/358) p/358))
-(function a/356[int] b/357
+     with (14) (let (p/355 =a (makeblock 0 a/351 b/352)) (exit 13 p/355)))
+   with (13 p/353) p/353))
+(function a/351[int] b/352
   (catch
     (catch
-      (if a/356 (if b/357 (exit 13 (field_imm 0 b/357)) (exit 14)) (exit 14))
-     with (14) (exit 13 (makeblock 0 a/356 b/357)))
-   with (13 p/358) p/358))
+      (if a/351 (if b/352 (exit 13 (field_imm 0 b/352)) (exit 14)) (exit 14))
+     with (14) (exit 13 (makeblock 0 a/351 b/352)))
+   with (13 p/353) p/353))
 - : bool -> bool tuplist -> bool * bool tuplist = <fun>
 |}]
diff --git a/testsuite/tests/c-api/alloc_async.ml b/testsuite/tests/c-api/alloc_async.ml
index b8c99a4b07..0ed35acf16 100644
--- a/testsuite/tests/c-api/alloc_async.ml
+++ b/testsuite/tests/c-api/alloc_async.ml
@@ -1,7 +1,5 @@
 (* TEST
    modules = "alloc_async_stubs.c"
-   * skip
-   reason = "alloc async changes: https://github.com/ocaml/ocaml/pull/8897"
 *)
 
 external test : int ref -> unit = "stub"
diff --git a/testsuite/tests/callback/nested_fiber.ml b/testsuite/tests/callback/nested_fiber.ml
index 7d520d0915..57cbfc4a63 100644
--- a/testsuite/tests/callback/nested_fiber.ml
+++ b/testsuite/tests/callback/nested_fiber.ml
@@ -1,9 +1,11 @@
 (* TEST
    include unix
    modules = "nested_fiber_.c"
-   * libunix
-   ** bytecode
-   ** native
+   * skip
+   reason = "OCaml 5 only"
+   ** libunix
+   *** bytecode
+   *** native
 *)
 
 external caml_to_c : (unit -> 'a) -> 'a = "caml_to_c"
diff --git a/testsuite/tests/callback/stack_overflow.ml b/testsuite/tests/callback/stack_overflow.ml
index e48815aede..ef8c8a3845 100644
--- a/testsuite/tests/callback/stack_overflow.ml
+++ b/testsuite/tests/callback/stack_overflow.ml
@@ -1,9 +1,11 @@
 (* TEST
    include unix
    modules = "stack_overflow_.c"
-   * libunix
-   ** bytecode
-   ** native
+   * skip
+   reason = "OCaml 5 only"
+   ** libunix
+   *** bytecode
+   *** native
 *)
 
 external caml_to_c : (unit -> 'a) -> 'a = "caml_to_c"
diff --git a/testsuite/tests/callback/test7.ml b/testsuite/tests/callback/test7.ml
index 7f35966184..9459b6c601 100644
--- a/testsuite/tests/callback/test7.ml
+++ b/testsuite/tests/callback/test7.ml
@@ -1,9 +1,11 @@
 (* TEST
    include unix
    modules = "test7_.c"
-   * libunix
-   ** bytecode
-   ** native
+   * skip
+   reason = "OCaml 5 only"
+   ** libunix
+   *** bytecode
+   *** native
 *)
 
 (* Tests nested calls from C (main C) to OCaml (main OCaml) to C (caml_to_c) to
diff --git a/testsuite/tests/callback/test_signalhandler.ml b/testsuite/tests/callback/test_signalhandler.ml
index 9d0ecaac13..1c24a38f9d 100644
--- a/testsuite/tests/callback/test_signalhandler.ml
+++ b/testsuite/tests/callback/test_signalhandler.ml
@@ -1,6 +1,6 @@
 (* TEST
    include unix
-   modules = "test_signalhandler_.c"
+   modules = "callbackprim.c"
    * libunix
    ** bytecode
    ** native
@@ -52,17 +52,19 @@ let sighandler signo =
   (* Thoroughly wipe the minor heap *)
   ignore (tak (18, 12, 6))
 
+external raise_sigusr1 : unit -> unit = "raise_sigusr1" [@@noalloc]
 external unix_getpid : unit -> int = "unix_getpid" [@@noalloc]
 external unix_kill : int -> int -> unit = "unix_kill" [@@noalloc]
 
 let callbacksig () =
-  let pid = unix_getpid() in
+  let _pid = unix_getpid() in
   (* Allocate a block in the minor heap *)
   let s = String.make 5 'b' in
   (* Send a signal to self.  We want s to remain in a register and
      not be spilled on the stack, hence we declare unix_kill
      [@@noalloc]. *)
-  unix_kill pid Sys.sigusr1;
+  (*unix_kill pid Sys.sigusr1;*)
+  raise_sigusr1 ();
   (* Allocate some more so that the signal will be tested *)
   let u = (s, s) in
   fst u
diff --git a/testsuite/tests/effects/backtrace.ml b/testsuite/tests/effects/backtrace.ml
index cacd27347c..0eab449113 100644
--- a/testsuite/tests/effects/backtrace.ml
+++ b/testsuite/tests/effects/backtrace.ml
@@ -1,6 +1,8 @@
 (* TEST
    flags = "-g"
    ocamlrunparam += ",b=1"
+   * skip
+   reason = "OCaml 5 only"
 *)
 
 open Effect
diff --git a/testsuite/tests/effects/cmphash.ml b/testsuite/tests/effects/cmphash.ml
index 20462f619d..a834ad1a71 100644
--- a/testsuite/tests/effects/cmphash.ml
+++ b/testsuite/tests/effects/cmphash.ml
@@ -1,4 +1,6 @@
 (* TEST
+   * skip
+   reason = "OCaml 5 only"
  *)
 
 open Effect
diff --git a/testsuite/tests/effects/evenodd.ml b/testsuite/tests/effects/evenodd.ml
index 44d2a3d4ae..0b9f222b58 100644
--- a/testsuite/tests/effects/evenodd.ml
+++ b/testsuite/tests/effects/evenodd.ml
@@ -1,4 +1,6 @@
 (* TEST
+   * skip
+   reason = "OCaml 5 only"
  *)
 
 open Effect
diff --git a/testsuite/tests/effects/issue479.ml b/testsuite/tests/effects/issue479.ml
index d87bf3f759..63c19a2535 100644
--- a/testsuite/tests/effects/issue479.ml
+++ b/testsuite/tests/effects/issue479.ml
@@ -1,5 +1,7 @@
 (* TEST
-   * toplevel
+   * skip
+   reason = "OCaml 5 only"
+   ** toplevel
 *)
 
 (* https://github.com/ocaml-multicore/ocaml-multicore/issues/479 *)
diff --git a/testsuite/tests/effects/overflow.ml b/testsuite/tests/effects/overflow.ml
index 15cd6447c2..f68acae14b 100644
--- a/testsuite/tests/effects/overflow.ml
+++ b/testsuite/tests/effects/overflow.ml
@@ -1,4 +1,6 @@
 (* TEST
+   * skip
+   reason = "OCaml 5 only"
  *)
 
 open Effect
diff --git a/testsuite/tests/effects/partial.ml b/testsuite/tests/effects/partial.ml
index 3d6e51ff6b..45efef7282 100644
--- a/testsuite/tests/effects/partial.ml
+++ b/testsuite/tests/effects/partial.ml
@@ -1,4 +1,6 @@
 (* TEST
+   * skip
+   reason = "OCaml 5 only"
  *)
 
 open Effect
diff --git a/testsuite/tests/effects/reperform.ml b/testsuite/tests/effects/reperform.ml
index 24b2aeeac7..28f9dab5e2 100644
--- a/testsuite/tests/effects/reperform.ml
+++ b/testsuite/tests/effects/reperform.ml
@@ -1,4 +1,6 @@
 (* TEST
+   * skip
+   reason = "OCaml 5 only"
  *)
 
 open Effect
diff --git a/testsuite/tests/effects/sched.ml b/testsuite/tests/effects/sched.ml
index 07e9231c53..b2bf0d2ca4 100644
--- a/testsuite/tests/effects/sched.ml
+++ b/testsuite/tests/effects/sched.ml
@@ -1,4 +1,6 @@
 (* TEST
+   * skip
+   reason = "OCaml 5 only"
  *)
 
 open Effect
diff --git a/testsuite/tests/effects/shallow_state.ml b/testsuite/tests/effects/shallow_state.ml
index ad7f29f3cc..99044e5eb4 100644
--- a/testsuite/tests/effects/shallow_state.ml
+++ b/testsuite/tests/effects/shallow_state.ml
@@ -1,4 +1,6 @@
 (* TEST
+   * skip
+   reason = "OCaml 5 only"
  *)
 
 open Effect
diff --git a/testsuite/tests/effects/shallow_state_io.ml b/testsuite/tests/effects/shallow_state_io.ml
index b5301b7b9b..4a4c457693 100644
--- a/testsuite/tests/effects/shallow_state_io.ml
+++ b/testsuite/tests/effects/shallow_state_io.ml
@@ -1,4 +1,6 @@
 (* TEST
+   * skip
+   reason = "OCaml 5 only"
  *)
 
 open Effect
diff --git a/testsuite/tests/effects/test1.ml b/testsuite/tests/effects/test1.ml
index bb70e9e40a..14d0ca6841 100644
--- a/testsuite/tests/effects/test1.ml
+++ b/testsuite/tests/effects/test1.ml
@@ -1,4 +1,6 @@
 (* TEST
+   * skip
+   reason = "OCaml 5 only"
  *)
 
 open Effect
diff --git a/testsuite/tests/effects/test10.ml b/testsuite/tests/effects/test10.ml
index 2b3398bf61..6bdbdd7bcb 100644
--- a/testsuite/tests/effects/test10.ml
+++ b/testsuite/tests/effects/test10.ml
@@ -1,4 +1,6 @@
 (* TEST
+   * skip
+   reason = "OCaml 5 only"
  *)
 
 open Effect
diff --git a/testsuite/tests/effects/test11.ml b/testsuite/tests/effects/test11.ml
index 7eede3bdaf..2a6bc7d255 100644
--- a/testsuite/tests/effects/test11.ml
+++ b/testsuite/tests/effects/test11.ml
@@ -1,4 +1,6 @@
 (* TEST
+   * skip
+   reason = "OCaml 5 only"
 *)
 
 (* Tests RESUMETERM with extra_args != 0 in bytecode,
diff --git a/testsuite/tests/effects/test2.ml b/testsuite/tests/effects/test2.ml
index b3cc1d61ca..33228fdb93 100644
--- a/testsuite/tests/effects/test2.ml
+++ b/testsuite/tests/effects/test2.ml
@@ -1,4 +1,6 @@
 (* TEST
+   * skip
+   reason = "OCaml 5 only"
  *)
 
 open Printf
diff --git a/testsuite/tests/effects/test3.ml b/testsuite/tests/effects/test3.ml
index f42199b1c7..81ca0a093d 100644
--- a/testsuite/tests/effects/test3.ml
+++ b/testsuite/tests/effects/test3.ml
@@ -1,4 +1,6 @@
 (* TEST
+   * skip
+   reason = "OCaml 5 only"
  *)
 
 open Effect
diff --git a/testsuite/tests/effects/test4.ml b/testsuite/tests/effects/test4.ml
index 049e95de74..dd93cfcfdf 100644
--- a/testsuite/tests/effects/test4.ml
+++ b/testsuite/tests/effects/test4.ml
@@ -1,4 +1,6 @@
 (* TEST
+   * skip
+   reason = "OCaml 5 only"
  *)
 
 open Effect
diff --git a/testsuite/tests/effects/test5.ml b/testsuite/tests/effects/test5.ml
index deb3c5035e..0884710045 100644
--- a/testsuite/tests/effects/test5.ml
+++ b/testsuite/tests/effects/test5.ml
@@ -1,4 +1,6 @@
 (* TEST
+   * skip
+   reason = "OCaml 5 only"
  *)
 
 open Effect
diff --git a/testsuite/tests/effects/test6.ml b/testsuite/tests/effects/test6.ml
index 746aad325b..45dea39102 100644
--- a/testsuite/tests/effects/test6.ml
+++ b/testsuite/tests/effects/test6.ml
@@ -1,4 +1,6 @@
 (* TEST
+   * skip
+   reason = "OCaml 5 only"
  *)
 
 open Effect
diff --git a/testsuite/tests/effects/test_lazy.ml b/testsuite/tests/effects/test_lazy.ml
index 347adaf25a..1ec7438849 100644
--- a/testsuite/tests/effects/test_lazy.ml
+++ b/testsuite/tests/effects/test_lazy.ml
@@ -1,4 +1,7 @@
-(* TEST *)
+(* TEST
+   * skip
+   reason = "OCaml 5 only"
+*)
 
 open Effect
 open Effect.Deep
diff --git a/testsuite/tests/effects/used_cont.ml b/testsuite/tests/effects/used_cont.ml
index de8bed15ca..f99a1c7031 100644
--- a/testsuite/tests/effects/used_cont.ml
+++ b/testsuite/tests/effects/used_cont.ml
@@ -1,4 +1,6 @@
 (* TEST
+   * skip
+   reason = "OCaml 5 only"
  *)
 
 open Effect
diff --git a/testsuite/tests/ephe-c-api/test.ml b/testsuite/tests/ephe-c-api/test.ml
index ff1646835a..a29cd8516b 100644
--- a/testsuite/tests/ephe-c-api/test.ml
+++ b/testsuite/tests/ephe-c-api/test.ml
@@ -1,7 +1,5 @@
 (* TEST
    modules = "stubs.c"
-   * skip
-   reason = "port the new Ephemeron C-api to multicore : https://github.com/ocaml/ocaml/pull/676"
 *)
 
 (* C version of ephetest.ml *)
diff --git a/testsuite/tests/gc-roots/globroots.ml b/testsuite/tests/gc-roots/globroots.ml
index 56d1586331..6bdb7fdaf3 100644
--- a/testsuite/tests/gc-roots/globroots.ml
+++ b/testsuite/tests/gc-roots/globroots.ml
@@ -1,5 +1,7 @@
 (* TEST
    modules = "globrootsprim.c"
+   * skip
+   reason = "OCaml 5 only"
 *)
 
 module type GLOBREF = sig
diff --git a/testsuite/tests/gc-roots/globroots_parallel.ml b/testsuite/tests/gc-roots/globroots_parallel.ml
index 4c3e36d140..fabbaa8ec6 100644
--- a/testsuite/tests/gc-roots/globroots_parallel.ml
+++ b/testsuite/tests/gc-roots/globroots_parallel.ml
@@ -1,6 +1,8 @@
 (* TEST
    flags += " -w a "
    modules = "globrootsprim.c globroots.ml"
+   * skip
+   reason = "OCaml 5 only"
 *)
 
 open Globroots
diff --git a/testsuite/tests/gc-roots/globroots_parallel_spawn_burn.ml b/testsuite/tests/gc-roots/globroots_parallel_spawn_burn.ml
index bf392c13b0..cf932d9491 100644
--- a/testsuite/tests/gc-roots/globroots_parallel_spawn_burn.ml
+++ b/testsuite/tests/gc-roots/globroots_parallel_spawn_burn.ml
@@ -1,6 +1,8 @@
 (* TEST
    flags += " -w a "
    modules = "globrootsprim.c globroots.ml"
+   * skip
+   reason = "OCaml 5 only"
 *)
 
 open Globroots
diff --git a/testsuite/tests/gc-roots/globroots_sequential.ml b/testsuite/tests/gc-roots/globroots_sequential.ml
index 6bf995bf96..dc732ce6a3 100644
--- a/testsuite/tests/gc-roots/globroots_sequential.ml
+++ b/testsuite/tests/gc-roots/globroots_sequential.ml
@@ -1,6 +1,8 @@
 (* TEST
    flags += " -w a "
    modules = "globrootsprim.c globroots.ml"
+   * skip
+   reason = "OCaml 5 only"
 *)
 open Globroots
 
diff --git a/testsuite/tests/generalized-open/gpr1506.ml b/testsuite/tests/generalized-open/gpr1506.ml
index bb1eea1e72..4ae6feac34 100644
--- a/testsuite/tests/generalized-open/gpr1506.ml
+++ b/testsuite/tests/generalized-open/gpr1506.ml
@@ -103,9 +103,9 @@ include struct open struct type t = T end let x = T end
 Line 1, characters 15-41:
 1 | include struct open struct type t = T end let x = T end
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
-Error: The type t/340 introduced by this open appears in the signature
+Error: The type t/335 introduced by this open appears in the signature
        Line 1, characters 46-47:
-         The value x has no valid type if t/340 is hidden
+         The value x has no valid type if t/335 is hidden
 |}];;
 
 module A = struct
@@ -123,9 +123,9 @@ Lines 3-6, characters 4-7:
 4 |       type t = T
 5 |       let x = T
 6 |     end
-Error: The type t/345 introduced by this open appears in the signature
+Error: The type t/340 introduced by this open appears in the signature
        Line 7, characters 8-9:
-         The value y has no valid type if t/345 is hidden
+         The value y has no valid type if t/340 is hidden
 |}];;
 
 module A = struct
@@ -142,9 +142,9 @@ Lines 3-5, characters 4-7:
 3 | ....open struct
 4 |       type t = T
 5 |     end
-Error: The type t/350 introduced by this open appears in the signature
+Error: The type t/345 introduced by this open appears in the signature
        Line 6, characters 8-9:
-         The value y has no valid type if t/350 is hidden
+         The value y has no valid type if t/345 is hidden
 |}]
 
 (* It was decided to not allow this anymore. *)
diff --git a/testsuite/tests/instrumented-runtime/main.ml b/testsuite/tests/instrumented-runtime/main.ml
index 084ceb03ca..94200ec67f 100644
--- a/testsuite/tests/instrumented-runtime/main.ml
+++ b/testsuite/tests/instrumented-runtime/main.ml
@@ -1,7 +1,5 @@
 (* TEST
   * instrumented-runtime
-  * skip
-  reason = "instrumented runtime test is not very useful and broken on multicore. (#9413)"
   ** native
     flags = "-runtime-variant=i"
 *)
diff --git a/testsuite/tests/lazy/lazy2.ml b/testsuite/tests/lazy/lazy2.ml
index cccbd96d71..35dd7fd85b 100644
--- a/testsuite/tests/lazy/lazy2.ml
+++ b/testsuite/tests/lazy/lazy2.ml
@@ -1,5 +1,7 @@
 (* TEST
    ocamlopt_flags += " -O3 "
+   * skip
+   reason = "OCaml 5 only"
 *)
 
 open Domain
diff --git a/testsuite/tests/lazy/lazy3.ml b/testsuite/tests/lazy/lazy3.ml
index a22a0893b9..737791b7db 100644
--- a/testsuite/tests/lazy/lazy3.ml
+++ b/testsuite/tests/lazy/lazy3.ml
@@ -1,5 +1,7 @@
 (* TEST
    ocamlopt_flags += " -O3 "
+   * skip
+   reason = "OCaml 5 only"
 *)
 
 let f count =
diff --git a/testsuite/tests/lazy/lazy5.ml b/testsuite/tests/lazy/lazy5.ml
index 217b84175e..e37b499268 100644
--- a/testsuite/tests/lazy/lazy5.ml
+++ b/testsuite/tests/lazy/lazy5.ml
@@ -1,5 +1,7 @@
 (* TEST
    ocamlopt_flags += " -O3 "
+   * skip
+   reason = "OCaml 5 only"
 *)
 let rec safe_force l =
   try Lazy.force l with
diff --git a/testsuite/tests/lazy/lazy6.ml b/testsuite/tests/lazy/lazy6.ml
index 098848769a..29067f1a41 100644
--- a/testsuite/tests/lazy/lazy6.ml
+++ b/testsuite/tests/lazy/lazy6.ml
@@ -1,5 +1,7 @@
 (* TEST
    ocamlopt_flags += " -O3 "
+   * skip
+   reason = "OCaml 5 only"
 *)
 
 let flag1 = Atomic.make false
diff --git a/testsuite/tests/lazy/lazy7.ml b/testsuite/tests/lazy/lazy7.ml
index 6c96f32907..d9c9b82127 100644
--- a/testsuite/tests/lazy/lazy7.ml
+++ b/testsuite/tests/lazy/lazy7.ml
@@ -1,5 +1,7 @@
 (* TEST
    ocamlopt_flags += " -O3 "
+   * skip
+   reason = "OCaml 5 only"
 *)
 
 let num_domains = 4
diff --git a/testsuite/tests/lazy/lazy8.ml b/testsuite/tests/lazy/lazy8.ml
index c9b5781617..ddadf48a1b 100644
--- a/testsuite/tests/lazy/lazy8.ml
+++ b/testsuite/tests/lazy/lazy8.ml
@@ -1,5 +1,7 @@
 (* TEST
    ocamlopt_flags += " -O3 "
+   * skip
+   reason = "OCaml 5 only"
 *)
 
 exception E
diff --git a/testsuite/tests/lazy/minor_major_force.ml b/testsuite/tests/lazy/minor_major_force.ml
index b18fe44a9b..d7497f986d 100644
--- a/testsuite/tests/lazy/minor_major_force.ml
+++ b/testsuite/tests/lazy/minor_major_force.ml
@@ -1,5 +1,7 @@
 (* TEST
    ocamlopt_flags += " -O3 "
+   * skip
+   reason = "OCaml 5 only"
 *)
 
 (*
diff --git a/testsuite/tests/lf_skiplist/test.ml b/testsuite/tests/lf_skiplist/test.ml
index f3b11bf411..4dcffc523d 100644
--- a/testsuite/tests/lf_skiplist/test.ml
+++ b/testsuite/tests/lf_skiplist/test.ml
@@ -1,5 +1,7 @@
 (* TEST
    modules = "stubs.c"
+   * skip
+   reason = "OCaml 5 only"
 *)
 
 external test_skiplist_serial : unit -> unit = "test_skiplist_serial"
diff --git a/testsuite/tests/lf_skiplist/test_parallel.ml b/testsuite/tests/lf_skiplist/test_parallel.ml
index ac02717889..c882a8dac7 100644
--- a/testsuite/tests/lf_skiplist/test_parallel.ml
+++ b/testsuite/tests/lf_skiplist/test_parallel.ml
@@ -1,5 +1,7 @@
 (* TEST
    modules = "stubs.c"
+   * skip
+   reason = "OCaml 5 only"
 *)
 
 external init_skiplist : unit -> unit = "init_skiplist"
diff --git a/testsuite/tests/lib-dynlink-initializers/test10_main.byte.reference b/testsuite/tests/lib-dynlink-initializers/test10_main.byte.reference
index 8f70ff73cd..04083e8f47 100755
--- a/testsuite/tests/lib-dynlink-initializers/test10_main.byte.reference
+++ b/testsuite/tests/lib-dynlink-initializers/test10_main.byte.reference
@@ -5,8 +5,8 @@ Called from Test10_plugin.f in file "test10_plugin.ml", line 6, characters 2-6
 Called from Test10_plugin in file "test10_plugin.ml", line 10, characters 2-6
 Called from Dynlink.Bytecode.run in file "otherlibs/dynlink/dynlink.ml", line 137, characters 16-25
 Re-raised at Dynlink.Bytecode.run in file "otherlibs/dynlink/dynlink.ml", line 139, characters 6-137
-Called from Dynlink_common.Make.load.(fun) in file "otherlibs/dynlink/dynlink_common.ml", line 350, characters 13-44
+Called from Dynlink_common.Make.load.(fun) in file "otherlibs/dynlink/dynlink_common.ml", line 352, characters 13-44
 Called from Stdlib__List.iter in file "list.ml", line 110, characters 12-15
-Called from Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 348, characters 8-240
-Re-raised at Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 358, characters 8-17
+Called from Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 350, characters 8-240
+Re-raised at Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 360, characters 8-17
 Called from Test10_main in file "test10_main.ml", line 51, characters 13-69
diff --git a/testsuite/tests/lib-dynlink-initializers/test10_main.native.reference b/testsuite/tests/lib-dynlink-initializers/test10_main.native.reference
index 6496b8870f..fd2a2d84b1 100755
--- a/testsuite/tests/lib-dynlink-initializers/test10_main.native.reference
+++ b/testsuite/tests/lib-dynlink-initializers/test10_main.native.reference
@@ -1,10 +1,14 @@
 Error: Failure("Plugin error")
-Raised by primitive operation at Dynlink.Native.run.(fun) in file "otherlibs/dynlink/native/dynlink.ml", line 85, characters 12-29
+Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
+Called from Test10_plugin.g in file "test10_plugin.ml", line 2, characters 15-38
+Called from Test10_plugin in file "test10_plugin.ml", line 10, characters 2-6
+Called from Dynlink.Native.run.(fun) in file "otherlibs/dynlink/native/dynlink.ml", line 85, characters 12-29
+Called from Dynlink.Native.run.(fun) in file "otherlibs/dynlink/native/dynlink.ml", line 85, characters 12-29
 Re-raised at Dynlink.Native.run.(fun) in file "otherlibs/dynlink/native/dynlink.ml", line 87, characters 10-149
 Called from Stdlib__List.iter in file "list.ml", line 110, characters 12-15
-Called from Dynlink_common.Make.load.(fun) in file "otherlibs/dynlink/dynlink_common.ml", line 350, characters 13-44
+Called from Dynlink_common.Make.load.(fun) in file "otherlibs/dynlink/dynlink_common.ml", line 352, characters 13-44
 Called from Stdlib__List.iter in file "list.ml", line 110, characters 12-15
-Called from Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 348, characters 8-240
-Re-raised at Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 358, characters 8-17
-Called from Dynlink_common.Make.loadfile in file "otherlibs/dynlink/dynlink_common.ml" (inlined), line 360, characters 26-45
+Called from Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 350, characters 8-240
+Re-raised at Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 360, characters 8-17
+Called from Dynlink_common.Make.loadfile in file "otherlibs/dynlink/dynlink_common.ml" (inlined), line 362, characters 26-45
 Called from Test10_main in file "test10_main.ml", line 49, characters 30-87
diff --git a/testsuite/tests/lib-format/mc_pr586_par.ml b/testsuite/tests/lib-format/mc_pr586_par.ml
index 456a306ce7..da5c148416 100644
--- a/testsuite/tests/lib-format/mc_pr586_par.ml
+++ b/testsuite/tests/lib-format/mc_pr586_par.ml
@@ -1,4 +1,7 @@
-(* TEST *)
+(* TEST
+   * skip
+   reason = "OCaml 5 only"
+*)
 
 let () =
   let domains = Array.init 7 (fun i ->
diff --git a/testsuite/tests/lib-format/mc_pr586_par2.ml b/testsuite/tests/lib-format/mc_pr586_par2.ml
index 0ead3627b5..8a96be1456 100644
--- a/testsuite/tests/lib-format/mc_pr586_par2.ml
+++ b/testsuite/tests/lib-format/mc_pr586_par2.ml
@@ -1,4 +1,7 @@
-(* TEST *)
+(* TEST
+   * skip
+   reason = "OCaml 5 only"
+*)
 
 let () =
   let fmt_key = Format.synchronized_formatter_of_out_channel stdout in
diff --git a/testsuite/tests/lib-marshal/intext_par.ml b/testsuite/tests/lib-marshal/intext_par.ml
index 2efb846665..68ad0e1edb 100644
--- a/testsuite/tests/lib-marshal/intext_par.ml
+++ b/testsuite/tests/lib-marshal/intext_par.ml
@@ -1,5 +1,7 @@
 (* TEST
    modules = "intextaux_par.c"
+   * skip
+   reason = "OCaml 5 only"
 *)
 
 (* Test for output_value / input_value *)
diff --git a/testsuite/tests/lib-obj/reachable_words_np.ml b/testsuite/tests/lib-obj/reachable_words_np.ml
new file mode 100644
index 0000000000..8a50268d20
--- /dev/null
+++ b/testsuite/tests/lib-obj/reachable_words_np.ml
@@ -0,0 +1,21 @@
+(* TEST
+ * naked_pointers
+ ** bytecode
+ ** native
+*)
+
+let native =
+  match Sys.backend_type with
+  | Sys.Native -> true
+  | Sys.Bytecode -> false
+  | Sys.Other s -> print_endline s; assert false
+
+let size x = Obj.reachable_words (Obj.repr x)
+
+let expect_size s x =
+  let i = size x in
+  if i <> s then
+    Printf.printf "size = %i; expected = %i\n%!" i s
+
+let () =
+  expect_size (if native then 0 else 3) (1, 2)
diff --git a/testsuite/tests/lib-random/parallel.ml b/testsuite/tests/lib-random/parallel.ml
index e117e6eb71..929e041cfd 100644
--- a/testsuite/tests/lib-random/parallel.ml
+++ b/testsuite/tests/lib-random/parallel.ml
@@ -1,8 +1,10 @@
 (* TEST
    include unix
-   * libunix
-   ** bytecode
-   ** native
+   * skip
+   reason = "OCaml 5 only"
+   ** libunix
+   *** bytecode
+   *** native
  *)
 
 let () = Random.init 42
diff --git a/testsuite/tests/lib-str/parallel.ml b/testsuite/tests/lib-str/parallel.ml
index 23f2a5f7de..08055698e7 100644
--- a/testsuite/tests/lib-str/parallel.ml
+++ b/testsuite/tests/lib-str/parallel.ml
@@ -1,8 +1,10 @@
 (* TEST
-* hasstr
+* skip
+reason = "OCaml 5 only"
+** hasstr
 include str
-** bytecode
-** native
+*** bytecode
+*** native
 *)
 
 let total = Atomic.make 0
diff --git a/testsuite/tests/lib-sync/prodcons.ml b/testsuite/tests/lib-sync/prodcons.ml
index 2e2c09756c..093d8740be 100644
--- a/testsuite/tests/lib-sync/prodcons.ml
+++ b/testsuite/tests/lib-sync/prodcons.ml
@@ -1,4 +1,6 @@
 (* TEST
+   * skip
+   reason = "OCaml 5 only"
 *)
 
 (* Classic producer-consumer *)
diff --git a/testsuite/tests/lib-sync/trylock.ml b/testsuite/tests/lib-sync/trylock.ml
index 314f1142ca..b4719fff04 100644
--- a/testsuite/tests/lib-sync/trylock.ml
+++ b/testsuite/tests/lib-sync/trylock.ml
@@ -1,4 +1,6 @@
 (* TEST
+   * skip
+   reason = "OCaml 5 only"
 *)
 
 (* Test Mutex.try_lock *)
diff --git a/testsuite/tests/lib-sync/trylock2.ml b/testsuite/tests/lib-sync/trylock2.ml
index b31ace08b5..e29ee93f9e 100644
--- a/testsuite/tests/lib-sync/trylock2.ml
+++ b/testsuite/tests/lib-sync/trylock2.ml
@@ -1,4 +1,6 @@
 (* TEST
+   * skip
+   reason = "OCaml 5 only"
 *)
 
 (* Test Mutex.try_lock *)
diff --git a/testsuite/tests/lib-systhreads/multicore_lifecycle.ml b/testsuite/tests/lib-systhreads/multicore_lifecycle.ml
index f481464906..0138046146 100644
--- a/testsuite/tests/lib-systhreads/multicore_lifecycle.ml
+++ b/testsuite/tests/lib-systhreads/multicore_lifecycle.ml
@@ -1,8 +1,10 @@
 (* TEST
-* hassysthreads
+* skip
+reason = "OCaml 5 only"
+** hassysthreads
 include systhreads
-** bytecode
-** native
+*** bytecode
+*** native
 *)
 
 let _ =
diff --git a/testsuite/tests/lib-systhreads/test_c_thread_register.ml b/testsuite/tests/lib-systhreads/test_c_thread_register.ml
index a8ec98aa9a..784fe6945f 100644
--- a/testsuite/tests/lib-systhreads/test_c_thread_register.ml
+++ b/testsuite/tests/lib-systhreads/test_c_thread_register.ml
@@ -2,9 +2,10 @@
    modules = "test_c_thread_register_cstubs.c"
    * hassysthreads
    include systhreads
-   ** not-bsd
-   *** bytecode
-   *** native
+   ** not-windows
+   *** not-bsd
+   **** bytecode
+   **** native
 *)
 
 (* spins a external thread from C and register it to the OCaml runtime *)
diff --git a/testsuite/tests/lib-threads/uncaught_exception_handler.reference b/testsuite/tests/lib-threads/uncaught_exception_handler.reference
index 34a8e2d7f6..b18e7dc5bb 100644
--- a/testsuite/tests/lib-threads/uncaught_exception_handler.reference
+++ b/testsuite/tests/lib-threads/uncaught_exception_handler.reference
@@ -1,12 +1,12 @@
 Thread 1 killed on uncaught exception Uncaught_exception_handler.CallbackExn
 Raised at Uncaught_exception_handler.fn in file "uncaught_exception_handler.ml", line 28, characters 12-113
-Called from Thread.create.(fun) in file "thread.ml", line 49, characters 8-14
+Called from Thread.create.(fun) in file "thread.ml", line 51, characters 8-14
 [thread 2] caught Uncaught_exception_handler.CallbackExn
 Raised at Uncaught_exception_handler.fn in file "uncaught_exception_handler.ml", line 28, characters 12-113
-Called from Thread.create.(fun) in file "thread.ml", line 49, characters 8-14
+Called from Thread.create.(fun) in file "thread.ml", line 51, characters 8-14
 Thread 2 killed on uncaught exception Uncaught_exception_handler.CallbackExn
 Raised at Uncaught_exception_handler.fn in file "uncaught_exception_handler.ml", line 28, characters 12-113
-Called from Thread.create.(fun) in file "thread.ml", line 49, characters 8-14
+Called from Thread.create.(fun) in file "thread.ml", line 51, characters 8-14
 Thread 2 uncaught exception handler raised Uncaught_exception_handler.UncaughtHandlerExn
 Raised at Uncaught_exception_handler.handler in file "uncaught_exception_handler.ml", line 26, characters 2-26
-Called from Thread.create.(fun) in file "thread.ml", line 55, characters 10-41
+Called from Thread.create.(fun) in file "thread.ml", line 57, characters 10-41
diff --git a/testsuite/tests/lib-unix/common/multicore_fork_domain_alone.ml b/testsuite/tests/lib-unix/common/multicore_fork_domain_alone.ml
index 9549f256ea..169cf9a260 100644
--- a/testsuite/tests/lib-unix/common/multicore_fork_domain_alone.ml
+++ b/testsuite/tests/lib-unix/common/multicore_fork_domain_alone.ml
@@ -1,9 +1,11 @@
 (* TEST
 include unix
-* hasunix
-** not-windows
-*** bytecode
-*** native
+* skip
+reason = "OCaml 5 only"
+** hasunix
+*** not-windows
+**** bytecode
+**** native
 *)
 
 (* on Multicore, fork is not allowed is another domain is, and was running. *)
diff --git a/testsuite/tests/lib-unix/common/multicore_fork_domain_alone2.ml b/testsuite/tests/lib-unix/common/multicore_fork_domain_alone2.ml
index 929ed5ecf7..61f75dce4a 100644
--- a/testsuite/tests/lib-unix/common/multicore_fork_domain_alone2.ml
+++ b/testsuite/tests/lib-unix/common/multicore_fork_domain_alone2.ml
@@ -1,9 +1,11 @@
 (* TEST
 include unix
-* hasunix
-** not-windows
-*** bytecode
-*** native
+* skip
+reason = "OCaml 5 only"
+** hasunix
+*** not-windows
+**** bytecode
+**** native
 *)
 
 (* on Multicore, fork is not allowed is another domain is, and was running. *)
diff --git a/testsuite/tests/parallel/atomics.ml b/testsuite/tests/parallel/atomics.ml
index 9c1d0a3cf2..b1f5813b4a 100644
--- a/testsuite/tests/parallel/atomics.ml
+++ b/testsuite/tests/parallel/atomics.ml
@@ -1,8 +1,10 @@
 (* TEST
-* hasunix
+* skip
+reason = "OCaml 5 only"
+** hasunix
 include unix
-** bytecode
-** native
+*** bytecode
+*** native
 *)
 
 type u = U of unit
diff --git a/testsuite/tests/parallel/backup_thread.ml b/testsuite/tests/parallel/backup_thread.ml
index 05b06cc47c..c69f164ce7 100644
--- a/testsuite/tests/parallel/backup_thread.ml
+++ b/testsuite/tests/parallel/backup_thread.ml
@@ -1,8 +1,10 @@
 (* TEST
-* hasunix
+* skip
+reason = "OCaml 5 only"
+** hasunix
 include unix
-** bytecode
-** native
+*** bytecode
+*** native
 *)
 
 
diff --git a/testsuite/tests/parallel/backup_thread_pipe.ml b/testsuite/tests/parallel/backup_thread_pipe.ml
index 41fd101c1f..d0c5bb6e35 100644
--- a/testsuite/tests/parallel/backup_thread_pipe.ml
+++ b/testsuite/tests/parallel/backup_thread_pipe.ml
@@ -1,8 +1,10 @@
 (* TEST
-* hasunix
+* skip
+reason = "OCaml 5 only"
+** hasunix
 include unix
-** bytecode
-** native
+*** bytecode
+*** native
 *)
 
 
diff --git a/testsuite/tests/parallel/constpromote.ml b/testsuite/tests/parallel/constpromote.ml
index fc9fd65ff6..466c846ed1 100644
--- a/testsuite/tests/parallel/constpromote.ml
+++ b/testsuite/tests/parallel/constpromote.ml
@@ -1,8 +1,10 @@
 (* TEST
-* hasunix
+* skip
+reason = "OCaml 5 only"
+** hasunix
 include unix
-** bytecode
-** native
+*** bytecode
+*** native
 *)
 
 (* when run with the bytecode debug runtime, this test
diff --git a/testsuite/tests/parallel/deadcont.ml b/testsuite/tests/parallel/deadcont.ml
index a5642e425c..36077b0724 100644
--- a/testsuite/tests/parallel/deadcont.ml
+++ b/testsuite/tests/parallel/deadcont.ml
@@ -1,8 +1,10 @@
 (* TEST
-* hasunix
+* skip
+reason = "OCaml 5 only"
+** hasunix
 include unix
-** bytecode
-** native
+*** bytecode
+*** native
 *)
 
 (*
diff --git a/testsuite/tests/parallel/domain_dls.ml b/testsuite/tests/parallel/domain_dls.ml
index db4ebe0c56..82d8f55e5a 100644
--- a/testsuite/tests/parallel/domain_dls.ml
+++ b/testsuite/tests/parallel/domain_dls.ml
@@ -1,8 +1,10 @@
 (* TEST
-* hasunix
+* skip
+reason = "OCaml 5 only"
+** hasunix
 include unix
-** bytecode
-** native
+*** bytecode
+*** native
 *)
 
 let check_dls () =
diff --git a/testsuite/tests/parallel/domain_dls2.ml b/testsuite/tests/parallel/domain_dls2.ml
index 6c79145ba7..279f178774 100644
--- a/testsuite/tests/parallel/domain_dls2.ml
+++ b/testsuite/tests/parallel/domain_dls2.ml
@@ -1,8 +1,10 @@
 (* TEST
-* hasunix
+* skip
+reason = "OCaml 5 only"
+** hasunix
 include unix
-** bytecode
-** native
+*** bytecode
+*** native
 *)
 
 let _ =
diff --git a/testsuite/tests/parallel/domain_id.ml b/testsuite/tests/parallel/domain_id.ml
index 023d425346..79a2fe48a8 100644
--- a/testsuite/tests/parallel/domain_id.ml
+++ b/testsuite/tests/parallel/domain_id.ml
@@ -1,8 +1,10 @@
 (* TEST
-* hasunix
+* skip
+reason = "OCaml 5 only"
+** hasunix
 include unix
-** bytecode
-** native
+*** bytecode
+*** native
 *)
 
 open Domain
diff --git a/testsuite/tests/parallel/domain_parallel_spawn_burn.ml b/testsuite/tests/parallel/domain_parallel_spawn_burn.ml
index 8dd2398ac8..ffb7e2f969 100644
--- a/testsuite/tests/parallel/domain_parallel_spawn_burn.ml
+++ b/testsuite/tests/parallel/domain_parallel_spawn_burn.ml
@@ -1,8 +1,10 @@
 (* TEST
-* hasunix
+* skip
+reason = "OCaml 5 only"
+** hasunix
 include unix
-** bytecode
-** native
+*** bytecode
+*** native
 *)
 
 open Domain
diff --git a/testsuite/tests/parallel/domain_serial_spawn_burn.ml b/testsuite/tests/parallel/domain_serial_spawn_burn.ml
index 2d1961d9f1..89c3f3d5c5 100644
--- a/testsuite/tests/parallel/domain_serial_spawn_burn.ml
+++ b/testsuite/tests/parallel/domain_serial_spawn_burn.ml
@@ -1,8 +1,10 @@
 (* TEST
-* hasunix
+* skip
+reason = "OCaml 5 only"
+** hasunix
 include unix
-** bytecode
-** native
+*** bytecode
+*** native
 *)
 
 open Domain
diff --git a/testsuite/tests/parallel/fib_threads.ml b/testsuite/tests/parallel/fib_threads.ml
index f6005729b7..3ab3dde90d 100644
--- a/testsuite/tests/parallel/fib_threads.ml
+++ b/testsuite/tests/parallel/fib_threads.ml
@@ -1,8 +1,10 @@
 (* TEST
-* hassysthreads
+* skip
+reason = "OCaml 5 only"
+** hassysthreads
 include systhreads
-** bytecode
-** native
+*** bytecode
+*** native
 *)
 
 
diff --git a/testsuite/tests/parallel/join.ml b/testsuite/tests/parallel/join.ml
index fba31533e3..388d8ef8c3 100644
--- a/testsuite/tests/parallel/join.ml
+++ b/testsuite/tests/parallel/join.ml
@@ -1,8 +1,10 @@
 (* TEST
-* hasunix
+* skip
+reason = "OCaml 5 only"
+** hasunix
 include unix
-** bytecode
-** native
+*** bytecode
+*** native
 *)
 
 let main_join n =
diff --git a/testsuite/tests/parallel/major_gc_wait_backup.ml b/testsuite/tests/parallel/major_gc_wait_backup.ml
index e418500774..f11190aee3 100644
--- a/testsuite/tests/parallel/major_gc_wait_backup.ml
+++ b/testsuite/tests/parallel/major_gc_wait_backup.ml
@@ -1,8 +1,10 @@
 (* TEST
-* hasunix
+* skip
+reason = "OCaml 5 only"
+** hasunix
 include unix
-** native
-** bytecode
+*** native
+*** bytecode
 *)
 
 type 'a tree = Empty | Node of 'a tree * 'a tree
diff --git a/testsuite/tests/parallel/mctest.ml b/testsuite/tests/parallel/mctest.ml
index 505223cde4..169f871913 100644
--- a/testsuite/tests/parallel/mctest.ml
+++ b/testsuite/tests/parallel/mctest.ml
@@ -1,8 +1,10 @@
 (* TEST
-* hasunix
+* skip
+reason = "OCaml 5 only"
+** hasunix
 include unix
-** bytecode
-** native
+*** bytecode
+*** native
 *)
 
 (*
diff --git a/testsuite/tests/parallel/multicore_systhreads.ml b/testsuite/tests/parallel/multicore_systhreads.ml
index 2f0fcf20b0..5ce5ea86ea 100644
--- a/testsuite/tests/parallel/multicore_systhreads.ml
+++ b/testsuite/tests/parallel/multicore_systhreads.ml
@@ -1,8 +1,10 @@
 (* TEST
-* hassysthreads
+* skip
+reason = "OCaml 5 only"
+** hassysthreads
 include systhreads
-** bytecode
-** native
+*** bytecode
+*** native
 *)
 
 
diff --git a/testsuite/tests/parallel/pingpong.ml b/testsuite/tests/parallel/pingpong.ml
index 30fb9eee71..6113340ccf 100644
--- a/testsuite/tests/parallel/pingpong.ml
+++ b/testsuite/tests/parallel/pingpong.ml
@@ -1,8 +1,10 @@
 (* TEST
-* hasunix
+* skip
+reason = "OCaml 5 only"
+** hasunix
 include unix
-** bytecode
-** native
+*** bytecode
+*** native
 *)
 
 let r = ref (Some 0)
diff --git a/testsuite/tests/parallel/poll.ml b/testsuite/tests/parallel/poll.ml
index f07c0e0804..dd7a94f3cf 100644
--- a/testsuite/tests/parallel/poll.ml
+++ b/testsuite/tests/parallel/poll.ml
@@ -1,8 +1,10 @@
 (* TEST
-* hasunix
+* skip
+reason = "OCaml 5 only"
+** hasunix
 include unix
-** bytecode
-** native
+*** bytecode
+*** native
 *)
 
 let continue = Atomic.make true
diff --git a/testsuite/tests/parallel/prodcons_domains.ml b/testsuite/tests/parallel/prodcons_domains.ml
index 67499d342a..e8e9d736f3 100644
--- a/testsuite/tests/parallel/prodcons_domains.ml
+++ b/testsuite/tests/parallel/prodcons_domains.ml
@@ -1,9 +1,11 @@
 (* TEST
 
-* hassysthreads
+* skip
+reason = "OCaml 5 only"
+** hassysthreads
 include systhreads
-** bytecode
-** native
+*** bytecode
+*** native
 
 *)
 
diff --git a/testsuite/tests/parallel/tak.ml b/testsuite/tests/parallel/tak.ml
index a9b6874c4f..bdc4173266 100644
--- a/testsuite/tests/parallel/tak.ml
+++ b/testsuite/tests/parallel/tak.ml
@@ -1,4 +1,6 @@
 (* TEST
+   * skip
+   reason = "OCaml 5 only"
 *)
 
 (* filling minor heaps in parallel to trigger
diff --git a/testsuite/tests/parallel/test_c_thread_register.ml b/testsuite/tests/parallel/test_c_thread_register.ml
index 352424a377..9e2073c4ef 100644
--- a/testsuite/tests/parallel/test_c_thread_register.ml
+++ b/testsuite/tests/parallel/test_c_thread_register.ml
@@ -1,9 +1,11 @@
 (* TEST
+   * skip
+   reason = "OCaml 5 only"
    modules = "test_c_thread_register_cstubs.c"
-   * hassysthreads
+   ** hassysthreads
    include systhreads
-   ** bytecode
-   ** native
+   *** bytecode
+   *** native
 *)
 
 (* spins a external thread from C and register it to the OCaml runtime *)
diff --git a/testsuite/tests/regression/pr9326/gc_set.ml b/testsuite/tests/regression/pr9326/gc_set.ml
index 2570aec28e..e9d7dbcd4c 100644
--- a/testsuite/tests/regression/pr9326/gc_set.ml
+++ b/testsuite/tests/regression/pr9326/gc_set.ml
@@ -4,35 +4,32 @@
 open Gc
 
 let min_heap_sz = 524288 (* 512k *)
-let space_overhead = 70
-let stack_limit = 4194304 (* 4M *)
-let custom_major_ratio = 40
-let custom_minor_ratio = 99
-let custom_minor_max_size = 4096
+let maj_heap_inc = 4194304 (* 4M *)
 
 let _ =
   let g1 = Gc.get() in
   (* Do not use { g1 with ... }, so that the code will break if more fields
      are added to the Gc.control record type *)
   Gc.set { minor_heap_size = min_heap_sz;
-           major_heap_increment = g1.major_heap_increment;
-           space_overhead = space_overhead;
+           major_heap_increment = maj_heap_inc;
+           space_overhead = g1.space_overhead;
            verbose = g1.verbose;
            max_overhead = g1.max_overhead;
-           stack_limit = stack_limit;
+           stack_limit = g1.stack_limit;
            allocation_policy = g1.allocation_policy;
            window_size = g1.window_size;
-           custom_major_ratio = custom_major_ratio;
-           custom_minor_ratio = custom_minor_ratio;
-           custom_minor_max_size = custom_minor_max_size };
+           custom_major_ratio = g1.custom_major_ratio;
+           custom_minor_ratio = g1.custom_minor_ratio;
+           custom_minor_max_size = g1.custom_minor_max_size };
   let g2 = Gc.get() in
   assert (g2.minor_heap_size = min_heap_sz);
-  assert (g2.space_overhead = space_overhead);
+  assert (g2.major_heap_increment = maj_heap_inc);
+  assert (g2.space_overhead = g1.space_overhead);
   assert (g2.verbose = g1.verbose);
   assert (g2.max_overhead = g1.max_overhead);
-  assert (g2.stack_limit = stack_limit);
+  assert (g2.stack_limit = g1.stack_limit);
   assert (g2.allocation_policy = g1.allocation_policy);
   assert (g2.window_size = g1.window_size);
-  assert (g2.custom_major_ratio = custom_major_ratio);
-  assert (g2.custom_minor_ratio = custom_minor_ratio);
-  assert (g2.custom_minor_max_size = custom_minor_max_size)
+  assert (g2.custom_major_ratio = g1.custom_major_ratio);
+  assert (g2.custom_minor_ratio = g1.custom_minor_ratio);
+  assert (g2.custom_minor_max_size = g1.custom_minor_max_size)
diff --git a/testsuite/tests/runtime-naked-pointers/cstubs.c b/testsuite/tests/runtime-naked-pointers/cstubs.c
new file mode 100644
index 0000000000..e9315f3aea
--- /dev/null
+++ b/testsuite/tests/runtime-naked-pointers/cstubs.c
@@ -0,0 +1,20 @@
+#include <string.h>
+#include "caml/mlvalues.h"
+#include "caml/gc.h"
+#include "caml/memory.h"
+
+static int colors[4] = { Caml_white, Caml_gray, Caml_blue, Caml_black };
+
+value make_block(value header_size, value color, value size)
+{
+  intnat sz = Nativeint_val(size);
+  value * p = caml_stat_alloc((1 + sz) * sizeof(value));
+  p[0] = Make_header(Nativeint_val(header_size), 0, colors[Int_val(color)]);
+  memset(p + 1, 0x80, sz * sizeof(value));
+  return (value) (p + 1);
+}
+
+value make_raw_pointer (value v)
+{
+  return (value) Nativeint_val(v);
+}
diff --git a/testsuite/tests/runtime-naked-pointers/np.ml b/testsuite/tests/runtime-naked-pointers/np.ml
new file mode 100644
index 0000000000..1738934ff0
--- /dev/null
+++ b/testsuite/tests/runtime-naked-pointers/np.ml
@@ -0,0 +1,11 @@
+type color = White | Gray | Blue | Black
+
+external make_block: nativeint -> color -> nativeint -> Obj.t
+         = "make_block"
+
+external make_raw_pointer: nativeint -> Obj.t
+         = "make_raw_pointer"
+
+let do_gc root =
+  Gc.compact();   (* full major + compaction *)
+  root
diff --git a/testsuite/tests/runtime-naked-pointers/np1.ml b/testsuite/tests/runtime-naked-pointers/np1.ml
new file mode 100644
index 0000000000..be4c677a23
--- /dev/null
+++ b/testsuite/tests/runtime-naked-pointers/np1.ml
@@ -0,0 +1,12 @@
+(* TEST
+   modules = "cstubs.c np.ml"
+   * bytecode
+   * native
+*)
+
+open Np
+
+(* Out-of-heap object with black header is accepted even in no-naked-pointers
+   mode.  GC doesn't scan black objects. *)
+
+let x = do_gc [ make_block 100n Black 100n ]
diff --git a/testsuite/tests/runtime-naked-pointers/np2.ml b/testsuite/tests/runtime-naked-pointers/np2.ml
new file mode 100644
index 0000000000..f24c813c2b
--- /dev/null
+++ b/testsuite/tests/runtime-naked-pointers/np2.ml
@@ -0,0 +1,13 @@
+(* TEST
+   modules = "cstubs.c np.ml"
+   * bytecode
+   * native
+*)
+
+open Np
+
+(* Out-of-heap object with black header is accepted even in no-naked-pointers
+   mode.  GC doesn't scan black objects.  However, if the size in the
+   head is crazily big, the naked pointer detector will warn. *)
+
+let x = do_gc [ make_block (-1n) Black 100n ]
diff --git a/testsuite/tests/runtime-naked-pointers/np2.run b/testsuite/tests/runtime-naked-pointers/np2.run
new file mode 100755
index 0000000000..c03f6f688d
--- /dev/null
+++ b/testsuite/tests/runtime-naked-pointers/np2.run
@@ -0,0 +1,3 @@
+#!/bin/sh
+
+exec ${test_source_directory}/runtest.sh
diff --git a/testsuite/tests/runtime-naked-pointers/np3.ml b/testsuite/tests/runtime-naked-pointers/np3.ml
new file mode 100644
index 0000000000..d207279df1
--- /dev/null
+++ b/testsuite/tests/runtime-naked-pointers/np3.ml
@@ -0,0 +1,15 @@
+(* TEST
+   modules = "cstubs.c np.ml"
+   * naked_pointers
+   ** bytecode
+   ** native
+*)
+
+open Np
+
+(* Out-of-heap object with non-black header is OK in naked pointers mode only *)
+(* Note that the header size can be wrong as it should not be used by the GC *)
+
+let x = do_gc [ make_block 10000n White 10n;
+                make_block 1n Blue 0n;
+                make_block (-1n) Gray 5n ]
diff --git a/testsuite/tests/runtime-naked-pointers/np3.run b/testsuite/tests/runtime-naked-pointers/np3.run
new file mode 100755
index 0000000000..c03f6f688d
--- /dev/null
+++ b/testsuite/tests/runtime-naked-pointers/np3.run
@@ -0,0 +1,3 @@
+#!/bin/sh
+
+exec ${test_source_directory}/runtest.sh
diff --git a/testsuite/tests/runtime-naked-pointers/np4.ml b/testsuite/tests/runtime-naked-pointers/np4.ml
new file mode 100644
index 0000000000..98966ddffc
--- /dev/null
+++ b/testsuite/tests/runtime-naked-pointers/np4.ml
@@ -0,0 +1,13 @@
+(* TEST
+   modules = "cstubs.c np.ml"
+   * naked_pointers
+   ** bytecode
+   ** native
+*)
+
+open Np
+
+(* Null pointers and bad pointers outside the heap are OK
+   in naked pointers mode only *)
+
+let x = do_gc [ make_raw_pointer 0n; make_raw_pointer 42n ]
diff --git a/testsuite/tests/runtime-naked-pointers/np4.run b/testsuite/tests/runtime-naked-pointers/np4.run
new file mode 100755
index 0000000000..c03f6f688d
--- /dev/null
+++ b/testsuite/tests/runtime-naked-pointers/np4.run
@@ -0,0 +1,3 @@
+#!/bin/sh
+
+exec ${test_source_directory}/runtest.sh
diff --git a/testsuite/tests/runtime-naked-pointers/runtest.sh b/testsuite/tests/runtime-naked-pointers/runtest.sh
new file mode 100755
index 0000000000..f5d4df561c
--- /dev/null
+++ b/testsuite/tests/runtime-naked-pointers/runtest.sh
@@ -0,0 +1,10 @@
+#!/bin/sh
+
+if grep -q "#define NAKED_POINTERS_CHECKER" ${ocamlsrcdir}/runtime/caml/m.h \
+&& (echo ${program} | grep -q '\.opt')
+then
+  (${program} > ${output}) 2>&1 | grep -q '^Out-of-heap '
+  exit $?
+else
+  exec ${program} > ${output}
+fi
diff --git a/testsuite/tests/shapes/comp_units.ml b/testsuite/tests/shapes/comp_units.ml
index ea64f67af5..fc7802f56b 100644
--- a/testsuite/tests/shapes/comp_units.ml
+++ b/testsuite/tests/shapes/comp_units.ml
@@ -25,7 +25,7 @@ module Mproj = Unit
 module F (X : sig type t end) = X
 [%%expect{|
 {
- "F"[module] -> Abs<.4>(X/280, X/280<.3>);
+ "F"[module] -> Abs<.4>(X/275, X/275<.3>);
  }
 module F : functor (X : sig type t end) -> sig type t = X.t end
 |}]
diff --git a/testsuite/tests/shapes/functors.ml b/testsuite/tests/shapes/functors.ml
index aa4fe0d0f0..4683db74c4 100644
--- a/testsuite/tests/shapes/functors.ml
+++ b/testsuite/tests/shapes/functors.ml
@@ -17,7 +17,7 @@ module type S = sig type t val x : t end
 module Falias (X : S) = X
 [%%expect{|
 {
- "Falias"[module] -> Abs<.4>(X/282, X/282<.3>);
+ "Falias"[module] -> Abs<.4>(X/277, X/277<.3>);
  }
 module Falias : functor (X : S) -> sig type t = X.t val x : t end
 |}]
@@ -29,10 +29,10 @@ end
 {
  "Finclude"[module] ->
      Abs<.6>
-        (X/286,
+        (X/281,
          {
-          "t"[type] -> X/286<.5> . "t"[type];
-          "x"[value] -> X/286<.5> . "x"[value];
+          "t"[type] -> X/281<.5> . "t"[type];
+          "x"[value] -> X/281<.5> . "x"[value];
           });
  }
 module Finclude : functor (X : S) -> sig type t = X.t val x : t end
@@ -45,7 +45,7 @@ end
 [%%expect{|
 {
  "Fredef"[module] ->
-     Abs<.10>(X/293, {
+     Abs<.10>(X/288, {
                       "t"[type] -> <.8>;
                       "x"[value] -> <.9>;
                       });
@@ -223,8 +223,8 @@ module Big_to_small1 : B2S = functor (X : Big) -> X
 [%%expect{|
 {
  "Big_to_small1"[module] ->
-     Abs<.40>(X/388, {<.39>
-                      "t"[type] -> X/388<.39> . "t"[type];
+     Abs<.40>(X/383, {<.39>
+                      "t"[type] -> X/383<.39> . "t"[type];
                       });
  }
 module Big_to_small1 : B2S
@@ -234,8 +234,8 @@ module Big_to_small2 : B2S = functor (X : Big) -> struct include X end
 [%%expect{|
 {
  "Big_to_small2"[module] ->
-     Abs<.42>(X/391, {
-                      "t"[type] -> X/391<.41> . "t"[type];
+     Abs<.42>(X/386, {
+                      "t"[type] -> X/386<.41> . "t"[type];
                       });
  }
 module Big_to_small2 : B2S
diff --git a/testsuite/tests/shapes/open_arg.ml b/testsuite/tests/shapes/open_arg.ml
index 9dd8cbe05a..e8020169be 100644
--- a/testsuite/tests/shapes/open_arg.ml
+++ b/testsuite/tests/shapes/open_arg.ml
@@ -22,7 +22,7 @@ end = struct end
 
 [%%expect{|
 {
- "Make"[module] -> Abs<.3>(I/282, {
+ "Make"[module] -> Abs<.3>(I/277, {
                                    });
  }
 module Make : functor (I : sig end) -> sig end
diff --git a/testsuite/tests/shapes/recmodules.ml b/testsuite/tests/shapes/recmodules.ml
index 2f31951dc4..b40e4015d2 100644
--- a/testsuite/tests/shapes/recmodules.ml
+++ b/testsuite/tests/shapes/recmodules.ml
@@ -43,8 +43,8 @@ and B : sig
 end = B
 [%%expect{|
 {
- "A"[module] -> A/305<.11>;
- "B"[module] -> B/306<.12>;
+ "A"[module] -> A/300<.11>;
+ "B"[module] -> B/301<.12>;
  }
 module rec A : sig type t = Leaf of B.t end
 and B : sig type t = int end
@@ -82,13 +82,13 @@ end = Set.Make(A)
  "ASet"[module] ->
      {
       "compare"[value] ->
-          CU Stdlib . "Set"[module] . "Make"[module](A/327<.19>) .
+          CU Stdlib . "Set"[module] . "Make"[module](A/322<.19>) .
           "compare"[value];
       "elt"[type] ->
-          CU Stdlib . "Set"[module] . "Make"[module](A/327<.19>) .
+          CU Stdlib . "Set"[module] . "Make"[module](A/322<.19>) .
           "elt"[type];
       "t"[type] ->
-          CU Stdlib . "Set"[module] . "Make"[module](A/327<.19>) . "t"[type];
+          CU Stdlib . "Set"[module] . "Make"[module](A/322<.19>) . "t"[type];
       };
  }
 module rec A :
diff --git a/testsuite/tests/shapes/rotor_example.ml b/testsuite/tests/shapes/rotor_example.ml
index d0d4632bb3..cf98fcb5d4 100644
--- a/testsuite/tests/shapes/rotor_example.ml
+++ b/testsuite/tests/shapes/rotor_example.ml
@@ -26,7 +26,7 @@ end
 {
  "Pair"[module] ->
      Abs<.9>
-        (X/282, Abs(Y/283, {
+        (X/277, Abs(Y/278, {
                             "t"[type] -> <.5>;
                             "to_string"[value] -> <.6>;
                             }));
diff --git a/testsuite/tests/statmemprof/alloc_counts.ml b/testsuite/tests/statmemprof/alloc_counts.ml
index de0d1e9e49..f8cbb5658d 100644
--- a/testsuite/tests/statmemprof/alloc_counts.ml
+++ b/testsuite/tests/statmemprof/alloc_counts.ml
@@ -1,7 +1,4 @@
-(* TEST
-* skip
-reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
-*)
+(* TEST *)
 module MP = Gc.Memprof
 
 let allocs_by_memprof f =
diff --git a/testsuite/tests/statmemprof/arrays_in_major.ml b/testsuite/tests/statmemprof/arrays_in_major.ml
index eb627324ba..78907a18e3 100644
--- a/testsuite/tests/statmemprof/arrays_in_major.ml
+++ b/testsuite/tests/statmemprof/arrays_in_major.ml
@@ -1,7 +1,5 @@
 (* TEST
    flags = "-g"
-   * skip
-   reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
 *)
 
 open Gc.Memprof
diff --git a/testsuite/tests/statmemprof/arrays_in_major.reference b/testsuite/tests/statmemprof/arrays_in_major.reference
new file mode 100644
index 0000000000..1f34ad8ec8
--- /dev/null
+++ b/testsuite/tests/statmemprof/arrays_in_major.reference
@@ -0,0 +1,11 @@
+check_nosample
+check_counts_full_major
+check_counts_full_major
+check_no_nested
+check_distrib 300 3000 3 0.000010
+check_distrib 300 3000 1 0.000100
+check_distrib 300 3000 1 0.010000
+check_distrib 300 3000 1 0.900000
+check_distrib 300 300 100000 0.100000
+check_distrib 300000 300000 30 0.100000
+OK !
diff --git a/testsuite/tests/statmemprof/arrays_in_minor.ml b/testsuite/tests/statmemprof/arrays_in_minor.ml
index 4359642d0e..432f8b1d09 100644
--- a/testsuite/tests/statmemprof/arrays_in_minor.ml
+++ b/testsuite/tests/statmemprof/arrays_in_minor.ml
@@ -1,7 +1,5 @@
 (* TEST
    flags = "-g"
-   * skip
-   reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
 *)
 
 open Gc.Memprof
diff --git a/testsuite/tests/statmemprof/arrays_in_minor.reference b/testsuite/tests/statmemprof/arrays_in_minor.reference
new file mode 100644
index 0000000000..1dad91939c
--- /dev/null
+++ b/testsuite/tests/statmemprof/arrays_in_minor.reference
@@ -0,0 +1,11 @@
+check_nosample
+check_counts_full_major
+check_counts_full_major
+check_no_nested
+check_distrib 1 250 1000 0.000010
+check_distrib 1 250 1000 0.000100
+check_distrib 1 250 1000 0.010000
+check_distrib 1 250 1000 0.900000
+check_distrib 1 1 10000000 0.010000
+check_distrib 250 250 100000 0.100000
+OK !
diff --git a/testsuite/tests/statmemprof/blocking_in_callback.ml b/testsuite/tests/statmemprof/blocking_in_callback.ml
index e1e40f1fb6..00f49cfc74 100644
--- a/testsuite/tests/statmemprof/blocking_in_callback.ml
+++ b/testsuite/tests/statmemprof/blocking_in_callback.ml
@@ -1,8 +1,6 @@
 (* TEST
 * hassysthreads
 include systhreads
-* skip
-reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
 ** bytecode
 ** native
 *)
diff --git a/testsuite/tests/statmemprof/callstacks.ml b/testsuite/tests/statmemprof/callstacks.ml
index e864a50019..ec5a4199f0 100644
--- a/testsuite/tests/statmemprof/callstacks.ml
+++ b/testsuite/tests/statmemprof/callstacks.ml
@@ -3,15 +3,11 @@
 
    * flat-float-array
      reference = "${test_source_directory}/callstacks.flat-float-array.reference"
-   * skip
-   reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
    ** native
    ** bytecode
 
    * no-flat-float-array
      reference = "${test_source_directory}/callstacks.no-flat-float-array.reference"
-   * skip
-   reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
    ** native
    ** bytecode
 *)
diff --git a/testsuite/tests/statmemprof/comballoc.ml b/testsuite/tests/statmemprof/comballoc.ml
index 60ca4a0123..22b2547101 100644
--- a/testsuite/tests/statmemprof/comballoc.ml
+++ b/testsuite/tests/statmemprof/comballoc.ml
@@ -1,10 +1,8 @@
 (* TEST
    flags = "-g"
-   * skip
-   reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
-   ** bytecode
+   * bytecode
      reference = "${test_source_directory}/comballoc.byte.reference"
-   ** native
+   * native
      reference = "${test_source_directory}/comballoc.opt.reference"
 *)
 
diff --git a/testsuite/tests/statmemprof/custom.ml b/testsuite/tests/statmemprof/custom.ml
index 41cf902ec8..f0ddfa7eed 100644
--- a/testsuite/tests/statmemprof/custom.ml
+++ b/testsuite/tests/statmemprof/custom.ml
@@ -1,7 +1,4 @@
-(* TEST
-* skip
-reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
-*)
+(* TEST *)
 
 open Gc.Memprof
 
diff --git a/testsuite/tests/statmemprof/exception_callback.ml b/testsuite/tests/statmemprof/exception_callback.ml
index f9f02f690f..e1589372ab 100644
--- a/testsuite/tests/statmemprof/exception_callback.ml
+++ b/testsuite/tests/statmemprof/exception_callback.ml
@@ -1,7 +1,5 @@
 (* TEST
    exit_status = "2"
-   * skip
-   reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
 *)
 
 open Gc.Memprof
diff --git a/testsuite/tests/statmemprof/exception_callback_minor.ml b/testsuite/tests/statmemprof/exception_callback_minor.ml
index 0bb37782be..f514123276 100644
--- a/testsuite/tests/statmemprof/exception_callback_minor.ml
+++ b/testsuite/tests/statmemprof/exception_callback_minor.ml
@@ -1,7 +1,5 @@
 (* TEST
    exit_status = "2"
-   * skip
-   reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
 *)
 
 open Gc.Memprof
diff --git a/testsuite/tests/statmemprof/intern.ml b/testsuite/tests/statmemprof/intern.ml
index bebcc3c8ff..bce6f89c5c 100644
--- a/testsuite/tests/statmemprof/intern.ml
+++ b/testsuite/tests/statmemprof/intern.ml
@@ -1,7 +1,5 @@
 (* TEST
    flags = "-g"
-   * skip
-   reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
 *)
 
 open Gc.Memprof
diff --git a/testsuite/tests/statmemprof/intern.reference b/testsuite/tests/statmemprof/intern.reference
new file mode 100644
index 0000000000..d83e8d6d50
--- /dev/null
+++ b/testsuite/tests/statmemprof/intern.reference
@@ -0,0 +1,10 @@
+check_nosample
+check_counts_full_major
+check_counts_full_major
+check_no_nested
+check_distrib 2 3000 3 0.000010
+check_distrib 2 3000 1 0.000100
+check_distrib 2 2000 1 0.010000
+check_distrib 2 2000 1 0.900000
+check_distrib 300000 300000 20 0.100000
+OK !
diff --git a/testsuite/tests/statmemprof/lists_in_minor.ml b/testsuite/tests/statmemprof/lists_in_minor.ml
index d08716c71b..ebd434857e 100644
--- a/testsuite/tests/statmemprof/lists_in_minor.ml
+++ b/testsuite/tests/statmemprof/lists_in_minor.ml
@@ -1,7 +1,5 @@
 (* TEST
    flags = "-g"
-   * skip
-   reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
 *)
 
 open Gc.Memprof
diff --git a/testsuite/tests/statmemprof/lists_in_minor.reference b/testsuite/tests/statmemprof/lists_in_minor.reference
new file mode 100644
index 0000000000..11cfe0ca12
--- /dev/null
+++ b/testsuite/tests/statmemprof/lists_in_minor.reference
@@ -0,0 +1,8 @@
+check_distrib 10 1000000 0.010000
+check_distrib 1000000 10 0.000010
+check_distrib 1000000 10 0.000100
+check_distrib 1000000 10 0.001000
+check_distrib 1000000 10 0.010000
+check_distrib 100000 10 0.100000
+check_distrib 100000 10 0.900000
+OK !
diff --git a/testsuite/tests/statmemprof/minor_no_postpone.ml b/testsuite/tests/statmemprof/minor_no_postpone.ml
index 21c8bfb244..fcb94cf81d 100644
--- a/testsuite/tests/statmemprof/minor_no_postpone.ml
+++ b/testsuite/tests/statmemprof/minor_no_postpone.ml
@@ -1,7 +1,5 @@
 (* TEST
    modules = "minor_no_postpone_stub.c"
-   * skip
-   reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
 *)
 
 open Gc.Memprof
diff --git a/testsuite/tests/statmemprof/moved_while_blocking.ml b/testsuite/tests/statmemprof/moved_while_blocking.ml
index bb8dfc9848..8efc172aea 100644
--- a/testsuite/tests/statmemprof/moved_while_blocking.ml
+++ b/testsuite/tests/statmemprof/moved_while_blocking.ml
@@ -1,8 +1,6 @@
 (* TEST
 * hassysthreads
 include systhreads
-* skip
-reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
 ** bytecode
 ** native
 *)
diff --git a/testsuite/tests/statmemprof/thread_exit_in_callback.ml b/testsuite/tests/statmemprof/thread_exit_in_callback.ml
index 28e2aabb8b..753f7726f5 100644
--- a/testsuite/tests/statmemprof/thread_exit_in_callback.ml
+++ b/testsuite/tests/statmemprof/thread_exit_in_callback.ml
@@ -1,8 +1,6 @@
 (* TEST
 * hassysthreads
 include systhreads
-* skip
-reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
 ** bytecode
 ** native
 *)
diff --git a/testsuite/tests/tool-debugger/basic/debuggee.ml b/testsuite/tests/tool-debugger/basic/debuggee.ml
index 8604edf239..91ad3c21dc 100644
--- a/testsuite/tests/tool-debugger/basic/debuggee.ml
+++ b/testsuite/tests/tool-debugger/basic/debuggee.ml
@@ -2,15 +2,13 @@
 set foo = "bar"
 flags += " -g "
 ocamldebug_script = "${test_source_directory}/input_script"
-* skip
-reason = "ocamldebug is broken (#34)"
-** debugger
-*** shared-libraries
-**** setup-ocamlc.byte-build-env
-***** ocamlc.byte
-****** check-ocamlc.byte-output
-******* ocamldebug
-******** check-program-output
+* debugger
+** shared-libraries
+*** setup-ocamlc.byte-build-env
+**** ocamlc.byte
+***** check-ocamlc.byte-output
+****** ocamldebug
+******* check-program-output
 *)
 
 print_endline Sys.argv.(1);;
diff --git a/testsuite/tests/tool-debugger/dynlink/host.ml b/testsuite/tests/tool-debugger/dynlink/host.ml
index c445c8acd3..f46ef8a022 100644
--- a/testsuite/tests/tool-debugger/dynlink/host.ml
+++ b/testsuite/tests/tool-debugger/dynlink/host.ml
@@ -7,29 +7,27 @@ libraries = ""
 flags += " -g "
 ocamldebug_script = "${test_source_directory}/input_script"
 
-* skip
-reason = "ocamldebug is broken (#34)"
-** debugger
-*** shared-libraries
-**** setup-ocamlc.byte-build-env
-***** ocamlc.byte
+* debugger
+** shared-libraries
+*** setup-ocamlc.byte-build-env
+**** ocamlc.byte
 module = "host.ml"
-****** ocamlc.byte
+***** ocamlc.byte
 module = "plugin.ml"
-******* ocamlc.byte
+****** ocamlc.byte
 module = ""
 all_modules = "host.cmo"
 program = "${test_build_directory}/host.byte"
 libraries = "dynlink"
 
-******** run
+******* run
 output = "host.output"
-********* check-program-output
+******** check-program-output
 reference = "${test_source_directory}/host.reference"
 
-********* ocamldebug
+******** ocamldebug
 output = "host.debug.output"
-********** check-program-output
+********* check-program-output
 reference = "${test_source_directory}/host.debug.reference"
 
 *)
diff --git a/testsuite/tests/tool-debugger/find-artifacts/debuggee.ml b/testsuite/tests/tool-debugger/find-artifacts/debuggee.ml
index 7c6f00c70f..70aee3ff04 100644
--- a/testsuite/tests/tool-debugger/find-artifacts/debuggee.ml
+++ b/testsuite/tests/tool-debugger/find-artifacts/debuggee.ml
@@ -1,27 +1,25 @@
 (* TEST
 ocamldebug_script = "${test_source_directory}/input_script"
-* skip
-reason = "ocamldebug is broken (#34)"
-** debugger
-*** shared-libraries
-**** setup-ocamlc.byte-build-env
-***** script
+* debugger
+** shared-libraries
+*** setup-ocamlc.byte-build-env
+**** script
 script = "mkdir out"
-****** ocamlc.byte
+***** ocamlc.byte
 flags = "-g -c"
 all_modules = "${test_source_directory}/in/blah.ml"
 program = "out/blah.cmo"
-******* ocamlc.byte
+****** ocamlc.byte
 program = "out/foo.cmo"
 flags = "-I out -g -c"
 all_modules = "${test_source_directory}/in/foo.ml"
-******** ocamlc.byte
+******* ocamlc.byte
 all_modules = "out/blah.cmo out/foo.cmo"
 flags = " -g "
 program = "debuggee.exe"
-********* check-ocamlc.byte-output
-********** ocamldebug
-*********** check-program-output
+******** check-ocamlc.byte-output
+********* ocamldebug
+********** check-program-output
 *)
 
 (* This file only contains the specification of how to run the test *)
diff --git a/testsuite/tests/tool-debugger/module_named_main/main.ml b/testsuite/tests/tool-debugger/module_named_main/main.ml
index e31c16391e..25eebe7c02 100644
--- a/testsuite/tests/tool-debugger/module_named_main/main.ml
+++ b/testsuite/tests/tool-debugger/module_named_main/main.ml
@@ -1,15 +1,13 @@
 (* TEST
 flags += " -g "
 ocamldebug_script = "${test_source_directory}/input_script"
-* skip
-reason = "ocamldebug is broken (#34)"
-** debugger
-*** shared-libraries
-**** setup-ocamlc.byte-build-env
-***** ocamlc.byte
-****** check-ocamlc.byte-output
-******* ocamldebug
-******** check-program-output
+* debugger
+** shared-libraries
+*** setup-ocamlc.byte-build-env
+**** ocamlc.byte
+***** check-ocamlc.byte-output
+****** ocamldebug
+******* check-program-output
 *)
 
 module Submodule = struct
diff --git a/testsuite/tests/tool-debugger/no_debug_event/noev.ml b/testsuite/tests/tool-debugger/no_debug_event/noev.ml
index f06c14a117..4eb334ea84 100644
--- a/testsuite/tests/tool-debugger/no_debug_event/noev.ml
+++ b/testsuite/tests/tool-debugger/no_debug_event/noev.ml
@@ -1,30 +1,28 @@
 (* TEST
 readonly_files = "a.ml b.ml"
 ocamldebug_script = "${test_source_directory}/input_script"
-* skip
-reason = "ocamldebug is broken (#34)"
-** debugger
-*** shared-libraries
-**** setup-ocamlc.byte-build-env
-***** ocamlc.byte
+* debugger
+** shared-libraries
+*** setup-ocamlc.byte-build-env
+**** ocamlc.byte
 module = "a.ml"
 flags = "-g -for-pack foo"
-****** ocamlc.byte
+***** ocamlc.byte
 module = ""
 all_modules = "a.cmo"
 program = "foo.cmo"
 flags = "-g -pack"
-******* ocamlc.byte
+****** ocamlc.byte
 module = "b.ml"
 flags = " -g "
-******** ocamlc.byte
+******* ocamlc.byte
 module = ""
 flags = " -g "
 all_modules = "foo.cmo b.cmo"
 program = "${test_build_directory}/noev.exe"
-********* check-ocamlc.byte-output
-********** ocamldebug
-*********** check-program-output
+******** check-ocamlc.byte-output
+********* ocamldebug
+********** check-program-output
 *)
 
 (* This file only contains the specification of how to run the test *)
diff --git a/testsuite/tests/tool-debugger/printer/debuggee.ml b/testsuite/tests/tool-debugger/printer/debuggee.ml
index b2d6e6e7c5..f22a4bd50f 100644
--- a/testsuite/tests/tool-debugger/printer/debuggee.ml
+++ b/testsuite/tests/tool-debugger/printer/debuggee.ml
@@ -3,17 +3,15 @@ flags += " -g "
 ocamldebug_script = "${test_source_directory}/input_script"
 readonly_files = "printer.ml"
 include debugger
-* skip
-reason = "ocamldebug is broken (#34)"
-** debugger
-*** shared-libraries
-**** setup-ocamlc.byte-build-env
-***** ocamlc.byte
+* debugger
+** shared-libraries
+*** setup-ocamlc.byte-build-env
+**** ocamlc.byte
 module = "printer.ml"
-***** ocamlc.byte
-****** check-ocamlc.byte-output
-******* ocamldebug
-******** check-program-output
+**** ocamlc.byte
+***** check-ocamlc.byte-output
+****** ocamldebug
+******* check-program-output
 *)
 
 let f x =
diff --git a/testsuite/tests/typing-sigsubst/sigsubst.ml b/testsuite/tests/typing-sigsubst/sigsubst.ml
index c09643864e..4597265246 100644
--- a/testsuite/tests/typing-sigsubst/sigsubst.ml
+++ b/testsuite/tests/typing-sigsubst/sigsubst.ml
@@ -24,11 +24,11 @@ end
 Line 3, characters 2-36:
 3 |   include Comparable with type t = t
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-Error: Illegal shadowing of included type t/287 by t/292
+Error: Illegal shadowing of included type t/282 by t/287
        Line 2, characters 2-19:
-         Type t/287 came from this include
+         Type t/282 came from this include
        Line 3, characters 2-23:
-         The value print has no valid type if t/287 is shadowed
+         The value print has no valid type if t/282 is shadowed
 |}]
 
 module type Sunderscore = sig
diff --git a/testsuite/tests/unwind/unwind_test.reference b/testsuite/tests/unwind/unwind_test.reference
index b3804d00e5..827cc4affc 100644
--- a/testsuite/tests/unwind/unwind_test.reference
+++ b/testsuite/tests/unwind/unwind_test.reference
@@ -1,5 +1,4 @@
 ml_perform_stack_walk
-caml_c_call
 Mylib.baz
 Driver.entry
 caml_program
diff --git a/testsuite/tests/weak-ephe-final/ephetest_par.ml b/testsuite/tests/weak-ephe-final/ephetest_par.ml
index 744c4e844d..621d7292ff 100644
--- a/testsuite/tests/weak-ephe-final/ephetest_par.ml
+++ b/testsuite/tests/weak-ephe-final/ephetest_par.ml
@@ -1,4 +1,7 @@
-(* TEST *)
+(* TEST
+   * skip
+   reason = "OCaml 5 only"
+ *)
 
 (* Due to GCs running at non-deterministic places, the output from these tests
  * are unreliable except the bad value checks and as a check for catastrophic
diff --git a/testsuite/tests/weak-ephe-final/finaliser2.ml b/testsuite/tests/weak-ephe-final/finaliser2.ml
index e8ab88e807..5cf871e7ac 100644
--- a/testsuite/tests/weak-ephe-final/finaliser2.ml
+++ b/testsuite/tests/weak-ephe-final/finaliser2.ml
@@ -1,4 +1,7 @@
-(* TEST *)
+(* TEST
+   * skip
+   reason = "OCaml 5 only"
+*)
 
 let[@inline never][@local never] test1 () =
   let r' = ref 0 in
diff --git a/testsuite/tests/weak-ephe-final/finaliser_handover.ml b/testsuite/tests/weak-ephe-final/finaliser_handover.ml
index fa2d2efc43..752a7eeabf 100644
--- a/testsuite/tests/weak-ephe-final/finaliser_handover.ml
+++ b/testsuite/tests/weak-ephe-final/finaliser_handover.ml
@@ -1,4 +1,7 @@
-(* TEST *)
+(* TEST
+   * skip
+   reason = "OCaml 5 only"
+*)
 
 (* ocaml-multicore issues 528 and 468 *)
 
diff --git a/testsuite/tests/weak-ephe-final/weaklifetime_par.ml b/testsuite/tests/weak-ephe-final/weaklifetime_par.ml
index 7f80b8ab26..0791f4e53f 100644
--- a/testsuite/tests/weak-ephe-final/weaklifetime_par.ml
+++ b/testsuite/tests/weak-ephe-final/weaklifetime_par.ml
@@ -1,4 +1,6 @@
 (* TEST
+   * skip
+   reason = "OCaml 5 only"
 *)
 
 let size = 1000;;
