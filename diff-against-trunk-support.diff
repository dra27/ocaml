diff --git a/.github/workflows/build.yml b/.github/workflows/build.yml
index a42b0dab97..ed1137f668 100644
--- a/.github/workflows/build.yml
+++ b/.github/workflows/build.yml
@@ -42,7 +42,7 @@ jobs:
          '${{ github.event.repository.full_name }}'
       - name: Configure tree
         run: |
-          MAKE_ARG=-j XARCH=x64 CONFIG_ARG='--enable-flambda --enable-cmm-invariants --enable-dependency-generation --enable-native-toplevel' OCAMLRUNPARAM=b,v=0 bash -xe tools/ci/actions/runner.sh configure
+          MAKE_ARG=-j CONFIG_ARG='--enable-flambda --enable-cmm-invariants --enable-dependency-generation --enable-native-toplevel' OCAMLRUNPARAM=b,v=0 bash -xe tools/ci/actions/runner.sh configure
       - name: Build
         run: |
           MAKE_ARG=-j bash -xe tools/ci/actions/runner.sh build
@@ -110,7 +110,7 @@ jobs:
         run: brew install parallel
       - name: configure tree
         run: |
-          CONFIG_ARG=${{ matrix.config_arg }} MAKE_ARG=-j XARCH=x64 bash -xe tools/ci/actions/runner.sh configure
+          CONFIG_ARG=${{ matrix.config_arg }} MAKE_ARG=-j bash -xe tools/ci/actions/runner.sh configure
       - name: Build
         run: |
           MAKE_ARG=-j bash -xe tools/ci/actions/runner.sh build
@@ -131,7 +131,7 @@ jobs:
   i386:
     runs-on: ubuntu-latest
     container:
-      image: i386/ubuntu:18.04
+      image: debian:10
       options: --platform linux/i386 --user root
     steps:
       - name: OS Dependencies
@@ -143,7 +143,7 @@ jobs:
         uses: actions/checkout@v1
       - name: configure tree
         run: |
-          MAKE_ARG=-j XARCH=i386 bash -xe tools/ci/actions/runner.sh configure
+          MAKE_ARG=-j bash -xe tools/ci/actions/runner.sh configure
       - name: Build
         run: |
           MAKE_ARG=-j bash -xe tools/ci/actions/runner.sh build
diff --git a/appveyor.yml b/appveyor.yml
index 333bcad1af..94ee1cfe3d 100644
--- a/appveyor.yml
+++ b/appveyor.yml
@@ -31,9 +31,10 @@ environment:
     FORCE_CYGWIN_UPGRADE: 0
     BUILD_MODE: world.opt
   matrix:
+    - PORT: mingw32
+      BOOTSTRAP_FLEXDLL: true
     - PORT: mingw64
       BOOTSTRAP_FLEXDLL: true
-# OCaml 5.0 does not yet support MSVC
 #    - PORT: msvc64
 #      BOOTSTRAP_FLEXDLL: false
 #      BUILD_MODE: steps
@@ -43,8 +44,8 @@ environment:
 #      SDK: |-
 #        "C:\Program Files\Microsoft SDKs\Windows\v7.1\Bin\SetEnv.cmd" /x86
 
-matrix:
-  fast_finish: true
+#matrix:
+#  fast_finish: true
 
 cache:
   - C:\cygwin64\var\cache\setup
diff --git a/ocamltest/builtin_actions.ml b/ocamltest/builtin_actions.ml
index c4c11c1905..17eb07492b 100644
--- a/ocamltest/builtin_actions.ml
+++ b/ocamltest/builtin_actions.ml
@@ -181,6 +181,12 @@ let function_sections = make
      "Target supports function sections"
      "Target does not support function sections")
 
+let naked_pointers = make
+  "naked_pointers"
+  (Actions_helpers.pass_or_skip (Ocamltest_config.naked_pointers)
+     "Runtime system supports naked pointers"
+     "Runtime system does not support naked pointers")
+
 let frame_pointers = make
   "frame_pointers"
   (Actions_helpers.pass_or_skip (Ocamltest_config.frame_pointers)
@@ -308,6 +314,7 @@ let _ =
     arch_i386;
     arch_power;
     function_sections;
+    naked_pointers;
     frame_pointers;
     file_exists;
     copy;
diff --git a/ocamltest/ocamltest_config.ml.in b/ocamltest/ocamltest_config.ml.in
index 282090b4c3..dfda7b1f87 100644
--- a/ocamltest/ocamltest_config.ml.in
+++ b/ocamltest/ocamltest_config.ml.in
@@ -90,4 +90,6 @@ let function_sections = @function_sections@
 
 let instrumented_runtime = @instrumented_runtime@
 
+let naked_pointers = @naked_pointers@
+
 let frame_pointers = @frame_pointers@
diff --git a/ocamltest/ocamltest_config.mli b/ocamltest/ocamltest_config.mli
index 4c8cb07d2e..e0185f5d1e 100644
--- a/ocamltest/ocamltest_config.mli
+++ b/ocamltest/ocamltest_config.mli
@@ -125,5 +125,8 @@ val function_sections : bool
 val instrumented_runtime : bool
 (** Whether the instrumented runtime is available *)
 
+val naked_pointers : bool
+(** Whether the runtime system supports naked pointers outside the heap *)
+
 val frame_pointers : bool
 (** Whether frame-pointers have been enabled at configure time *)
diff --git a/ocamltest/run_unix.c b/ocamltest/run_unix.c
index 80eac2d727..f8f264f471 100644
--- a/ocamltest/run_unix.c
+++ b/ocamltest/run_unix.c
@@ -349,7 +349,9 @@ int run_command(const command_settings *settings)
       myperror("fork");
       return -1;
     case 0: /* child process */
+#if 0
       caml_atfork_hook();
+#endif
       exit( run_command_child(settings) );
     default:
       return run_command_parent(settings, child_pid);
diff --git a/testsuite/tests/asmcomp/is_in_static_data.c b/testsuite/tests/asmcomp/is_in_static_data.c
new file mode 100644
index 0000000000..ccf0582c0a
--- /dev/null
+++ b/testsuite/tests/asmcomp/is_in_static_data.c
@@ -0,0 +1,5 @@
+#include "caml/address_class.h"
+
+value caml_is_in_static_data(value v) {
+  return(Val_bool(Is_in_static_data(v)));
+}
diff --git a/testsuite/tests/asmcomp/is_static.ml b/testsuite/tests/asmcomp/is_static.ml
new file mode 100644
index 0000000000..b8a3bef006
--- /dev/null
+++ b/testsuite/tests/asmcomp/is_static.ml
@@ -0,0 +1,40 @@
+(* TEST
+   modules = "is_in_static_data.c"
+   * naked_pointers
+   ** native
+*)
+
+(* Data that should be statically allocated by the compiler (all versions) *)
+
+external is_in_static_data : 'a -> bool = "caml_is_in_static_data"
+
+(* Basic constant blocks should be static *)
+let block1 = (1,2)
+let () = assert(is_in_static_data block1)
+
+(* as pattern shouldn't prevent it *)
+let (a, b) as block2 = (1,2)
+let () = assert(is_in_static_data block2)
+
+(* Also in functions *)
+let f () =
+  let block = (1,2) in
+  assert(is_in_static_data block)
+
+let () = (f [@inlined never]) ()
+
+(* Closed functions should be static *)
+let closed_function x = x + 1 (* + is a primitive, it cannot be in the closure*)
+let () = assert(is_in_static_data closed_function)
+
+(* And functions using closed functions *)
+let almost_closed_function x =
+  (closed_function [@inlined never]) x
+let () = assert(is_in_static_data almost_closed_function)
+
+(* Recursive constant functions should be static *)
+let rec f1 a = g1 a
+and g1 a = f1 a
+let () =
+  assert(is_in_static_data f1);
+  assert(is_in_static_data g1)
diff --git a/testsuite/tests/asmcomp/is_static_flambda.ml b/testsuite/tests/asmcomp/is_static_flambda.ml
new file mode 100644
index 0000000000..63e53cfc42
--- /dev/null
+++ b/testsuite/tests/asmcomp/is_static_flambda.ml
@@ -0,0 +1,207 @@
+(* TEST
+   modules = "is_in_static_data.c is_static_flambda_dep.ml"
+   * flambda
+   ** naked_pointers
+   *** native
+*)
+
+(* Data that should be statically allocated by the compiler (flambda only) *)
+
+external is_in_static_data : 'a -> bool = "caml_is_in_static_data"
+
+(* Also after inlining *)
+let g x =
+  let block = (1,x) in
+  assert(is_in_static_data block)
+
+let () = (g [@inlined always]) 2
+
+(* Toplevel immutable blocks should be static *)
+let block3 = (Sys.opaque_identity 1, Sys.opaque_identity 2)
+let () = assert(is_in_static_data block3)
+
+(* Not being bound shouldn't prevent it *)
+let () =
+  assert(is_in_static_data (Sys.opaque_identity 1, Sys.opaque_identity 2))
+
+(* Only with rounds >= 2 currently !
+(* Also after inlining *)
+let h x =
+  let block = (Sys.opaque_identity 1,x) in
+  assert(is_in_static_data block)
+
+let () = (h [@inlined always]) (Sys.opaque_identity 2)
+*)
+
+(* Recursive constant values should be static *)
+let rec a = 1 :: b
+and b = 2 :: a
+let () =
+  assert(is_in_static_data a);
+  assert(is_in_static_data b)
+
+(* And a mix *)
+type e = E : 'a -> e
+
+let rec f1 a = E (g1 a, l1)
+and g1 a = E (f1 a, l2)
+and l1 = E (f1, l2)
+and l2 = E (g1, l1)
+
+let () =
+  assert(is_in_static_data f1);
+  assert(is_in_static_data g1);
+  assert(is_in_static_data l1);
+  assert(is_in_static_data l2)
+
+(* Also in functions *)
+let i () =
+  let rec f1 a = E (g1 a, l1)
+  and g1 a = E (f1 a, l2)
+  and l1 = E (f1, l2)
+  and l2 = E (g1, l1) in
+
+  assert(is_in_static_data f1);
+  assert(is_in_static_data g1);
+  assert(is_in_static_data l1);
+  assert(is_in_static_data l2)
+
+let () = (i [@inlined never]) ()
+
+module type P = module type of Stdlib
+(* Top-level modules should be static *)
+let () = assert(is_in_static_data (module Stdlib:P))
+
+(* Not constant let rec to test extraction to initialize_symbol *)
+let r = ref 0
+let rec a = (incr r; !r) :: b
+and b = (incr r; !r) :: a
+
+let next =
+  let r = ref 0 in
+  fun () -> incr r; !r
+
+let () =
+  assert(is_in_static_data next)
+
+(* Exceptions without arguments should be static *)
+exception No_argument
+let () = assert(is_in_static_data No_argument)
+
+(* And also with constant arguments *)
+exception Some_argument of string
+let () = assert(is_in_static_data (Some_argument "some string"))
+
+(* Even when exposed by inlining *)
+let () =
+  let exn =
+    try (failwith [@inlined always]) "some other string" with exn -> exn
+  in
+  assert(is_in_static_data exn)
+
+(* Verify that approximation intersection correctly loads exported
+   approximations.
+
+   Is_static_flambda_dep.pair is a pair with 1 as first element. The
+   intersection of approximations should return a block with
+   approximation: [tag 0: [tag 0: Int 1, Unknown], Unknown] *)
+let f x =
+  let pair =
+    if Sys.opaque_identity x then
+      (1, 2), 3
+    else
+      Is_static_flambda_dep.pair, 4
+  in
+  let n = fst (fst pair) in
+  let res = n, n in
+  assert(is_in_static_data res)
+  [@@inline never]
+
+let () =
+  f true;
+  f false
+
+(* Verify that physical equality/inequality is correctly propagated *)
+
+(* In these tests, tuple can be statically allocated only if it is a
+   known constant since the function is never inlined (hence this
+   code is never at toplevel) *)
+
+let () =
+  let f () =
+    let v = (1, 2) in
+    (* eq is supposed to be considered always true since v is a
+       constant, hence aliased to a symbol.
+       It is not yet optimized away if it is not constant *)
+    let eq = v == v in
+    let n = if eq then 1 else 2 in
+    let tuple = (n,n) in
+    assert(is_in_static_data tuple)
+  in
+  (f [@inlined never]) ()
+
+let () =
+  let f () =
+    let v = (1, 2) in
+    (* same with inequality *)
+    let eq = v != v in
+    let n = if eq then 1 else 2 in
+    let tuple = (n,n) in
+    assert(is_in_static_data tuple)
+  in
+  (f [@inlined never]) ()
+
+let () =
+  let f x =
+    let v1 = Some x in
+    let v2 = None in
+    let eq = v1 == v2 in
+    (* The values are structurally different, so must be physically
+       different *)
+    let n = if eq then 1 else 2 in
+    let tuple = (n,n) in
+    assert(is_in_static_data tuple)
+  in
+  (f [@inlined never]) ()
+
+let () =
+  let f x =
+    let v1 = Some x in
+    let v2 = None in
+    let eq = v1 != v2 in
+    (* same with inequality *)
+    let n = if eq then 1 else 2 in
+    let tuple = (n,n) in
+    assert(is_in_static_data tuple)
+  in
+  (f [@inlined never]) ()
+
+let () =
+  let f x =
+    let v1 = (1, 2) in
+    let v2 = (3, 2) in
+    let eq = v1 == v2 in
+    (* difference is deeper *)
+    let n = if eq then 1 else 2 in
+    let tuple = (n,n) in
+    assert(is_in_static_data tuple)
+  in
+  (f [@inlined never]) ()
+
+module Int = struct
+  type t = int
+  let compare (a:int) b = compare a b
+end
+module IntMap = Map.Make (Int)
+
+let () =
+  let f () =
+    let a = IntMap.empty in
+    let b = (IntMap.add [@inlined]) 1 (Some 1) a in
+    assert(is_in_static_data b);
+    let c = (IntMap.add [@inlined]) 1 (Some 2) b in
+    assert(is_in_static_data c);
+    let d = (IntMap.add [@inlined]) 1 (Some 2) c in
+    assert(is_in_static_data d);
+  in
+  (f [@inlined never]) ()
diff --git a/testsuite/tests/asmcomp/is_static_flambda_dep.ml b/testsuite/tests/asmcomp/is_static_flambda_dep.ml
new file mode 100644
index 0000000000..3a50f7cad4
--- /dev/null
+++ b/testsuite/tests/asmcomp/is_static_flambda_dep.ml
@@ -0,0 +1 @@
+let pair = 1, 12
diff --git a/testsuite/tests/asmcomp/polling.c b/testsuite/tests/asmcomp/polling.c
index 93620c9bcc..4f6bf1dcab 100644
--- a/testsuite/tests/asmcomp/polling.c
+++ b/testsuite/tests/asmcomp/polling.c
@@ -12,7 +12,11 @@ CAMLprim value request_minor_gc(value v) {
     tests are only run in a single domain, so we're probably
     good.
   */
+#if 0
   Caml_state->young_limit = (uintnat)Caml_state->young_end;
+#endif
+  caml_something_to_do = 1;
+  Caml_state->young_limit = Caml_state->young_alloc_end;
 
   return Val_unit;
 }
diff --git a/testsuite/tests/asmcomp/simple_float_const.ml b/testsuite/tests/asmcomp/simple_float_const.ml
new file mode 100644
index 0000000000..1aca414f7e
--- /dev/null
+++ b/testsuite/tests/asmcomp/simple_float_const.ml
@@ -0,0 +1 @@
+let f = 3.14
diff --git a/testsuite/tests/asmcomp/simple_float_const_opaque.ml b/testsuite/tests/asmcomp/simple_float_const_opaque.ml
new file mode 100644
index 0000000000..1aca414f7e
--- /dev/null
+++ b/testsuite/tests/asmcomp/simple_float_const_opaque.ml
@@ -0,0 +1 @@
+let f = 3.14
diff --git a/testsuite/tests/asmcomp/static_float_array_flambda.ml b/testsuite/tests/asmcomp/static_float_array_flambda.ml
new file mode 100644
index 0000000000..824a12ca89
--- /dev/null
+++ b/testsuite/tests/asmcomp/static_float_array_flambda.ml
@@ -0,0 +1,26 @@
+(* TEST
+   modules = "is_in_static_data.c simple_float_const.ml"
+   * flambda
+   ** flat-float-array
+   *** naked_pointers
+   **** native
+*)
+
+external is_in_static_data : 'a -> bool = "caml_is_in_static_data"
+
+let a = [|0.; 1.|]
+let f = 1.23
+let b = [|0.; f; f|]
+let g = Sys.opaque_identity 1.23
+let c = [|0.; g|]
+let d = [|0.; Simple_float_const.f|]
+
+let () = assert(is_in_static_data a)
+let () = assert(is_in_static_data f)
+let () = assert(is_in_static_data b)
+
+let () = assert(not (is_in_static_data c))
+(* In fact this one could be static by preallocating the array then
+   patching it when g is available *)
+
+let () = assert(is_in_static_data d)
diff --git a/testsuite/tests/asmcomp/static_float_array_flambda_opaque.ml b/testsuite/tests/asmcomp/static_float_array_flambda_opaque.ml
new file mode 100644
index 0000000000..56ea9e1793
--- /dev/null
+++ b/testsuite/tests/asmcomp/static_float_array_flambda_opaque.ml
@@ -0,0 +1,30 @@
+(* TEST
+   modules = "is_in_static_data.c simple_float_const_opaque.ml"
+   flags = "-opaque"
+   * flambda
+   ** flat-float-array
+   *** naked_pointers
+   **** native
+*)
+
+external is_in_static_data : 'a -> bool = "caml_is_in_static_data"
+
+let a = [|0.; 1.|]
+let f = 1.23
+let b = [|0.; f; f|]
+let g = Sys.opaque_identity 1.23
+let c = [|0.; g|]
+let d = [|0.; Simple_float_const_opaque.f|]
+
+let () = assert(is_in_static_data a)
+let () = assert(is_in_static_data f)
+let () = assert(is_in_static_data b)
+
+let () = assert(not (is_in_static_data c))
+(* In fact this one could be static by preallocating the array then
+   patching it when g is available *)
+
+let () = assert(not (is_in_static_data d))
+(* The dependency Simple_float_const_opaque is built with opaque,
+   hence the value of Simple_float_const_opaque.f cannot be known
+   preventing the static allocation of d *)
diff --git a/testsuite/tests/backtrace/backtrace2.reference b/testsuite/tests/backtrace/backtrace2.reference
index 62ae0cb77b..816405ff78 100644
--- a/testsuite/tests/backtrace/backtrace2.reference
+++ b/testsuite/tests/backtrace/backtrace2.reference
@@ -35,7 +35,7 @@ Uncaught exception Invalid_argument("index out of bounds")
 Raised by primitive operation at Backtrace2.run in file "backtrace2.ml", line 62, characters 14-22
 test_Not_found
 Uncaught exception Not_found
-Raised at Stdlib__Hashtbl.find in file "hashtbl.ml", line 542, characters 13-28
+Raised at Stdlib__Hashtbl.find in file "hashtbl.ml", line 550, characters 13-28
 Called from Backtrace2.test_Not_found in file "backtrace2.ml", line 43, characters 9-42
 Re-raised at Backtrace2.test_Not_found in file "backtrace2.ml", line 43, characters 61-70
 Called from Backtrace2.run in file "backtrace2.ml", line 62, characters 11-23
@@ -46,13 +46,13 @@ Called from Backtrace2.test_lazy.aux in file "backtrace2.ml", line 47, character
 Called from Backtrace2.test_lazy.aux in file "backtrace2.ml", line 47, characters 43-52
 Called from Backtrace2.test_lazy.aux in file "backtrace2.ml", line 47, characters 43-52
 Called from Backtrace2.test_lazy.aux in file "backtrace2.ml", line 47, characters 43-52
-Called from CamlinternalLazy.do_force_block in file "camlinternalLazy.ml", line 49, characters 17-27
-Re-raised at CamlinternalLazy.do_force_block in file "camlinternalLazy.ml", line 56, characters 4-11
+Called from CamlinternalLazy.force_lazy_block in file "camlinternalLazy.ml", line 119, characters 17-27
+Re-raised at CamlinternalLazy.force_lazy_block in file "camlinternalLazy.ml", line 124, characters 4-11
 Called from Backtrace2.run in file "backtrace2.ml", line 62, characters 11-23
 Uncaught exception Not_found
-Raised at Stdlib__Hashtbl.find in file "hashtbl.ml", line 542, characters 13-28
+Raised at Stdlib__Hashtbl.find in file "hashtbl.ml", line 550, characters 13-28
 Called from Backtrace2.test_lazy.exception_raised_internally in file "backtrace2.ml", line 50, characters 8-41
-Re-raised at CamlinternalLazy.do_force_block.(fun) in file "camlinternalLazy.ml", line 54, characters 43-50
-Called from CamlinternalLazy.do_force_block in file "camlinternalLazy.ml", line 49, characters 17-27
-Re-raised at CamlinternalLazy.do_force_block in file "camlinternalLazy.ml", line 56, characters 4-11
+Re-raised at CamlinternalLazy.force_lazy_block.(fun) in file "camlinternalLazy.ml", line 123, characters 56-63
+Called from CamlinternalLazy.force_lazy_block in file "camlinternalLazy.ml", line 119, characters 17-27
+Re-raised at CamlinternalLazy.force_lazy_block in file "camlinternalLazy.ml", line 124, characters 4-11
 Called from Backtrace2.run in file "backtrace2.ml", line 62, characters 11-23
diff --git a/testsuite/tests/backtrace/backtrace_c_exn.ml b/testsuite/tests/backtrace/backtrace_c_exn.ml
index 9b0077d509..1680c23f7b 100644
--- a/testsuite/tests/backtrace/backtrace_c_exn.ml
+++ b/testsuite/tests/backtrace/backtrace_c_exn.ml
@@ -2,6 +2,8 @@
    modules = "backtrace_c_exn_.c"
    flags = "-g"
    ocamlrunparam += ",b=1"
+   * skip
+   reason = "OCaml 5 only"
 *)
 
 (* https://github.com/ocaml-multicore/ocaml-multicore/issues/498 *)
diff --git a/testsuite/tests/backtrace/backtrace_dynlink.flambda.reference b/testsuite/tests/backtrace/backtrace_dynlink.flambda.reference
index bd96e81b23..5df45f8e80 100644
--- a/testsuite/tests/backtrace/backtrace_dynlink.flambda.reference
+++ b/testsuite/tests/backtrace/backtrace_dynlink.flambda.reference
@@ -2,19 +2,23 @@ Raised by primitive operation at Backtrace_dynlink_plugin in file "backtrace_dyn
 Called from Dynlink.Native.run.(fun) in file "otherlibs/dynlink/native/dynlink.ml", line 85, characters 12-29
 Called from Stdlib__List.iter in file "list.ml" (inlined), line 112, characters 12-15
 Called from Dynlink.Native.run in file "otherlibs/dynlink/native/dynlink.ml", line 84, characters 4-273
-Called from Dynlink_common.Make.load.(fun) in file "otherlibs/dynlink/dynlink_common.ml" (inlined), line 363, characters 13-56
+Called from Dynlink_common.Make.load.(fun) in file "otherlibs/dynlink/dynlink_common.ml", line 372, characters 13-56
 Called from Stdlib__List.iter in file "list.ml" (inlined), line 112, characters 12-15
-Called from Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 359, characters 8-392
-Called from Dynlink_common.Make.loadfile in file "otherlibs/dynlink/dynlink_common.ml" (inlined), line 374, characters 26-45
+Called from Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 368, characters 8-392
+Called from Dynlink_common.Make.loadfile in file "otherlibs/dynlink/dynlink_common.ml" (inlined), line 383, characters 26-45
 Called from Backtrace_dynlink in file "backtrace_dynlink.ml", line 39, characters 4-52
 execution of module initializers in the shared library failed: Failure("SUCCESS")
-Raised by primitive operation at Dynlink.Native.run.(fun) in file "otherlibs/dynlink/native/dynlink.ml", line 85, characters 12-29
+Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
+Called from Backtrace_dynlink_plugin in file "backtrace_dynlink_plugin.ml", line 3, characters 4-22
+Re-raised at Backtrace_dynlink_plugin in file "backtrace_dynlink_plugin.ml", line 8, characters 5-12
+Called from Dynlink.Native.run.(fun) in file "otherlibs/dynlink/native/dynlink.ml", line 85, characters 12-29
+Called from Dynlink.Native.run.(fun) in file "otherlibs/dynlink/native/dynlink.ml", line 85, characters 12-29
 Re-raised at Dynlink.Native.run.(fun) in file "otherlibs/dynlink/native/dynlink.ml", line 87, characters 10-149
 Called from Stdlib__List.iter in file "list.ml" (inlined), line 112, characters 12-15
 Called from Dynlink.Native.run in file "otherlibs/dynlink/native/dynlink.ml", line 84, characters 4-273
-Called from Dynlink_common.Make.load.(fun) in file "otherlibs/dynlink/dynlink_common.ml" (inlined), line 363, characters 13-56
+Called from Dynlink_common.Make.load.(fun) in file "otherlibs/dynlink/dynlink_common.ml", line 372, characters 13-56
 Called from Stdlib__List.iter in file "list.ml" (inlined), line 112, characters 12-15
-Called from Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 359, characters 8-392
-Re-raised at Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 372, characters 8-17
-Called from Dynlink_common.Make.loadfile in file "otherlibs/dynlink/dynlink_common.ml" (inlined), line 374, characters 26-45
+Called from Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 368, characters 8-392
+Re-raised at Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 381, characters 8-17
+Called from Dynlink_common.Make.loadfile in file "otherlibs/dynlink/dynlink_common.ml" (inlined), line 383, characters 26-45
 Called from Backtrace_dynlink in file "backtrace_dynlink.ml", line 39, characters 4-52
diff --git a/testsuite/tests/backtrace/backtrace_dynlink.reference b/testsuite/tests/backtrace/backtrace_dynlink.reference
index 6883a5c131..1e44ad4fc6 100644
--- a/testsuite/tests/backtrace/backtrace_dynlink.reference
+++ b/testsuite/tests/backtrace/backtrace_dynlink.reference
@@ -1,18 +1,22 @@
 Raised by primitive operation at Backtrace_dynlink_plugin in file "backtrace_dynlink_plugin.ml", line 6, characters 13-38
 Called from Dynlink.Native.run.(fun) in file "otherlibs/dynlink/native/dynlink.ml", line 85, characters 12-29
 Called from Stdlib__List.iter in file "list.ml", line 112, characters 12-15
-Called from Dynlink_common.Make.load.(fun) in file "otherlibs/dynlink/dynlink_common.ml", line 363, characters 13-56
+Called from Dynlink_common.Make.load.(fun) in file "otherlibs/dynlink/dynlink_common.ml", line 372, characters 13-56
 Called from Stdlib__List.iter in file "list.ml", line 112, characters 12-15
-Called from Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 359, characters 8-392
-Called from Dynlink_common.Make.loadfile in file "otherlibs/dynlink/dynlink_common.ml" (inlined), line 374, characters 26-45
+Called from Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 368, characters 8-392
+Called from Dynlink_common.Make.loadfile in file "otherlibs/dynlink/dynlink_common.ml" (inlined), line 383, characters 26-45
 Called from Backtrace_dynlink in file "backtrace_dynlink.ml", line 39, characters 4-52
 execution of module initializers in the shared library failed: Failure("SUCCESS")
-Raised by primitive operation at Dynlink.Native.run.(fun) in file "otherlibs/dynlink/native/dynlink.ml", line 85, characters 12-29
+Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
+Called from Backtrace_dynlink_plugin in file "backtrace_dynlink_plugin.ml", line 3, characters 4-22
+Re-raised at Backtrace_dynlink_plugin in file "backtrace_dynlink_plugin.ml", line 8, characters 5-12
+Called from Dynlink.Native.run.(fun) in file "otherlibs/dynlink/native/dynlink.ml", line 85, characters 12-29
+Called from Dynlink.Native.run.(fun) in file "otherlibs/dynlink/native/dynlink.ml", line 85, characters 12-29
 Re-raised at Dynlink.Native.run.(fun) in file "otherlibs/dynlink/native/dynlink.ml", line 87, characters 10-149
 Called from Stdlib__List.iter in file "list.ml", line 112, characters 12-15
-Called from Dynlink_common.Make.load.(fun) in file "otherlibs/dynlink/dynlink_common.ml", line 363, characters 13-56
+Called from Dynlink_common.Make.load.(fun) in file "otherlibs/dynlink/dynlink_common.ml", line 372, characters 13-56
 Called from Stdlib__List.iter in file "list.ml", line 112, characters 12-15
-Called from Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 359, characters 8-392
-Re-raised at Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 372, characters 8-17
-Called from Dynlink_common.Make.loadfile in file "otherlibs/dynlink/dynlink_common.ml" (inlined), line 374, characters 26-45
+Called from Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 368, characters 8-392
+Re-raised at Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 381, characters 8-17
+Called from Dynlink_common.Make.loadfile in file "otherlibs/dynlink/dynlink_common.ml" (inlined), line 383, characters 26-45
 Called from Backtrace_dynlink in file "backtrace_dynlink.ml", line 39, characters 4-52
diff --git a/testsuite/tests/backtrace/backtrace_effects.ml b/testsuite/tests/backtrace/backtrace_effects.ml
index 352b32cbd7..bafd2259e8 100644
--- a/testsuite/tests/backtrace/backtrace_effects.ml
+++ b/testsuite/tests/backtrace/backtrace_effects.ml
@@ -2,6 +2,8 @@
    flags = "-g"
    ocamlrunparam += ",b=1"
    exit_status = "2"
+   * skip
+   reason = "OCaml 5 only"
 *)
 
 open Effect
diff --git a/testsuite/tests/backtrace/backtrace_effects_nested.ml b/testsuite/tests/backtrace/backtrace_effects_nested.ml
index 37638a200a..2a2a630160 100644
--- a/testsuite/tests/backtrace/backtrace_effects_nested.ml
+++ b/testsuite/tests/backtrace/backtrace_effects_nested.ml
@@ -1,12 +1,14 @@
 (* TEST
 
 flags = "-g"
-* bytecode
-* no-flambda
-** native
-* flambda
+* skip
+reason = "OCaml 5 only"
+** bytecode
+** no-flambda
+*** native
+** flambda
 reference = "${test_source_directory}/backtrace_effects_nested.flambda.reference"
-** native
+*** native
 
 *)
 
diff --git a/testsuite/tests/backtrace/backtrace_systhreads.reference b/testsuite/tests/backtrace/backtrace_systhreads.reference
index a7feaa8690..815506e7ea 100644
--- a/testsuite/tests/backtrace/backtrace_systhreads.reference
+++ b/testsuite/tests/backtrace/backtrace_systhreads.reference
@@ -2,24 +2,24 @@ Thread 2 killed on uncaught exception Failure("0")
 Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
 Called from Backtrace_systhreads.thread_func in file "backtrace_systhreads.ml", line 14, characters 6-37
 Re-raised at Backtrace_systhreads.thread_func in file "backtrace_systhreads.ml", line 18, characters 5-14
-Called from Thread.create.(fun) in file "thread.ml", line 48, characters 8-14
+Called from Thread.create.(fun) in file "thread.ml", line 55, characters 8-14
 Thread 3 killed on uncaught exception Failure("1")
 Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
 Called from Backtrace_systhreads.thread_func in file "backtrace_systhreads.ml", line 14, characters 6-37
 Re-raised at Backtrace_systhreads.thread_func in file "backtrace_systhreads.ml", line 18, characters 5-14
-Called from Thread.create.(fun) in file "thread.ml", line 48, characters 8-14
+Called from Thread.create.(fun) in file "thread.ml", line 55, characters 8-14
 Thread 4 killed on uncaught exception Failure("2")
 Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
 Called from Backtrace_systhreads.thread_func in file "backtrace_systhreads.ml", line 14, characters 6-37
 Re-raised at Backtrace_systhreads.thread_func in file "backtrace_systhreads.ml", line 18, characters 5-14
-Called from Thread.create.(fun) in file "thread.ml", line 48, characters 8-14
+Called from Thread.create.(fun) in file "thread.ml", line 55, characters 8-14
 Thread 5 killed on uncaught exception Failure("3")
 Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
 Called from Backtrace_systhreads.thread_func in file "backtrace_systhreads.ml", line 14, characters 6-37
 Re-raised at Backtrace_systhreads.thread_func in file "backtrace_systhreads.ml", line 18, characters 5-14
-Called from Thread.create.(fun) in file "thread.ml", line 48, characters 8-14
+Called from Thread.create.(fun) in file "thread.ml", line 55, characters 8-14
 Thread 1 killed on uncaught exception Failure("backtrace")
 Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
 Called from Backtrace_systhreads.thread_backtrace in file "backtrace_systhreads.ml", line 22, characters 6-27
 Re-raised at Backtrace_systhreads.thread_backtrace in file "backtrace_systhreads.ml", line 26, characters 5-14
-Called from Thread.create.(fun) in file "thread.ml", line 48, characters 8-14
+Called from Thread.create.(fun) in file "thread.ml", line 55, characters 8-14
diff --git a/testsuite/tests/backtrace/callstack.reference b/testsuite/tests/backtrace/callstack.reference
index c762728d14..8287432b20 100644
--- a/testsuite/tests/backtrace/callstack.reference
+++ b/testsuite/tests/backtrace/callstack.reference
@@ -12,4 +12,4 @@ Raised by primitive operation at Callstack.f0 in file "callstack.ml", line 11, c
 Called from Callstack.f1 in file "callstack.ml", line 12, characters 27-32
 Called from Callstack.f2 in file "callstack.ml", line 13, characters 27-32
 Called from Callstack.f3 in file "callstack.ml", line 14, characters 27-32
-Called from Thread.create.(fun) in file "thread.ml", line 48, characters 8-14
+Called from Thread.create.(fun) in file "thread.ml", line 55, characters 8-14
diff --git a/testsuite/tests/backtrace/lazy.reference b/testsuite/tests/backtrace/lazy.reference
index 5e8f53482f..af15509686 100644
--- a/testsuite/tests/backtrace/lazy.reference
+++ b/testsuite/tests/backtrace/lazy.reference
@@ -1,14 +1,12 @@
 Uncaught exception Not_found
 Raised at Lazy.l1 in file "lazy.ml", line 7, characters 28-45
-Called from CamlinternalLazy.do_force_block in file "camlinternalLazy.ml", line 49, characters 17-27
-Re-raised at CamlinternalLazy.do_force_block in file "camlinternalLazy.ml", line 56, characters 4-11
-Called from CamlinternalLazy.force_lazy_block in file "camlinternalLazy.ml" (inlined), line 78, characters 27-67
+Called from CamlinternalLazy.force_lazy_block in file "camlinternalLazy.ml", line 119, characters 17-27
+Re-raised at CamlinternalLazy.force_lazy_block in file "camlinternalLazy.ml", line 124, characters 4-11
 Called from Lazy.test1 in file "lazy.ml", line 10, characters 11-24
 Called from Lazy.run in file "lazy.ml", line 19, characters 4-11
 Uncaught exception Not_found
 Raised at Lazy.l2 in file "lazy.ml", line 12, characters 28-45
-Called from CamlinternalLazy.do_force_block in file "camlinternalLazy.ml", line 49, characters 17-27
-Re-raised at CamlinternalLazy.do_force_block in file "camlinternalLazy.ml", line 56, characters 4-11
-Called from CamlinternalLazy.force_lazy_block in file "camlinternalLazy.ml" (inlined), line 78, characters 27-67
+Called from CamlinternalLazy.force_lazy_block in file "camlinternalLazy.ml", line 119, characters 17-27
+Re-raised at CamlinternalLazy.force_lazy_block in file "camlinternalLazy.ml", line 124, characters 4-11
 Called from Lazy.test2 in file "lazy.ml", line 15, characters 6-15
 Called from Lazy.run in file "lazy.ml", line 19, characters 4-11
diff --git a/testsuite/tests/basic/patmatch_for_multiple.ml b/testsuite/tests/basic/patmatch_for_multiple.ml
index 22c967370f..f2201b62d5 100644
--- a/testsuite/tests/basic/patmatch_for_multiple.ml
+++ b/testsuite/tests/basic/patmatch_for_multiple.ml
@@ -26,15 +26,15 @@ match (3, 2, 1) with
 | _ -> false
 ;;
 [%%expect{|
-(let (*match*/275 = 3 *match*/276 = 2 *match*/277 = 1)
+(let (*match*/270 = 3 *match*/271 = 2 *match*/272 = 1)
   (catch
     (catch
-      (catch (if (!= *match*/276 3) (exit 3) (exit 1)) with (3)
-        (if (!= *match*/275 1) (exit 2) (exit 1)))
+      (catch (if (!= *match*/271 3) (exit 3) (exit 1)) with (3)
+        (if (!= *match*/270 1) (exit 2) (exit 1)))
      with (2) 0)
    with (1) 1))
-(let (*match*/275 = 3 *match*/276 = 2 *match*/277 = 1)
-  (catch (if (!= *match*/276 3) (if (!= *match*/275 1) 0 (exit 1)) (exit 1))
+(let (*match*/270 = 3 *match*/271 = 2 *match*/272 = 1)
+  (catch (if (!= *match*/271 3) (if (!= *match*/270 1) 0 (exit 1)) (exit 1))
    with (1) 1))
 - : bool = false
 |}];;
@@ -47,26 +47,26 @@ match (3, 2, 1) with
 | _ -> false
 ;;
 [%%expect{|
-(let (*match*/280 = 3 *match*/281 = 2 *match*/282 = 1)
+(let (*match*/275 = 3 *match*/276 = 2 *match*/277 = 1)
   (catch
     (catch
       (catch
-        (if (!= *match*/281 3) (exit 6)
-          (let (x/284 =a (makeblock 0 *match*/280 *match*/281 *match*/282))
-            (exit 4 x/284)))
+        (if (!= *match*/276 3) (exit 6)
+          (let (x/279 =a (makeblock 0 *match*/275 *match*/276 *match*/277))
+            (exit 4 x/279)))
        with (6)
-        (if (!= *match*/280 1) (exit 5)
-          (let (x/283 =a (makeblock 0 *match*/280 *match*/281 *match*/282))
-            (exit 4 x/283))))
+        (if (!= *match*/275 1) (exit 5)
+          (let (x/278 =a (makeblock 0 *match*/275 *match*/276 *match*/277))
+            (exit 4 x/278))))
      with (5) 0)
-   with (4 x/278) (seq (ignore x/278) 1)))
-(let (*match*/280 = 3 *match*/281 = 2 *match*/282 = 1)
+   with (4 x/273) (seq (ignore x/273) 1)))
+(let (*match*/275 = 3 *match*/276 = 2 *match*/277 = 1)
   (catch
-    (if (!= *match*/281 3)
-      (if (!= *match*/280 1) 0
-        (exit 4 (makeblock 0 *match*/280 *match*/281 *match*/282)))
-      (exit 4 (makeblock 0 *match*/280 *match*/281 *match*/282)))
-   with (4 x/278) (seq (ignore x/278) 1)))
+    (if (!= *match*/276 3)
+      (if (!= *match*/275 1) 0
+        (exit 4 (makeblock 0 *match*/275 *match*/276 *match*/277)))
+      (exit 4 (makeblock 0 *match*/275 *match*/276 *match*/277)))
+   with (4 x/273) (seq (ignore x/273) 1)))
 - : bool = false
 |}];;
 
@@ -76,8 +76,8 @@ let _ = fun a b ->
   | ((true, _) as _g)
   | ((false, _) as _g) -> ()
 [%%expect{|
-(function a/285[int] b/286 : int 0)
-(function a/285[int] b/286 : int 0)
+(function a/280[int] b/281 : int 0)
+(function a/280[int] b/281 : int 0)
 - : bool -> 'a -> unit = <fun>
 |}];;
 
@@ -96,8 +96,8 @@ let _ = fun a b -> match a, b with
 | (false, _) as p -> p
 (* outside, trivial *)
 [%%expect {|
-(function a/289[int] b/290 (let (p/291 =a (makeblock 0 a/289 b/290)) p/291))
-(function a/289[int] b/290 (makeblock 0 a/289 b/290))
+(function a/284[int] b/285 (let (p/286 =a (makeblock 0 a/284 b/285)) p/286))
+(function a/284[int] b/285 (makeblock 0 a/284 b/285))
 - : bool -> 'a -> bool * 'a = <fun>
 |}]
 
@@ -106,8 +106,8 @@ let _ = fun a b -> match a, b with
 | ((false, _) as p) -> p
 (* inside, trivial *)
 [%%expect{|
-(function a/293[int] b/294 (let (p/295 =a (makeblock 0 a/293 b/294)) p/295))
-(function a/293[int] b/294 (makeblock 0 a/293 b/294))
+(function a/288[int] b/289 (let (p/290 =a (makeblock 0 a/288 b/289)) p/290))
+(function a/288[int] b/289 (makeblock 0 a/288 b/289))
 - : bool -> 'a -> bool * 'a = <fun>
 |}];;
 
@@ -116,11 +116,11 @@ let _ = fun a b -> match a, b with
 | (false as x, _) as p -> x, p
 (* outside, simple *)
 [%%expect {|
-(function a/299[int] b/300
-  (let (x/301 =a[int] a/299 p/302 =a (makeblock 0 a/299 b/300))
-    (makeblock 0 (int,*) x/301 p/302)))
-(function a/299[int] b/300
-  (makeblock 0 (int,*) a/299 (makeblock 0 a/299 b/300)))
+(function a/294[int] b/295
+  (let (x/296 =a[int] a/294 p/297 =a (makeblock 0 a/294 b/295))
+    (makeblock 0 (int,*) x/296 p/297)))
+(function a/294[int] b/295
+  (makeblock 0 (int,*) a/294 (makeblock 0 a/294 b/295)))
 - : bool -> 'a -> bool * (bool * 'a) = <fun>
 |}]
 
@@ -129,11 +129,11 @@ let _ = fun a b -> match a, b with
 | ((false as x, _) as p) -> x, p
 (* inside, simple *)
 [%%expect {|
-(function a/305[int] b/306
-  (let (x/307 =a[int] a/305 p/308 =a (makeblock 0 a/305 b/306))
-    (makeblock 0 (int,*) x/307 p/308)))
-(function a/305[int] b/306
-  (makeblock 0 (int,*) a/305 (makeblock 0 a/305 b/306)))
+(function a/300[int] b/301
+  (let (x/302 =a[int] a/300 p/303 =a (makeblock 0 a/300 b/301))
+    (makeblock 0 (int,*) x/302 p/303)))
+(function a/300[int] b/301
+  (makeblock 0 (int,*) a/300 (makeblock 0 a/300 b/301)))
 - : bool -> 'a -> bool * (bool * 'a) = <fun>
 |}]
 
@@ -142,15 +142,15 @@ let _ = fun a b -> match a, b with
 | (false, x) as p -> x, p
 (* outside, complex *)
 [%%expect{|
-(function a/315[int] b/316[int]
-  (if a/315
-    (let (x/317 =a[int] a/315 p/318 =a (makeblock 0 a/315 b/316))
-      (makeblock 0 (int,*) x/317 p/318))
-    (let (x/319 =a b/316 p/320 =a (makeblock 0 a/315 b/316))
-      (makeblock 0 (int,*) x/319 p/320))))
-(function a/315[int] b/316[int]
-  (if a/315 (makeblock 0 (int,*) a/315 (makeblock 0 a/315 b/316))
-    (makeblock 0 (int,*) b/316 (makeblock 0 a/315 b/316))))
+(function a/310[int] b/311[int]
+  (if a/310
+    (let (x/312 =a[int] a/310 p/313 =a (makeblock 0 a/310 b/311))
+      (makeblock 0 (int,*) x/312 p/313))
+    (let (x/314 =a b/311 p/315 =a (makeblock 0 a/310 b/311))
+      (makeblock 0 (int,*) x/314 p/315))))
+(function a/310[int] b/311[int]
+  (if a/310 (makeblock 0 (int,*) a/310 (makeblock 0 a/310 b/311))
+    (makeblock 0 (int,*) b/311 (makeblock 0 a/310 b/311))))
 - : bool -> bool -> bool * (bool * bool) = <fun>
 |}]
 
@@ -160,19 +160,19 @@ let _ = fun a b -> match a, b with
   -> x, p
 (* inside, complex *)
 [%%expect{|
-(function a/321[int] b/322[int]
+(function a/316[int] b/317[int]
   (catch
-    (if a/321
-      (let (x/329 =a[int] a/321 p/330 =a (makeblock 0 a/321 b/322))
-        (exit 10 x/329 p/330))
-      (let (x/327 =a b/322 p/328 =a (makeblock 0 a/321 b/322))
-        (exit 10 x/327 p/328)))
-   with (10 x/323[int] p/324) (makeblock 0 (int,*) x/323 p/324)))
-(function a/321[int] b/322[int]
+    (if a/316
+      (let (x/324 =a[int] a/316 p/325 =a (makeblock 0 a/316 b/317))
+        (exit 10 x/324 p/325))
+      (let (x/322 =a b/317 p/323 =a (makeblock 0 a/316 b/317))
+        (exit 10 x/322 p/323)))
+   with (10 x/318[int] p/319) (makeblock 0 (int,*) x/318 p/319)))
+(function a/316[int] b/317[int]
   (catch
-    (if a/321 (exit 10 a/321 (makeblock 0 a/321 b/322))
-      (exit 10 b/322 (makeblock 0 a/321 b/322)))
-   with (10 x/323[int] p/324) (makeblock 0 (int,*) x/323 p/324)))
+    (if a/316 (exit 10 a/316 (makeblock 0 a/316 b/317))
+      (exit 10 b/317 (makeblock 0 a/316 b/317)))
+   with (10 x/318[int] p/319) (makeblock 0 (int,*) x/318 p/319)))
 - : bool -> bool -> bool * (bool * bool) = <fun>
 |}]
 
@@ -185,15 +185,15 @@ let _ = fun a b -> match a, b with
 | (false as x, _) as p -> x, p
 (* outside, onecase *)
 [%%expect {|
-(function a/331[int] b/332[int]
-  (if a/331
-    (let (x/333 =a[int] a/331 _p/334 =a (makeblock 0 a/331 b/332))
-      (makeblock 0 (int,*) x/333 [0: 1 1]))
-    (let (x/335 =a[int] a/331 p/336 =a (makeblock 0 a/331 b/332))
-      (makeblock 0 (int,*) x/335 p/336))))
-(function a/331[int] b/332[int]
-  (if a/331 (makeblock 0 (int,*) a/331 [0: 1 1])
-    (makeblock 0 (int,*) a/331 (makeblock 0 a/331 b/332))))
+(function a/326[int] b/327[int]
+  (if a/326
+    (let (x/328 =a[int] a/326 _p/329 =a (makeblock 0 a/326 b/327))
+      (makeblock 0 (int,*) x/328 [0: 1 1]))
+    (let (x/330 =a[int] a/326 p/331 =a (makeblock 0 a/326 b/327))
+      (makeblock 0 (int,*) x/330 p/331))))
+(function a/326[int] b/327[int]
+  (if a/326 (makeblock 0 (int,*) a/326 [0: 1 1])
+    (makeblock 0 (int,*) a/326 (makeblock 0 a/326 b/327))))
 - : bool -> bool -> bool * (bool * bool) = <fun>
 |}]
 
@@ -202,11 +202,11 @@ let _ = fun a b -> match a, b with
 | ((false as x, _) as p) -> x, p
 (* inside, onecase *)
 [%%expect{|
-(function a/337[int] b/338
-  (let (x/339 =a[int] a/337 p/340 =a (makeblock 0 a/337 b/338))
-    (makeblock 0 (int,*) x/339 p/340)))
-(function a/337[int] b/338
-  (makeblock 0 (int,*) a/337 (makeblock 0 a/337 b/338)))
+(function a/332[int] b/333
+  (let (x/334 =a[int] a/332 p/335 =a (makeblock 0 a/332 b/333))
+    (makeblock 0 (int,*) x/334 p/335)))
+(function a/332[int] b/333
+  (makeblock 0 (int,*) a/332 (makeblock 0 a/332 b/333)))
 - : bool -> 'a -> bool * (bool * 'a) = <fun>
 |}]
 
@@ -223,14 +223,14 @@ let _ =fun a b -> match a, b with
 | (_, _) as p -> p
 (* outside, tuplist *)
 [%%expect {|
-(function a/350[int] b/351
+(function a/345[int] b/346
   (catch
-    (if a/350 (if b/351 (let (p/352 =a (field_imm 0 b/351)) p/352) (exit 12))
+    (if a/345 (if b/346 (let (p/347 =a (field_imm 0 b/346)) p/347) (exit 12))
       (exit 12))
-   with (12) (let (p/353 =a (makeblock 0 a/350 b/351)) p/353)))
-(function a/350[int] b/351
-  (catch (if a/350 (if b/351 (field_imm 0 b/351) (exit 12)) (exit 12))
-   with (12) (makeblock 0 a/350 b/351)))
+   with (12) (let (p/348 =a (makeblock 0 a/345 b/346)) p/348)))
+(function a/345[int] b/346
+  (catch (if a/345 (if b/346 (field_imm 0 b/346) (exit 12)) (exit 12))
+   with (12) (makeblock 0 a/345 b/346)))
 - : bool -> bool tuplist -> bool * bool tuplist = <fun>
 |}]
 
@@ -239,20 +239,20 @@ let _ = fun a b -> match a, b with
 | ((_, _) as p) -> p
 (* inside, tuplist *)
 [%%expect{|
-(function a/354[int] b/355
+(function a/349[int] b/350
   (catch
     (catch
-      (if a/354
-        (if b/355 (let (p/359 =a (field_imm 0 b/355)) (exit 13 p/359))
+      (if a/349
+        (if b/350 (let (p/354 =a (field_imm 0 b/350)) (exit 13 p/354))
           (exit 14))
         (exit 14))
-     with (14) (let (p/358 =a (makeblock 0 a/354 b/355)) (exit 13 p/358)))
-   with (13 p/356) p/356))
-(function a/354[int] b/355
+     with (14) (let (p/353 =a (makeblock 0 a/349 b/350)) (exit 13 p/353)))
+   with (13 p/351) p/351))
+(function a/349[int] b/350
   (catch
     (catch
-      (if a/354 (if b/355 (exit 13 (field_imm 0 b/355)) (exit 14)) (exit 14))
-     with (14) (exit 13 (makeblock 0 a/354 b/355)))
-   with (13 p/356) p/356))
+      (if a/349 (if b/350 (exit 13 (field_imm 0 b/350)) (exit 14)) (exit 14))
+     with (14) (exit 13 (makeblock 0 a/349 b/350)))
+   with (13 p/351) p/351))
 - : bool -> bool tuplist -> bool * bool tuplist = <fun>
 |}]
diff --git a/testsuite/tests/c-api/alloc_async.ml b/testsuite/tests/c-api/alloc_async.ml
index b8c99a4b07..0ed35acf16 100644
--- a/testsuite/tests/c-api/alloc_async.ml
+++ b/testsuite/tests/c-api/alloc_async.ml
@@ -1,7 +1,5 @@
 (* TEST
    modules = "alloc_async_stubs.c"
-   * skip
-   reason = "alloc async changes: https://github.com/ocaml/ocaml/pull/8897"
 *)
 
 external test : int ref -> unit = "stub"
diff --git a/testsuite/tests/c-api/test_c_thread_has_lock.ml b/testsuite/tests/c-api/test_c_thread_has_lock.ml
index e826001559..f3e4a20be8 100644
--- a/testsuite/tests/c-api/test_c_thread_has_lock.ml
+++ b/testsuite/tests/c-api/test_c_thread_has_lock.ml
@@ -1,7 +1,9 @@
 (* TEST
    modules = "test_c_thread_has_lock_cstubs.c"
-   * bytecode
-   * native
+   * skip
+   reason = "OCaml 5 only"
+   ** bytecode
+   ** native
 *)
 
 external test_with_lock : unit -> bool = "with_lock"
diff --git a/testsuite/tests/c-api/test_c_thread_has_lock_systhread.ml b/testsuite/tests/c-api/test_c_thread_has_lock_systhread.ml
index 65327be652..036068739a 100644
--- a/testsuite/tests/c-api/test_c_thread_has_lock_systhread.ml
+++ b/testsuite/tests/c-api/test_c_thread_has_lock_systhread.ml
@@ -1,9 +1,11 @@
 (* TEST
    modules = "test_c_thread_has_lock_cstubs.c"
-   * hassysthreads
+   * skip
+   reason = "OCaml 5 only"
+   ** hassysthreads
    include systhreads
-   ** bytecode
-   ** native
+   *** bytecode
+   *** native
 *)
 
 external test_with_lock : unit -> bool = "with_lock"
diff --git a/testsuite/tests/callback/nested_fiber.ml b/testsuite/tests/callback/nested_fiber.ml
index 3786e455ef..77478728df 100644
--- a/testsuite/tests/callback/nested_fiber.ml
+++ b/testsuite/tests/callback/nested_fiber.ml
@@ -1,9 +1,11 @@
 (* TEST
    include unix
    modules = "nested_fiber_.c"
-   * libunix
-   ** bytecode
-   ** native
+   * skip
+   reason = "OCaml 5 only"
+   ** libunix
+   *** bytecode
+   *** native
 *)
 
 external caml_to_c : (unit -> 'a) -> 'a = "caml_to_c"
diff --git a/testsuite/tests/callback/stack_overflow.ml b/testsuite/tests/callback/stack_overflow.ml
index 23691dcf6c..6281d76e2a 100644
--- a/testsuite/tests/callback/stack_overflow.ml
+++ b/testsuite/tests/callback/stack_overflow.ml
@@ -1,9 +1,11 @@
 (* TEST
    include unix
    modules = "stack_overflow_.c"
-   * libunix
-   ** bytecode
-   ** native
+   * skip
+   reason = "OCaml 5 only"
+   ** libunix
+   *** bytecode
+   *** native
 *)
 
 external caml_to_c : (unit -> 'a) -> 'a = "caml_to_c"
diff --git a/testsuite/tests/callback/test7.ml b/testsuite/tests/callback/test7.ml
index 8883a55f69..800c60e6de 100644
--- a/testsuite/tests/callback/test7.ml
+++ b/testsuite/tests/callback/test7.ml
@@ -1,9 +1,11 @@
 (* TEST
    include unix
    modules = "test7_.c"
-   * libunix
-   ** bytecode
-   ** native
+   * skip
+   reason = "OCaml 5 only"
+   ** libunix
+   *** bytecode
+   *** native
 *)
 
 (* Tests nested calls from C (main C) to OCaml (main OCaml) to C (caml_to_c) to
diff --git a/testsuite/tests/callback/test_signalhandler.ml b/testsuite/tests/callback/test_signalhandler.ml
index a2bbacee72..9250395618 100644
--- a/testsuite/tests/callback/test_signalhandler.ml
+++ b/testsuite/tests/callback/test_signalhandler.ml
@@ -1,6 +1,6 @@
 (* TEST
    include unix
-   modules = "test_signalhandler_.c"
+   modules = "callbackprim.c"
    * libunix
    ** bytecode
    ** native
@@ -52,17 +52,19 @@ let sighandler signo =
   (* Thoroughly wipe the minor heap *)
   ignore (tak (18, 12, 6))
 
-external mykill : int -> int -> unit = "mykill" [@@noalloc]
+external raise_sigusr1 : unit -> unit = "raise_sigusr1" [@@noalloc]
+(*external mykill : int -> int -> unit = "mykill" [@@noalloc]*)
 
 let callbacksig () =
-  let pid = Unix.getpid () in
+  let _pid = Unix.getpid() in
   (* Allocate a block in the minor heap *)
   let s = String.make 5 'b' in
   (* Send a signal to self.  We want s to remain in a register and
      not be spilled on the stack, hence we use [mykill]
      (which is [@@noalloc] and doesn't trigger signal handling)
      instead of [Unix.kill]. *)
-  mykill pid Sys.sigusr1;
+  (*mykill pid Sys.sigusr1;*)
+  raise_sigusr1 ();
   (* Allocate some more so that the signal will be tested *)
   let u = (s, s) in
   fst u
diff --git a/testsuite/tests/effects/backtrace.ml b/testsuite/tests/effects/backtrace.ml
index 6257ba75c5..df6e11ac7a 100644
--- a/testsuite/tests/effects/backtrace.ml
+++ b/testsuite/tests/effects/backtrace.ml
@@ -1,6 +1,8 @@
 (* TEST
    flags = "-g"
    ocamlrunparam += ",b=1"
+   * skip
+   reason = "OCaml 5 only"
 *)
 
 open Effect
diff --git a/testsuite/tests/effects/cmphash.ml b/testsuite/tests/effects/cmphash.ml
index 78481d6404..a36d20cb8c 100644
--- a/testsuite/tests/effects/cmphash.ml
+++ b/testsuite/tests/effects/cmphash.ml
@@ -1,4 +1,6 @@
 (* TEST
+   * skip
+   reason = "OCaml 5 only"
  *)
 
 open Effect
diff --git a/testsuite/tests/effects/evenodd.ml b/testsuite/tests/effects/evenodd.ml
index 035308b58f..85f178310b 100644
--- a/testsuite/tests/effects/evenodd.ml
+++ b/testsuite/tests/effects/evenodd.ml
@@ -1,4 +1,6 @@
 (* TEST
+   * skip
+   reason = "OCaml 5 only"
  *)
 
 open Effect
diff --git a/testsuite/tests/effects/issue479.ml b/testsuite/tests/effects/issue479.ml
index 228e098d2e..c00b55c6ff 100644
--- a/testsuite/tests/effects/issue479.ml
+++ b/testsuite/tests/effects/issue479.ml
@@ -1,5 +1,7 @@
 (* TEST
-   * toplevel
+   * skip
+   reason = "OCaml 5 only"
+   ** toplevel
 *)
 
 (* https://github.com/ocaml-multicore/ocaml-multicore/issues/479 *)
diff --git a/testsuite/tests/effects/overflow.ml b/testsuite/tests/effects/overflow.ml
index a187e9e10d..c12503863e 100644
--- a/testsuite/tests/effects/overflow.ml
+++ b/testsuite/tests/effects/overflow.ml
@@ -1,4 +1,6 @@
 (* TEST
+   * skip
+   reason = "OCaml 5 only"
  *)
 
 open Effect
diff --git a/testsuite/tests/effects/partial.ml b/testsuite/tests/effects/partial.ml
index 50e4b53cfc..010741b9fc 100644
--- a/testsuite/tests/effects/partial.ml
+++ b/testsuite/tests/effects/partial.ml
@@ -1,4 +1,6 @@
 (* TEST
+   * skip
+   reason = "OCaml 5 only"
  *)
 
 open Effect
diff --git a/testsuite/tests/effects/reperform.ml b/testsuite/tests/effects/reperform.ml
index 8aefdd0587..685b48b5dd 100644
--- a/testsuite/tests/effects/reperform.ml
+++ b/testsuite/tests/effects/reperform.ml
@@ -1,4 +1,6 @@
 (* TEST
+   * skip
+   reason = "OCaml 5 only"
  *)
 
 open Effect
diff --git a/testsuite/tests/effects/sched.ml b/testsuite/tests/effects/sched.ml
index 3dc14a2cfc..6065d21c70 100644
--- a/testsuite/tests/effects/sched.ml
+++ b/testsuite/tests/effects/sched.ml
@@ -1,4 +1,6 @@
 (* TEST
+   * skip
+   reason = "OCaml 5 only"
  *)
 
 open Effect
diff --git a/testsuite/tests/effects/shallow_state.ml b/testsuite/tests/effects/shallow_state.ml
index 56c61b0c3c..4d52362bc7 100644
--- a/testsuite/tests/effects/shallow_state.ml
+++ b/testsuite/tests/effects/shallow_state.ml
@@ -1,4 +1,6 @@
 (* TEST
+   * skip
+   reason = "OCaml 5 only"
  *)
 
 open Effect
diff --git a/testsuite/tests/effects/shallow_state_io.ml b/testsuite/tests/effects/shallow_state_io.ml
index 6b1fa649a7..6ca4fef8b1 100644
--- a/testsuite/tests/effects/shallow_state_io.ml
+++ b/testsuite/tests/effects/shallow_state_io.ml
@@ -1,4 +1,6 @@
 (* TEST
+   * skip
+   reason = "OCaml 5 only"
  *)
 
 open Effect
diff --git a/testsuite/tests/effects/test1.ml b/testsuite/tests/effects/test1.ml
index 5d05359f8a..65da5c8b90 100644
--- a/testsuite/tests/effects/test1.ml
+++ b/testsuite/tests/effects/test1.ml
@@ -1,4 +1,6 @@
 (* TEST
+   * skip
+   reason = "OCaml 5 only"
  *)
 
 open Effect
diff --git a/testsuite/tests/effects/test10.ml b/testsuite/tests/effects/test10.ml
index 29c5f47f25..9b10559cfd 100644
--- a/testsuite/tests/effects/test10.ml
+++ b/testsuite/tests/effects/test10.ml
@@ -1,4 +1,6 @@
 (* TEST
+   * skip
+   reason = "OCaml 5 only"
  *)
 
 open Effect
diff --git a/testsuite/tests/effects/test11.ml b/testsuite/tests/effects/test11.ml
index 6714473e0e..303cdd03c5 100644
--- a/testsuite/tests/effects/test11.ml
+++ b/testsuite/tests/effects/test11.ml
@@ -1,4 +1,6 @@
 (* TEST
+   * skip
+   reason = "OCaml 5 only"
 *)
 
 (* Tests RESUMETERM with extra_args != 0 in bytecode,
diff --git a/testsuite/tests/effects/test2.ml b/testsuite/tests/effects/test2.ml
index e9b8289bb2..f4e805f1d0 100644
--- a/testsuite/tests/effects/test2.ml
+++ b/testsuite/tests/effects/test2.ml
@@ -1,4 +1,6 @@
 (* TEST
+   * skip
+   reason = "OCaml 5 only"
  *)
 
 open Printf
diff --git a/testsuite/tests/effects/test3.ml b/testsuite/tests/effects/test3.ml
index d76130eaaa..2828f933a7 100644
--- a/testsuite/tests/effects/test3.ml
+++ b/testsuite/tests/effects/test3.ml
@@ -1,4 +1,6 @@
 (* TEST
+   * skip
+   reason = "OCaml 5 only"
  *)
 
 open Effect
diff --git a/testsuite/tests/effects/test4.ml b/testsuite/tests/effects/test4.ml
index f5cf78cbda..77320a1ab5 100644
--- a/testsuite/tests/effects/test4.ml
+++ b/testsuite/tests/effects/test4.ml
@@ -1,4 +1,6 @@
 (* TEST
+   * skip
+   reason = "OCaml 5 only"
  *)
 
 open Effect
diff --git a/testsuite/tests/effects/test5.ml b/testsuite/tests/effects/test5.ml
index 33ed2c23ca..98802a934e 100644
--- a/testsuite/tests/effects/test5.ml
+++ b/testsuite/tests/effects/test5.ml
@@ -1,4 +1,6 @@
 (* TEST
+   * skip
+   reason = "OCaml 5 only"
  *)
 
 open Effect
diff --git a/testsuite/tests/effects/test6.ml b/testsuite/tests/effects/test6.ml
index 40574561bf..451e9704bc 100644
--- a/testsuite/tests/effects/test6.ml
+++ b/testsuite/tests/effects/test6.ml
@@ -1,4 +1,6 @@
 (* TEST
+   * skip
+   reason = "OCaml 5 only"
  *)
 
 open Effect
diff --git a/testsuite/tests/effects/test_lazy.ml b/testsuite/tests/effects/test_lazy.ml
index 24f457f0af..036c7d5038 100644
--- a/testsuite/tests/effects/test_lazy.ml
+++ b/testsuite/tests/effects/test_lazy.ml
@@ -1,4 +1,7 @@
-(* TEST *)
+(* TEST
+   * skip
+   reason = "OCaml 5 only"
+*)
 
 open Effect
 open Effect.Deep
diff --git a/testsuite/tests/effects/unhandled_unlinked.ml b/testsuite/tests/effects/unhandled_unlinked.ml
index bc2badb8e8..094eaad6e8 100644
--- a/testsuite/tests/effects/unhandled_unlinked.ml
+++ b/testsuite/tests/effects/unhandled_unlinked.ml
@@ -1,5 +1,7 @@
 (* TEST
      exit_status= "2"
+     * skip
+     reason = "OCaml 5 only"
 *)
 
 open Effect
diff --git a/testsuite/tests/effects/used_cont.ml b/testsuite/tests/effects/used_cont.ml
index 71a33388ec..7972d000b7 100644
--- a/testsuite/tests/effects/used_cont.ml
+++ b/testsuite/tests/effects/used_cont.ml
@@ -1,4 +1,6 @@
 (* TEST
+   * skip
+   reason = "OCaml 5 only"
  *)
 
 open Effect
diff --git a/testsuite/tests/ephe-c-api/test.ml b/testsuite/tests/ephe-c-api/test.ml
index ff1646835a..a29cd8516b 100644
--- a/testsuite/tests/ephe-c-api/test.ml
+++ b/testsuite/tests/ephe-c-api/test.ml
@@ -1,7 +1,5 @@
 (* TEST
    modules = "stubs.c"
-   * skip
-   reason = "port the new Ephemeron C-api to multicore : https://github.com/ocaml/ocaml/pull/676"
 *)
 
 (* C version of ephetest.ml *)
diff --git a/testsuite/tests/frame-pointers/c_call.ml b/testsuite/tests/frame-pointers/c_call.ml
index 3f0a02e4a1..3c5b1b621b 100644
--- a/testsuite/tests/frame-pointers/c_call.ml
+++ b/testsuite/tests/frame-pointers/c_call.ml
@@ -1,7 +1,9 @@
 (* TEST
 
-* frame_pointers
-** native
+* skip
+reason = "OCaml 5 only"
+** frame_pointers
+*** native
 readonly_files = "fp_backtrace.c c_call_.c"
 all_modules = "${readonly_files} c_call.ml"
 
diff --git a/testsuite/tests/frame-pointers/effects.ml b/testsuite/tests/frame-pointers/effects.ml
index e14633a374..03068242a4 100644
--- a/testsuite/tests/frame-pointers/effects.ml
+++ b/testsuite/tests/frame-pointers/effects.ml
@@ -1,7 +1,9 @@
 (* TEST
 
-* frame_pointers
-** native
+* skip
+reason - "OCaml 5 only"
+** frame_pointers
+*** native
 readonly_files = "fp_backtrace.c"
 all_modules = "${readonly_files} effects.ml"
 
diff --git a/testsuite/tests/frame-pointers/exception_handler.ml b/testsuite/tests/frame-pointers/exception_handler.ml
index 575f7329bf..56676119b7 100644
--- a/testsuite/tests/frame-pointers/exception_handler.ml
+++ b/testsuite/tests/frame-pointers/exception_handler.ml
@@ -1,7 +1,9 @@
 (* TEST
 
-* frame_pointers
-** native
+* skip
+reason = "OCaml 5 only"
+** frame_pointers
+*** native
 readonly_files = "fp_backtrace.c"
 all_modules = "${readonly_files} exception_handler.ml"
 
diff --git a/testsuite/tests/frame-pointers/reperform.ml b/testsuite/tests/frame-pointers/reperform.ml
index 1af8452e5f..5e7a76f0e3 100644
--- a/testsuite/tests/frame-pointers/reperform.ml
+++ b/testsuite/tests/frame-pointers/reperform.ml
@@ -1,7 +1,9 @@
 (* TEST
 
-* frame_pointers
-** native
+* skip
+reason - "OCaml 5 only"
+** frame_pointers
+*** native
 
 readonly_files = "fp_backtrace.c"
 all_modules = "${readonly_files} reperform.ml"
diff --git a/testsuite/tests/frame-pointers/stack_realloc.ml b/testsuite/tests/frame-pointers/stack_realloc.ml
index 79e70c2add..b36bcd3a70 100644
--- a/testsuite/tests/frame-pointers/stack_realloc.ml
+++ b/testsuite/tests/frame-pointers/stack_realloc.ml
@@ -1,7 +1,9 @@
 (* TEST
 
-* frame_pointers
-** native
+* skip
+reason - "OCaml 5 only"
+** frame_pointers
+*** native
 
 readonly_files = "fp_backtrace.c stack_realloc_.c"
 all_modules = "${readonly_files} stack_realloc.ml"
diff --git a/testsuite/tests/frame-pointers/stack_realloc2.ml b/testsuite/tests/frame-pointers/stack_realloc2.ml
index a3d21bf2bf..df4a074443 100644
--- a/testsuite/tests/frame-pointers/stack_realloc2.ml
+++ b/testsuite/tests/frame-pointers/stack_realloc2.ml
@@ -1,7 +1,9 @@
 (* TEST
 
-* frame_pointers
-** native
+* skip
+reason - "OCaml 5 only"
+** frame_pointers
+*** native
 
 readonly_files = "fp_backtrace.c stack_realloc_.c"
 all_modules = "${readonly_files} stack_realloc2.ml"
diff --git a/testsuite/tests/gc-roots/globroots.ml b/testsuite/tests/gc-roots/globroots.ml
index 56d1586331..6bdb7fdaf3 100644
--- a/testsuite/tests/gc-roots/globroots.ml
+++ b/testsuite/tests/gc-roots/globroots.ml
@@ -1,5 +1,7 @@
 (* TEST
    modules = "globrootsprim.c"
+   * skip
+   reason = "OCaml 5 only"
 *)
 
 module type GLOBREF = sig
diff --git a/testsuite/tests/gc-roots/globroots_parallel.ml b/testsuite/tests/gc-roots/globroots_parallel.ml
index 9ef88575b2..4858ecc49b 100644
--- a/testsuite/tests/gc-roots/globroots_parallel.ml
+++ b/testsuite/tests/gc-roots/globroots_parallel.ml
@@ -1,6 +1,8 @@
 (* TEST
    flags += " -w a "
    modules = "globrootsprim.c globroots.ml"
+   * skip
+   reason = "OCaml 5 only"
 *)
 
 open Globroots
diff --git a/testsuite/tests/gc-roots/globroots_parallel_spawn_burn.ml b/testsuite/tests/gc-roots/globroots_parallel_spawn_burn.ml
index c8b36098ac..d548d6e540 100644
--- a/testsuite/tests/gc-roots/globroots_parallel_spawn_burn.ml
+++ b/testsuite/tests/gc-roots/globroots_parallel_spawn_burn.ml
@@ -1,6 +1,8 @@
 (* TEST
    flags += " -w a "
    modules = "globrootsprim.c globroots.ml"
+   * skip
+   reason = "OCaml 5 only"
 *)
 
 open Globroots
diff --git a/testsuite/tests/gc-roots/globroots_sequential.ml b/testsuite/tests/gc-roots/globroots_sequential.ml
index 6bf995bf96..dc732ce6a3 100644
--- a/testsuite/tests/gc-roots/globroots_sequential.ml
+++ b/testsuite/tests/gc-roots/globroots_sequential.ml
@@ -1,6 +1,8 @@
 (* TEST
    flags += " -w a "
    modules = "globrootsprim.c globroots.ml"
+   * skip
+   reason = "OCaml 5 only"
 *)
 open Globroots
 
diff --git a/testsuite/tests/generalized-open/gpr1506.ml b/testsuite/tests/generalized-open/gpr1506.ml
index f6919c78f4..e17b287aaf 100644
--- a/testsuite/tests/generalized-open/gpr1506.ml
+++ b/testsuite/tests/generalized-open/gpr1506.ml
@@ -103,9 +103,9 @@ include struct open struct type t = T end let x = T end
 Line 1, characters 15-41:
 1 | include struct open struct type t = T end let x = T end
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
-Error: The type t/338 introduced by this open appears in the signature
+Error: The type t/333 introduced by this open appears in the signature
        Line 1, characters 46-47:
-         The value x has no valid type if t/338 is hidden
+         The value x has no valid type if t/333 is hidden
 |}];;
 
 module A = struct
@@ -123,9 +123,9 @@ Lines 3-6, characters 4-7:
 4 |       type t = T
 5 |       let x = T
 6 |     end
-Error: The type t/343 introduced by this open appears in the signature
+Error: The type t/338 introduced by this open appears in the signature
        Line 7, characters 8-9:
-         The value y has no valid type if t/343 is hidden
+         The value y has no valid type if t/338 is hidden
 |}];;
 
 module A = struct
@@ -142,9 +142,9 @@ Lines 3-5, characters 4-7:
 3 | ....open struct
 4 |       type t = T
 5 |     end
-Error: The type t/348 introduced by this open appears in the signature
+Error: The type t/343 introduced by this open appears in the signature
        Line 6, characters 8-9:
-         The value y has no valid type if t/348 is hidden
+         The value y has no valid type if t/343 is hidden
 |}]
 
 (* It was decided to not allow this anymore. *)
diff --git a/testsuite/tests/lazy/lazy2.ml b/testsuite/tests/lazy/lazy2.ml
index cccbd96d71..35dd7fd85b 100644
--- a/testsuite/tests/lazy/lazy2.ml
+++ b/testsuite/tests/lazy/lazy2.ml
@@ -1,5 +1,7 @@
 (* TEST
    ocamlopt_flags += " -O3 "
+   * skip
+   reason = "OCaml 5 only"
 *)
 
 open Domain
diff --git a/testsuite/tests/lazy/lazy3.ml b/testsuite/tests/lazy/lazy3.ml
index a22a0893b9..737791b7db 100644
--- a/testsuite/tests/lazy/lazy3.ml
+++ b/testsuite/tests/lazy/lazy3.ml
@@ -1,5 +1,7 @@
 (* TEST
    ocamlopt_flags += " -O3 "
+   * skip
+   reason = "OCaml 5 only"
 *)
 
 let f count =
diff --git a/testsuite/tests/lazy/lazy5.ml b/testsuite/tests/lazy/lazy5.ml
index 217b84175e..e37b499268 100644
--- a/testsuite/tests/lazy/lazy5.ml
+++ b/testsuite/tests/lazy/lazy5.ml
@@ -1,5 +1,7 @@
 (* TEST
    ocamlopt_flags += " -O3 "
+   * skip
+   reason = "OCaml 5 only"
 *)
 let rec safe_force l =
   try Lazy.force l with
diff --git a/testsuite/tests/lazy/lazy6.ml b/testsuite/tests/lazy/lazy6.ml
index 098848769a..29067f1a41 100644
--- a/testsuite/tests/lazy/lazy6.ml
+++ b/testsuite/tests/lazy/lazy6.ml
@@ -1,5 +1,7 @@
 (* TEST
    ocamlopt_flags += " -O3 "
+   * skip
+   reason = "OCaml 5 only"
 *)
 
 let flag1 = Atomic.make false
diff --git a/testsuite/tests/lazy/lazy7.ml b/testsuite/tests/lazy/lazy7.ml
index 6c96f32907..d9c9b82127 100644
--- a/testsuite/tests/lazy/lazy7.ml
+++ b/testsuite/tests/lazy/lazy7.ml
@@ -1,5 +1,7 @@
 (* TEST
    ocamlopt_flags += " -O3 "
+   * skip
+   reason = "OCaml 5 only"
 *)
 
 let num_domains = 4
diff --git a/testsuite/tests/lazy/lazy8.ml b/testsuite/tests/lazy/lazy8.ml
index c9b5781617..ddadf48a1b 100644
--- a/testsuite/tests/lazy/lazy8.ml
+++ b/testsuite/tests/lazy/lazy8.ml
@@ -1,5 +1,7 @@
 (* TEST
    ocamlopt_flags += " -O3 "
+   * skip
+   reason = "OCaml 5 only"
 *)
 
 exception E
diff --git a/testsuite/tests/lazy/minor_major_force.ml b/testsuite/tests/lazy/minor_major_force.ml
index b18fe44a9b..d7497f986d 100644
--- a/testsuite/tests/lazy/minor_major_force.ml
+++ b/testsuite/tests/lazy/minor_major_force.ml
@@ -1,5 +1,7 @@
 (* TEST
    ocamlopt_flags += " -O3 "
+   * skip
+   reason = "OCaml 5 only"
 *)
 
 (*
diff --git a/testsuite/tests/lf_skiplist/test.ml b/testsuite/tests/lf_skiplist/test.ml
index f3b11bf411..4dcffc523d 100644
--- a/testsuite/tests/lf_skiplist/test.ml
+++ b/testsuite/tests/lf_skiplist/test.ml
@@ -1,5 +1,7 @@
 (* TEST
    modules = "stubs.c"
+   * skip
+   reason = "OCaml 5 only"
 *)
 
 external test_skiplist_serial : unit -> unit = "test_skiplist_serial"
diff --git a/testsuite/tests/lf_skiplist/test_parallel.ml b/testsuite/tests/lf_skiplist/test_parallel.ml
index ac02717889..c882a8dac7 100644
--- a/testsuite/tests/lf_skiplist/test_parallel.ml
+++ b/testsuite/tests/lf_skiplist/test_parallel.ml
@@ -1,5 +1,7 @@
 (* TEST
    modules = "stubs.c"
+   * skip
+   reason = "OCaml 5 only"
 *)
 
 external init_skiplist : unit -> unit = "init_skiplist"
diff --git a/testsuite/tests/lib-bigarray-2/has-gfortran.sh b/testsuite/tests/lib-bigarray-2/has-gfortran.sh
index 051122113a..7eef1e662e 100644
--- a/testsuite/tests/lib-bigarray-2/has-gfortran.sh
+++ b/testsuite/tests/lib-bigarray-2/has-gfortran.sh
@@ -5,7 +5,7 @@ if ! which gfortran > /dev/null 2>&1; then
 elif ! grep -q '^CC=gcc' ${ocamlsrcdir}/Makefile.config; then
   echo "OCaml was not compiled with gcc" > ${ocamltest_response}
   test_result=${TEST_SKIP}
-elif gcc --version 2>&1 | grep 'Apple clang version'; then
+elif gcc --version 2>&1 | grep -q 'Apple clang version'; then
   echo "OCaml was not compiled with gcc" > ${ocamltest_response}
   test_result=${TEST_SKIP}
 else
diff --git a/testsuite/tests/lib-channels/refcounting.ml b/testsuite/tests/lib-channels/refcounting.ml
index bc0b8dfe66..deaba0a3ee 100644
--- a/testsuite/tests/lib-channels/refcounting.ml
+++ b/testsuite/tests/lib-channels/refcounting.ml
@@ -1,5 +1,7 @@
 (* TEST
-   * expect
+   * skip
+   reason = "OCaml 5 only"
+   ** expect
 *)
 
 (* Test the behavior of channel refcounting. *)
diff --git a/testsuite/tests/lib-dynlink-domains/main.ml b/testsuite/tests/lib-dynlink-domains/main.ml
index d87ddc24e4..a10828c80e 100644
--- a/testsuite/tests/lib-dynlink-domains/main.ml
+++ b/testsuite/tests/lib-dynlink-domains/main.ml
@@ -4,169 +4,171 @@ include dynlink
 libraries = ""
 readonly_files = "store.ml main.ml Plugin_0.ml Plugin_0_0.ml Plugin_0_0_0.ml Plugin_0_0_0_0.ml Plugin_0_0_0_1.ml Plugin_0_0_0_2.ml Plugin_1.ml Plugin_1_0.ml Plugin_1_0_0.ml Plugin_1_0_0_0.ml Plugin_1_1.ml Plugin_1_2.ml Plugin_1_2_0.ml Plugin_1_2_0_0.ml Plugin_1_2_1.ml Plugin_1_2_2.ml Plugin_1_2_2_0.ml Plugin_1_2_3.ml Plugin_1_2_3_0.ml"
 
-*01 not-windows
-*02 shared-libraries
-*03 setup-ocamlc.byte-build-env
-*04 ocamlc.byte
+* skip
+reason = "OCaml 5 only"
+**01 not-windows
+**02 shared-libraries
+**03 setup-ocamlc.byte-build-env
+**04 ocamlc.byte
 module = "store.ml"
-*05 ocamlc.byte
+**05 ocamlc.byte
 module = "Plugin_0.ml"
-*06 ocamlc.byte
+**06 ocamlc.byte
 module = "Plugin_0_0.ml"
-*07 ocamlc.byte
+**07 ocamlc.byte
 module = "Plugin_0_0_0.ml"
-*08 ocamlc.byte
+**08 ocamlc.byte
 module = "Plugin_0_0_0_0.ml"
-*09 ocamlc.byte
+**09 ocamlc.byte
 module = "Plugin_0_0_0_1.ml"
-*10 ocamlc.byte
+**10 ocamlc.byte
 module = "Plugin_0_0_0_2.ml"
-*11 ocamlc.byte
+**11 ocamlc.byte
 module = "Plugin_1.ml"
-*12 ocamlc.byte
+**12 ocamlc.byte
 module = "Plugin_1_0.ml"
-*13 ocamlc.byte
+**13 ocamlc.byte
 module = "Plugin_1_0_0.ml"
-*14 ocamlc.byte
+**14 ocamlc.byte
 module = "Plugin_1_0_0_0.ml"
-*15 ocamlc.byte
+**15 ocamlc.byte
 module = "Plugin_1_1.ml"
-*16 ocamlc.byte
+**16 ocamlc.byte
 module = "Plugin_1_2.ml"
-*17 ocamlc.byte
+**17 ocamlc.byte
 module = "Plugin_1_2_0.ml"
-*18 ocamlc.byte
+**18 ocamlc.byte
 module = "Plugin_1_2_0_0.ml"
-*19 ocamlc.byte
+**19 ocamlc.byte
 module = "Plugin_1_2_1.ml"
-*20 ocamlc.byte
+**20 ocamlc.byte
 module = "Plugin_1_2_2.ml"
-*21 ocamlc.byte
+**21 ocamlc.byte
 module = "Plugin_1_2_2_0.ml"
-*22 ocamlc.byte
+**22 ocamlc.byte
 module = "Plugin_1_2_3.ml"
-*23 ocamlc.byte
+**23 ocamlc.byte
 module = "Plugin_1_2_3_0.ml"
-*24 ocamlc.byte
+**24 ocamlc.byte
 module = "main.ml"
-*25 ocamlc.byte
+**25 ocamlc.byte
 program = "./main.byte.exe"
 libraries= "dynlink"
 all_modules = "store.cmo main.cmo"
 module = ""
-*26 run
-*27 check-program-output
+**26 run
+**27 check-program-output
 
-*02 native-dynlink
-*03 setup-ocamlopt.byte-build-env
-*04 ocamlopt.byte
+**02 native-dynlink
+**03 setup-ocamlopt.byte-build-env
+**04 ocamlopt.byte
 flags = ""
 module = "store.ml"
-*05 ocamlopt.byte
+**05 ocamlopt.byte
 flags = "-shared"
 program= "Plugin_0.cmxs"
 module = ""
 all_modules = "Plugin_0.ml"
-*06 ocamlopt.byte
+**06 ocamlopt.byte
 flags = "-shared"
 program= "Plugin_0_0.cmxs"
 module = ""
 all_modules = "Plugin_0_0.ml"
-*07 ocamlopt.byte
+**07 ocamlopt.byte
 flags = "-shared"
 program= "Plugin_0_0_0.cmxs"
 module = ""
 all_modules = "Plugin_0_0_0.ml"
-*08 ocamlopt.byte
+**08 ocamlopt.byte
 flags = "-shared"
 program= "Plugin_0_0_0_0.cmxs"
 module = ""
 all_modules = "Plugin_0_0_0_0.ml"
-*09 ocamlopt.byte
+**09 ocamlopt.byte
 flags = "-shared"
 program= "Plugin_0_0_0_1.cmxs"
 module = ""
 all_modules = "Plugin_0_0_0_1.ml"
-*10 ocamlopt.byte
+**10 ocamlopt.byte
 flags = "-shared"
 program= "Plugin_0_0_0_2.cmxs"
 module = ""
 all_modules = "Plugin_0_0_0_2.ml"
-*11 ocamlopt.byte
+**11 ocamlopt.byte
 flags = "-shared"
 program= "Plugin_1.cmxs"
 module = ""
 all_modules = "Plugin_1.ml"
-*12 ocamlopt.byte
+**12 ocamlopt.byte
 flags = "-shared"
 program= "Plugin_1_0.cmxs"
 module = ""
 all_modules = "Plugin_1_0.ml"
-*13 ocamlopt.byte
+**13 ocamlopt.byte
 flags = "-shared"
 program= "Plugin_1_0_0.cmxs"
 module = ""
 all_modules = "Plugin_1_0_0.ml"
-*14 ocamlopt.byte
+**14 ocamlopt.byte
 flags = "-shared"
 program= "Plugin_1_0_0_0.cmxs"
 module = ""
 all_modules = "Plugin_1_0_0_0.ml"
-*15 ocamlopt.byte
+**15 ocamlopt.byte
 flags = "-shared"
 program= "Plugin_1_1.cmxs"
 module = ""
 all_modules = "Plugin_1_1.ml"
-*16 ocamlopt.byte
+**16 ocamlopt.byte
 flags = "-shared"
 program= "Plugin_1_2.cmxs"
 module = ""
 all_modules = "Plugin_1_2.ml"
-*17 ocamlopt.byte
+**17 ocamlopt.byte
 flags = "-shared"
 program= "Plugin_1_2_0.cmxs"
 module = ""
 all_modules = "Plugin_1_2_0.ml"
-*18 ocamlopt.byte
+**18 ocamlopt.byte
 flags = "-shared"
 program= "Plugin_1_2_0_0.cmxs"
 module = ""
 all_modules = "Plugin_1_2_0_0.ml"
-*19 ocamlopt.byte
+**19 ocamlopt.byte
 flags = "-shared"
 program= "Plugin_1_2_1.cmxs"
 module = ""
 all_modules = "Plugin_1_2_1.ml"
-*20 ocamlopt.byte
+**20 ocamlopt.byte
 flags = "-shared"
 program= "Plugin_1_2_2.cmxs"
 module = ""
 all_modules = "Plugin_1_2_2.ml"
-*21 ocamlopt.byte
+**21 ocamlopt.byte
 flags = "-shared"
 program= "Plugin_1_2_2_0.cmxs"
 module = ""
 all_modules = "Plugin_1_2_2_0.ml"
-*22 ocamlopt.byte
+**22 ocamlopt.byte
 flags = "-shared"
 program= "Plugin_1_2_3.cmxs"
 module = ""
 all_modules = "Plugin_1_2_3.ml"
-*23 ocamlopt.byte
+**23 ocamlopt.byte
 flags = "-shared"
 program= "Plugin_1_2_3_0.cmxs"
 module = ""
 all_modules = "Plugin_1_2_3_0.ml"
-*24 ocamlopt.byte
+**24 ocamlopt.byte
 flags = ""
 module = "main.ml"
-*25 ocamlopt.byte
+**25 ocamlopt.byte
 program = "./main.exe"
 libraries="dynlink"
 all_modules = "store.cmx main.cmx"
 module = ""
-*26 run
-*27 check-program-output
+**26 run
+**27 check-program-output
 *)
 
 (*  This module and all plugin modules are generated by a call to test_generator.ml with parameters:
diff --git a/testsuite/tests/lib-dynlink-initializers/test10_main.byte.reference b/testsuite/tests/lib-dynlink-initializers/test10_main.byte.reference
index f9157e7c43..01165c2489 100755
--- a/testsuite/tests/lib-dynlink-initializers/test10_main.byte.reference
+++ b/testsuite/tests/lib-dynlink-initializers/test10_main.byte.reference
@@ -3,10 +3,10 @@ Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
 Called from Test10_plugin.g in file "test10_plugin.ml", line 3, characters 2-21
 Called from Test10_plugin.f in file "test10_plugin.ml", line 6, characters 2-6
 Called from Test10_plugin in file "test10_plugin.ml", line 10, characters 2-6
-Called from Dynlink.Bytecode.run in file "otherlibs/dynlink/dynlink.ml", line 149, characters 16-25
-Re-raised at Dynlink.Bytecode.run in file "otherlibs/dynlink/dynlink.ml", line 151, characters 6-137
-Called from Dynlink_common.Make.load.(fun) in file "otherlibs/dynlink/dynlink_common.ml", line 363, characters 13-56
+Called from Dynlink.Bytecode.run in file "otherlibs/dynlink/dynlink.ml", line 152, characters 16-25
+Re-raised at Dynlink.Bytecode.run in file "otherlibs/dynlink/dynlink.ml", line 154, characters 6-137
+Called from Dynlink_common.Make.load.(fun) in file "otherlibs/dynlink/dynlink_common.ml", line 372, characters 13-56
 Called from Stdlib__List.iter in file "list.ml", line 112, characters 12-15
-Called from Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 359, characters 8-392
-Re-raised at Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 372, characters 8-17
+Called from Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 368, characters 8-392
+Re-raised at Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 381, characters 8-17
 Called from Test10_main in file "test10_main.ml", line 51, characters 13-69
diff --git a/testsuite/tests/lib-dynlink-initializers/test10_main.native.reference b/testsuite/tests/lib-dynlink-initializers/test10_main.native.reference
index 29346d3089..b2ba8773d8 100755
--- a/testsuite/tests/lib-dynlink-initializers/test10_main.native.reference
+++ b/testsuite/tests/lib-dynlink-initializers/test10_main.native.reference
@@ -1,10 +1,14 @@
 Error: Failure("Plugin error")
-Raised by primitive operation at Dynlink.Native.run.(fun) in file "otherlibs/dynlink/native/dynlink.ml", line 85, characters 12-29
+Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
+Called from Test10_plugin.g in file "test10_plugin.ml", line 2, characters 15-38
+Called from Test10_plugin in file "test10_plugin.ml", line 10, characters 2-6
+Called from Dynlink.Native.run.(fun) in file "otherlibs/dynlink/native/dynlink.ml", line 85, characters 12-29
+Called from Dynlink.Native.run.(fun) in file "otherlibs/dynlink/native/dynlink.ml", line 85, characters 12-29
 Re-raised at Dynlink.Native.run.(fun) in file "otherlibs/dynlink/native/dynlink.ml", line 87, characters 10-149
 Called from Stdlib__List.iter in file "list.ml", line 112, characters 12-15
-Called from Dynlink_common.Make.load.(fun) in file "otherlibs/dynlink/dynlink_common.ml", line 363, characters 13-56
+Called from Dynlink_common.Make.load.(fun) in file "otherlibs/dynlink/dynlink_common.ml", line 372, characters 13-56
 Called from Stdlib__List.iter in file "list.ml", line 112, characters 12-15
-Called from Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 359, characters 8-392
-Re-raised at Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 372, characters 8-17
-Called from Dynlink_common.Make.loadfile in file "otherlibs/dynlink/dynlink_common.ml" (inlined), line 374, characters 26-45
+Called from Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 368, characters 8-392
+Re-raised at Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 381, characters 8-17
+Called from Dynlink_common.Make.loadfile in file "otherlibs/dynlink/dynlink_common.ml" (inlined), line 383, characters 26-45
 Called from Test10_main in file "test10_main.ml", line 49, characters 30-87
diff --git a/testsuite/tests/lib-format/domains.ml b/testsuite/tests/lib-format/domains.ml
index 941aa681cf..0daaad5171 100644
--- a/testsuite/tests/lib-format/domains.ml
+++ b/testsuite/tests/lib-format/domains.ml
@@ -1,4 +1,7 @@
-(* TEST *)
+(* TEST
+* skip
+reason = "OCaml 5 only"
+*)
 
 (** Test that domains stdout and stderr are flushed at domain exit *)
 
diff --git a/testsuite/tests/lib-format/mc_pr586_par.ml b/testsuite/tests/lib-format/mc_pr586_par.ml
index 456a306ce7..da5c148416 100644
--- a/testsuite/tests/lib-format/mc_pr586_par.ml
+++ b/testsuite/tests/lib-format/mc_pr586_par.ml
@@ -1,4 +1,7 @@
-(* TEST *)
+(* TEST
+   * skip
+   reason = "OCaml 5 only"
+*)
 
 let () =
   let domains = Array.init 7 (fun i ->
diff --git a/testsuite/tests/lib-format/mc_pr586_par2.ml b/testsuite/tests/lib-format/mc_pr586_par2.ml
index 0ead3627b5..8a96be1456 100644
--- a/testsuite/tests/lib-format/mc_pr586_par2.ml
+++ b/testsuite/tests/lib-format/mc_pr586_par2.ml
@@ -1,4 +1,7 @@
-(* TEST *)
+(* TEST
+   * skip
+   reason = "OCaml 5 only"
+*)
 
 let () =
   let fmt_key = Format.synchronized_formatter_of_out_channel stdout in
diff --git a/testsuite/tests/lib-marshal/intext_par.ml b/testsuite/tests/lib-marshal/intext_par.ml
index 2efb846665..68ad0e1edb 100644
--- a/testsuite/tests/lib-marshal/intext_par.ml
+++ b/testsuite/tests/lib-marshal/intext_par.ml
@@ -1,5 +1,7 @@
 (* TEST
    modules = "intextaux_par.c"
+   * skip
+   reason = "OCaml 5 only"
 *)
 
 (* Test for output_value / input_value *)
diff --git a/testsuite/tests/lib-obj/reachable_words_np.ml b/testsuite/tests/lib-obj/reachable_words_np.ml
new file mode 100644
index 0000000000..8a50268d20
--- /dev/null
+++ b/testsuite/tests/lib-obj/reachable_words_np.ml
@@ -0,0 +1,21 @@
+(* TEST
+ * naked_pointers
+ ** bytecode
+ ** native
+*)
+
+let native =
+  match Sys.backend_type with
+  | Sys.Native -> true
+  | Sys.Bytecode -> false
+  | Sys.Other s -> print_endline s; assert false
+
+let size x = Obj.reachable_words (Obj.repr x)
+
+let expect_size s x =
+  let i = size x in
+  if i <> s then
+    Printf.printf "size = %i; expected = %i\n%!" i s
+
+let () =
+  expect_size (if native then 0 else 3) (1, 2)
diff --git a/testsuite/tests/lib-random/parallel.ml b/testsuite/tests/lib-random/parallel.ml
index 68f567abec..90a78e2250 100644
--- a/testsuite/tests/lib-random/parallel.ml
+++ b/testsuite/tests/lib-random/parallel.ml
@@ -1,8 +1,10 @@
 (* TEST
    include unix
-   * libunix
-   ** bytecode
-   ** native
+   * skip
+   reason = "OCaml 5 only"
+   ** libunix
+   *** bytecode
+   *** native
  *)
 
 let () = Random.init 42
diff --git a/testsuite/tests/lib-runtime-events/test.ml b/testsuite/tests/lib-runtime-events/test.ml
index db08937089..8ccaccdf25 100644
--- a/testsuite/tests/lib-runtime-events/test.ml
+++ b/testsuite/tests/lib-runtime-events/test.ml
@@ -1,6 +1,8 @@
 (* TEST
 modules = "stubs.c"
 include runtime_events
+* skip
+reason = "OCaml 5 only"
 *)
 
 external start_runtime_events : unit -> unit = "start_runtime_events"
diff --git a/testsuite/tests/lib-runtime-events/test_caml.ml b/testsuite/tests/lib-runtime-events/test_caml.ml
index 1e96998149..6cc9474f2e 100644
--- a/testsuite/tests/lib-runtime-events/test_caml.ml
+++ b/testsuite/tests/lib-runtime-events/test_caml.ml
@@ -1,5 +1,7 @@
 (* TEST
 include runtime_events
+* skip
+reason = "OCaml 5 only"
 *)
 open Runtime_events
 
diff --git a/testsuite/tests/lib-runtime-events/test_caml_counters.ml b/testsuite/tests/lib-runtime-events/test_caml_counters.ml
index 73b30a0eab..a491d089ff 100644
--- a/testsuite/tests/lib-runtime-events/test_caml_counters.ml
+++ b/testsuite/tests/lib-runtime-events/test_caml_counters.ml
@@ -1,5 +1,7 @@
 (* TEST
 include runtime_events
+* skip
+reason = "OCaml 5 only"
 *)
 open Runtime_events
 
diff --git a/testsuite/tests/lib-runtime-events/test_caml_exception.ml b/testsuite/tests/lib-runtime-events/test_caml_exception.ml
index e1df5aee0b..6738603ddd 100644
--- a/testsuite/tests/lib-runtime-events/test_caml_exception.ml
+++ b/testsuite/tests/lib-runtime-events/test_caml_exception.ml
@@ -1,5 +1,7 @@
 (* TEST
 include runtime_events
+* skip
+reason = "OCaml 5 only"
 *)
 open Runtime_events
 
diff --git a/testsuite/tests/lib-runtime-events/test_caml_parallel.ml b/testsuite/tests/lib-runtime-events/test_caml_parallel.ml
index 3cd4752282..dbcdf76434 100644
--- a/testsuite/tests/lib-runtime-events/test_caml_parallel.ml
+++ b/testsuite/tests/lib-runtime-events/test_caml_parallel.ml
@@ -1,5 +1,7 @@
 (* TEST
 include runtime_events
+* skip
+reason = "OCaml 5 only"
 *)
 open Runtime_events
 
diff --git a/testsuite/tests/lib-runtime-events/test_caml_reentry.ml b/testsuite/tests/lib-runtime-events/test_caml_reentry.ml
index d69042e354..724466a63b 100644
--- a/testsuite/tests/lib-runtime-events/test_caml_reentry.ml
+++ b/testsuite/tests/lib-runtime-events/test_caml_reentry.ml
@@ -1,5 +1,7 @@
 (* TEST
 include runtime_events
+* skip
+reason = "OCaml 5 only"
 *)
 open Runtime_events
 
diff --git a/testsuite/tests/lib-runtime-events/test_caml_runparams.ml b/testsuite/tests/lib-runtime-events/test_caml_runparams.ml
index a574e7d341..4dc607eed3 100644
--- a/testsuite/tests/lib-runtime-events/test_caml_runparams.ml
+++ b/testsuite/tests/lib-runtime-events/test_caml_runparams.ml
@@ -1,6 +1,8 @@
 (* TEST
 include runtime_events
 ocamlrunparam += ",e=4"
+* skip
+reason = "OCaml 5 only"
 *)
 
 (* We set the ring buffer size smaller and witness that we do indeed
diff --git a/testsuite/tests/lib-runtime-events/test_caml_slot_reuse.ml b/testsuite/tests/lib-runtime-events/test_caml_slot_reuse.ml
index 34b034a8e8..8656ca2e59 100644
--- a/testsuite/tests/lib-runtime-events/test_caml_slot_reuse.ml
+++ b/testsuite/tests/lib-runtime-events/test_caml_slot_reuse.ml
@@ -1,5 +1,7 @@
 (* TEST
 include runtime_events
+* skip
+reason = "OCaml 5 only"
 *)
 open Runtime_events
 
diff --git a/testsuite/tests/lib-runtime-events/test_caml_stubs_gc.ml b/testsuite/tests/lib-runtime-events/test_caml_stubs_gc.ml
index 35ddd983a1..d63066e646 100644
--- a/testsuite/tests/lib-runtime-events/test_caml_stubs_gc.ml
+++ b/testsuite/tests/lib-runtime-events/test_caml_stubs_gc.ml
@@ -1,5 +1,7 @@
 (* TEST
 include runtime_events
+* skip
+reason = "OCaml 5 only"
 *)
 open Runtime_events
 
diff --git a/testsuite/tests/lib-runtime-events/test_env_start.ml b/testsuite/tests/lib-runtime-events/test_env_start.ml
index 6b6bca5b09..cbdf114e57 100644
--- a/testsuite/tests/lib-runtime-events/test_env_start.ml
+++ b/testsuite/tests/lib-runtime-events/test_env_start.ml
@@ -1,6 +1,8 @@
 (* TEST
 include runtime_events
 set OCAML_RUNTIME_EVENTS_START = "1"
+* skip
+reason = "OCaml 5 only"
 *)
 
 (* In this test the runtime_events should already be started by the environment
diff --git a/testsuite/tests/lib-runtime-events/test_external.ml b/testsuite/tests/lib-runtime-events/test_external.ml
index ecea4b7e13..4f363941f4 100644
--- a/testsuite/tests/lib-runtime-events/test_external.ml
+++ b/testsuite/tests/lib-runtime-events/test_external.ml
@@ -1,9 +1,11 @@
 (* TEST
    include runtime_events
    include unix
-   * libunix
-   ** bytecode
-   ** native *)
+   * skip
+   reason = "OCaml 5 only"
+   ** libunix
+   *** bytecode
+   *** native *)
 
 let got_major = ref false
 let got_minor = ref false
diff --git a/testsuite/tests/lib-runtime-events/test_external_preserve.ml b/testsuite/tests/lib-runtime-events/test_external_preserve.ml
index 18c2ac578b..76d66b1b66 100644
--- a/testsuite/tests/lib-runtime-events/test_external_preserve.ml
+++ b/testsuite/tests/lib-runtime-events/test_external_preserve.ml
@@ -2,9 +2,11 @@
   include runtime_events
   include unix
   set OCAML_RUNTIME_EVENTS_PRESERVE = "1"
-  * libunix
-  ** bytecode
-  ** native *)
+  * skip
+  reason = "OCaml 5 only"
+  ** libunix
+  *** bytecode
+  *** native *)
 
   (* this tests the preservation of ring buffers after termination *)
 
diff --git a/testsuite/tests/lib-runtime-events/test_fork.ml b/testsuite/tests/lib-runtime-events/test_fork.ml
index 87f556a659..097905b626 100644
--- a/testsuite/tests/lib-runtime-events/test_fork.ml
+++ b/testsuite/tests/lib-runtime-events/test_fork.ml
@@ -1,9 +1,11 @@
 (* TEST
    include runtime_events
    include unix
-   * libunix
-   ** bytecode
-   ** native *)
+   * skip
+   reason = "OCaml 5 only"
+   ** libunix
+   *** bytecode
+   *** native *)
 
 let got_start = ref false
 let got_fork_child = ref false
diff --git a/testsuite/tests/lib-runtime-events/test_instrumented.ml b/testsuite/tests/lib-runtime-events/test_instrumented.ml
index 7a41c49b2a..63aded8114 100644
--- a/testsuite/tests/lib-runtime-events/test_instrumented.ml
+++ b/testsuite/tests/lib-runtime-events/test_instrumented.ml
@@ -1,5 +1,7 @@
 (* TEST
-  * native
+  * skip
+  reason = "OCaml 5 only"
+  ** native
     include runtime_events
     flags = "-runtime-variant=i"
 *)
diff --git a/testsuite/tests/lib-str/parallel.ml b/testsuite/tests/lib-str/parallel.ml
index 23f2a5f7de..08055698e7 100644
--- a/testsuite/tests/lib-str/parallel.ml
+++ b/testsuite/tests/lib-str/parallel.ml
@@ -1,8 +1,10 @@
 (* TEST
-* hasstr
+* skip
+reason = "OCaml 5 only"
+** hasstr
 include str
-** bytecode
-** native
+*** bytecode
+*** native
 *)
 
 let total = Atomic.make 0
diff --git a/testsuite/tests/lib-sync/prodcons.ml b/testsuite/tests/lib-sync/prodcons.ml
index 2e2c09756c..093d8740be 100644
--- a/testsuite/tests/lib-sync/prodcons.ml
+++ b/testsuite/tests/lib-sync/prodcons.ml
@@ -1,4 +1,6 @@
 (* TEST
+   * skip
+   reason = "OCaml 5 only"
 *)
 
 (* Classic producer-consumer *)
diff --git a/testsuite/tests/lib-sync/trylock.ml b/testsuite/tests/lib-sync/trylock.ml
index 314f1142ca..b4719fff04 100644
--- a/testsuite/tests/lib-sync/trylock.ml
+++ b/testsuite/tests/lib-sync/trylock.ml
@@ -1,4 +1,6 @@
 (* TEST
+   * skip
+   reason = "OCaml 5 only"
 *)
 
 (* Test Mutex.try_lock *)
diff --git a/testsuite/tests/lib-sync/trylock2.ml b/testsuite/tests/lib-sync/trylock2.ml
index b31ace08b5..e29ee93f9e 100644
--- a/testsuite/tests/lib-sync/trylock2.ml
+++ b/testsuite/tests/lib-sync/trylock2.ml
@@ -1,4 +1,6 @@
 (* TEST
+   * skip
+   reason = "OCaml 5 only"
 *)
 
 (* Test Mutex.try_lock *)
diff --git a/testsuite/tests/lib-systhreads/boundscheck.ml b/testsuite/tests/lib-systhreads/boundscheck.ml
index 216dcebae7..124d054ec7 100644
--- a/testsuite/tests/lib-systhreads/boundscheck.ml
+++ b/testsuite/tests/lib-systhreads/boundscheck.ml
@@ -1,9 +1,11 @@
 (* TEST
 
 include systhreads
-* hassysthreads
-** bytecode
-** native
+* skip
+reason = "OCaml 5 only"
+** hassysthreads
+*** bytecode
+*** native
 
 *)
 
diff --git a/testsuite/tests/lib-systhreads/multicore_lifecycle.ml b/testsuite/tests/lib-systhreads/multicore_lifecycle.ml
index f481464906..0138046146 100644
--- a/testsuite/tests/lib-systhreads/multicore_lifecycle.ml
+++ b/testsuite/tests/lib-systhreads/multicore_lifecycle.ml
@@ -1,8 +1,10 @@
 (* TEST
-* hassysthreads
+* skip
+reason = "OCaml 5 only"
+** hassysthreads
 include systhreads
-** bytecode
-** native
+*** bytecode
+*** native
 *)
 
 let _ =
diff --git a/testsuite/tests/lib-systhreads/test_c_thread_register.ml b/testsuite/tests/lib-systhreads/test_c_thread_register.ml
index a8ec98aa9a..784fe6945f 100644
--- a/testsuite/tests/lib-systhreads/test_c_thread_register.ml
+++ b/testsuite/tests/lib-systhreads/test_c_thread_register.ml
@@ -2,9 +2,10 @@
    modules = "test_c_thread_register_cstubs.c"
    * hassysthreads
    include systhreads
-   ** not-bsd
-   *** bytecode
-   *** native
+   ** not-windows
+   *** not-bsd
+   **** bytecode
+   **** native
 *)
 
 (* spins a external thread from C and register it to the OCaml runtime *)
diff --git a/testsuite/tests/lib-threads/uncaught_exception_handler.reference b/testsuite/tests/lib-threads/uncaught_exception_handler.reference
index 23ff3ade39..cd68534b54 100644
--- a/testsuite/tests/lib-threads/uncaught_exception_handler.reference
+++ b/testsuite/tests/lib-threads/uncaught_exception_handler.reference
@@ -1,15 +1,15 @@
 Thread 1 killed on uncaught exception Uncaught_exception_handler.CallbackExn
 Raised at Uncaught_exception_handler.fn in file "uncaught_exception_handler.ml", line 28, characters 12-113
-Called from Thread.create.(fun) in file "thread.ml", line 48, characters 8-14
+Called from Thread.create.(fun) in file "thread.ml", line 55, characters 8-14
 [thread 2] caught Uncaught_exception_handler.CallbackExn
 Raised at Uncaught_exception_handler.fn in file "uncaught_exception_handler.ml", line 28, characters 12-113
-Called from Thread.create.(fun) in file "thread.ml", line 48, characters 8-14
+Called from Thread.create.(fun) in file "thread.ml", line 55, characters 8-14
 Thread 2 killed on uncaught exception Uncaught_exception_handler.CallbackExn
 Raised at Uncaught_exception_handler.fn in file "uncaught_exception_handler.ml", line 28, characters 12-113
-Called from Thread.create.(fun) in file "thread.ml", line 48, characters 8-14
+Called from Thread.create.(fun) in file "thread.ml", line 55, characters 8-14
 Thread 2 uncaught exception handler raised Uncaught_exception_handler.UncaughtHandlerExn
 Raised at Uncaught_exception_handler.handler in file "uncaught_exception_handler.ml", line 26, characters 2-17
-Called from Thread.create.(fun) in file "thread.ml", line 57, characters 10-41
+Called from Thread.create.(fun) in file "thread.ml", line 64, characters 10-41
 [thread 3] caught Uncaught_exception_handler.CallbackExn
 Raised at Uncaught_exception_handler.fn in file "uncaught_exception_handler.ml", line 28, characters 12-113
-Called from Thread.create.(fun) in file "thread.ml", line 48, characters 8-14
+Called from Thread.create.(fun) in file "thread.ml", line 55, characters 8-14
diff --git a/testsuite/tests/lib-unix/common/multicore_fork_domain_alone.ml b/testsuite/tests/lib-unix/common/multicore_fork_domain_alone.ml
index 077a3dba66..78112d293e 100644
--- a/testsuite/tests/lib-unix/common/multicore_fork_domain_alone.ml
+++ b/testsuite/tests/lib-unix/common/multicore_fork_domain_alone.ml
@@ -1,9 +1,11 @@
 (* TEST
 include unix
-* hasunix
-** not-windows
-*** bytecode
-*** native
+* skip
+reason = "OCaml 5 only"
+** hasunix
+*** not-windows
+**** bytecode
+**** native
 *)
 
 (* on Multicore, fork is not allowed is another domain is, and was running. *)
diff --git a/testsuite/tests/lib-unix/common/multicore_fork_domain_alone2.ml b/testsuite/tests/lib-unix/common/multicore_fork_domain_alone2.ml
index 929ed5ecf7..61f75dce4a 100644
--- a/testsuite/tests/lib-unix/common/multicore_fork_domain_alone2.ml
+++ b/testsuite/tests/lib-unix/common/multicore_fork_domain_alone2.ml
@@ -1,9 +1,11 @@
 (* TEST
 include unix
-* hasunix
-** not-windows
-*** bytecode
-*** native
+* skip
+reason = "OCaml 5 only"
+** hasunix
+*** not-windows
+**** bytecode
+**** native
 *)
 
 (* on Multicore, fork is not allowed is another domain is, and was running. *)
diff --git a/testsuite/tests/lib-unix/win-channel-of/parallel_channel_of.ml b/testsuite/tests/lib-unix/win-channel-of/parallel_channel_of.ml
index 01ae4df1c3..fb17641f40 100644
--- a/testsuite/tests/lib-unix/win-channel-of/parallel_channel_of.ml
+++ b/testsuite/tests/lib-unix/win-channel-of/parallel_channel_of.ml
@@ -1,9 +1,11 @@
 (* TEST
 modules = "fd_of_channel.c"
-* libwin32unix
+reason = "OCaml 5 only"
+* skip
+** libwin32unix
 include unix
-** bytecode
-** native
+*** bytecode
+*** native
 *)
 
 external fd_of_in_channel: in_channel -> int = "caml_fd_of_channel"
diff --git a/testsuite/tests/lib-unix/win-symlink/parallel_symlink.ml b/testsuite/tests/lib-unix/win-symlink/parallel_symlink.ml
index d27e7db02d..651e071303 100644
--- a/testsuite/tests/lib-unix/win-symlink/parallel_symlink.ml
+++ b/testsuite/tests/lib-unix/win-symlink/parallel_symlink.ml
@@ -2,8 +2,10 @@
 * libwin32unix
 include unix
 ** has_symlink
-*** bytecode
-*** native
+*** skip
+reason = "OCaml 5 only"
+**** bytecode
+**** native
 *)
 
 let create_symlink barrier src dst () =
diff --git a/testsuite/tests/memory-model/forbidden.ml b/testsuite/tests/memory-model/forbidden.ml
index 5504d94f04..32a8d9fa8c 100644
--- a/testsuite/tests/memory-model/forbidden.ml
+++ b/testsuite/tests/memory-model/forbidden.ml
@@ -1,8 +1,10 @@
 (* TEST
   modules="opt.ml barrier.ml hist.ml shared.ml run.ml outcome.ml"
-  * not-bsd
-  ** bytecode
-  ** native
+  * skip
+  reason = "OCaml 5 only"
+  ** not-bsd
+  *** bytecode
+  *** native
 *)
 
 (* Memory model test:
diff --git a/testsuite/tests/memory-model/publish.ml b/testsuite/tests/memory-model/publish.ml
index fbfaa2870b..2a72134da2 100644
--- a/testsuite/tests/memory-model/publish.ml
+++ b/testsuite/tests/memory-model/publish.ml
@@ -1,8 +1,10 @@
 (* TEST
   modules="opt.ml barrier.ml hist.ml shared.ml run.ml outcome.ml"
-  * not-bsd
-  ** bytecode
-  ** native
+  * skip
+  reason = "OCaml 5 only"
+  ** not-bsd
+  *** bytecode
+  *** native
 *)
 
 (* Memory model: test the _publish idiom *)
diff --git a/testsuite/tests/parallel/atomics.ml b/testsuite/tests/parallel/atomics.ml
index 823fb32dc2..de7aa2a5b4 100644
--- a/testsuite/tests/parallel/atomics.ml
+++ b/testsuite/tests/parallel/atomics.ml
@@ -1,4 +1,6 @@
 (* TEST
+* skip
+reason = "OCaml 5 only"
 *)
 
 type u = U of unit
diff --git a/testsuite/tests/parallel/backup_thread.ml b/testsuite/tests/parallel/backup_thread.ml
index 05b06cc47c..c69f164ce7 100644
--- a/testsuite/tests/parallel/backup_thread.ml
+++ b/testsuite/tests/parallel/backup_thread.ml
@@ -1,8 +1,10 @@
 (* TEST
-* hasunix
+* skip
+reason = "OCaml 5 only"
+** hasunix
 include unix
-** bytecode
-** native
+*** bytecode
+*** native
 *)
 
 
diff --git a/testsuite/tests/parallel/backup_thread_pipe.ml b/testsuite/tests/parallel/backup_thread_pipe.ml
index 41fd101c1f..d0c5bb6e35 100644
--- a/testsuite/tests/parallel/backup_thread_pipe.ml
+++ b/testsuite/tests/parallel/backup_thread_pipe.ml
@@ -1,8 +1,10 @@
 (* TEST
-* hasunix
+* skip
+reason = "OCaml 5 only"
+** hasunix
 include unix
-** bytecode
-** native
+*** bytecode
+*** native
 *)
 
 
diff --git a/testsuite/tests/parallel/constpromote.ml b/testsuite/tests/parallel/constpromote.ml
index 9bf7ede7a3..89e2f9aef4 100644
--- a/testsuite/tests/parallel/constpromote.ml
+++ b/testsuite/tests/parallel/constpromote.ml
@@ -1,4 +1,6 @@
 (* TEST
+* skip
+reason = "OCaml 5 only"
 *)
 
 (* when run with the bytecode debug runtime, this test
diff --git a/testsuite/tests/parallel/deadcont.ml b/testsuite/tests/parallel/deadcont.ml
index fcdfbec210..d162cd1993 100644
--- a/testsuite/tests/parallel/deadcont.ml
+++ b/testsuite/tests/parallel/deadcont.ml
@@ -1,4 +1,6 @@
 (* TEST
+* skip
+reason = "OCaml 5 only"
 *)
 
 (*
diff --git a/testsuite/tests/parallel/domain_dls.ml b/testsuite/tests/parallel/domain_dls.ml
index 72f4ddf0bd..3d313a288a 100644
--- a/testsuite/tests/parallel/domain_dls.ml
+++ b/testsuite/tests/parallel/domain_dls.ml
@@ -1,4 +1,6 @@
 (* TEST
+* skip
+reason = "OCaml 5 only"
 *)
 
 let check_dls () =
diff --git a/testsuite/tests/parallel/domain_dls2.ml b/testsuite/tests/parallel/domain_dls2.ml
index ae301bda36..fe19776342 100644
--- a/testsuite/tests/parallel/domain_dls2.ml
+++ b/testsuite/tests/parallel/domain_dls2.ml
@@ -1,4 +1,6 @@
 (* TEST
+* skip
+reason = "OCaml 5 only"
 *)
 
 let _ =
diff --git a/testsuite/tests/parallel/domain_id.ml b/testsuite/tests/parallel/domain_id.ml
index 540ca905fd..a38477147b 100644
--- a/testsuite/tests/parallel/domain_id.ml
+++ b/testsuite/tests/parallel/domain_id.ml
@@ -1,4 +1,6 @@
 (* TEST
+* skip
+reason = "OCaml 5 only"
 *)
 
 open Domain
diff --git a/testsuite/tests/parallel/domain_parallel_spawn_burn.ml b/testsuite/tests/parallel/domain_parallel_spawn_burn.ml
index ecc9d0b78f..2b6369bc3b 100644
--- a/testsuite/tests/parallel/domain_parallel_spawn_burn.ml
+++ b/testsuite/tests/parallel/domain_parallel_spawn_burn.ml
@@ -1,4 +1,6 @@
 (* TEST
+* skip
+reason = "OCaml 5 only"
 *)
 
 open Domain
diff --git a/testsuite/tests/parallel/domain_parallel_spawn_burn_gc_set.ml b/testsuite/tests/parallel/domain_parallel_spawn_burn_gc_set.ml
index 883ab1a5ab..245b0b73fb 100644
--- a/testsuite/tests/parallel/domain_parallel_spawn_burn_gc_set.ml
+++ b/testsuite/tests/parallel/domain_parallel_spawn_burn_gc_set.ml
@@ -1,4 +1,6 @@
 (* TEST
+* skip
+reason = "OCaml 5 only"
 *)
 
 open Domain
diff --git a/testsuite/tests/parallel/domain_serial_spawn_burn.ml b/testsuite/tests/parallel/domain_serial_spawn_burn.ml
index aeac4f71f7..ea63910f2f 100644
--- a/testsuite/tests/parallel/domain_serial_spawn_burn.ml
+++ b/testsuite/tests/parallel/domain_serial_spawn_burn.ml
@@ -1,8 +1,10 @@
 (* TEST
-* hasunix
+* skip
+reason = "OCaml 5 only"
+** hasunix
 include unix
-** bytecode
-** native
+*** bytecode
+*** native
 *)
 
 open Domain
diff --git a/testsuite/tests/parallel/fib_threads.ml b/testsuite/tests/parallel/fib_threads.ml
index f6005729b7..3ab3dde90d 100644
--- a/testsuite/tests/parallel/fib_threads.ml
+++ b/testsuite/tests/parallel/fib_threads.ml
@@ -1,8 +1,10 @@
 (* TEST
-* hassysthreads
+* skip
+reason = "OCaml 5 only"
+** hassysthreads
 include systhreads
-** bytecode
-** native
+*** bytecode
+*** native
 *)
 
 
diff --git a/testsuite/tests/parallel/join.ml b/testsuite/tests/parallel/join.ml
index ee85838527..f98dbcef64 100644
--- a/testsuite/tests/parallel/join.ml
+++ b/testsuite/tests/parallel/join.ml
@@ -1,4 +1,6 @@
 (* TEST
+* skip
+reason = "OCaml 5 only"
 *)
 
 let test_size =
diff --git a/testsuite/tests/parallel/major_gc_wait_backup.ml b/testsuite/tests/parallel/major_gc_wait_backup.ml
index e418500774..f11190aee3 100644
--- a/testsuite/tests/parallel/major_gc_wait_backup.ml
+++ b/testsuite/tests/parallel/major_gc_wait_backup.ml
@@ -1,8 +1,10 @@
 (* TEST
-* hasunix
+* skip
+reason = "OCaml 5 only"
+** hasunix
 include unix
-** native
-** bytecode
+*** native
+*** bytecode
 *)
 
 type 'a tree = Empty | Node of 'a tree * 'a tree
diff --git a/testsuite/tests/parallel/mctest.ml b/testsuite/tests/parallel/mctest.ml
index c5d82d2dbd..bbebf9d4b8 100644
--- a/testsuite/tests/parallel/mctest.ml
+++ b/testsuite/tests/parallel/mctest.ml
@@ -1,8 +1,10 @@
 (* TEST
-* hasunix
+* skip
+reason = "OCaml 5 only"
+** hasunix
 include unix
-** bytecode
-** native
+*** bytecode
+*** native
 *)
 
 (*
diff --git a/testsuite/tests/parallel/multicore_systhreads.ml b/testsuite/tests/parallel/multicore_systhreads.ml
index 2f0fcf20b0..5ce5ea86ea 100644
--- a/testsuite/tests/parallel/multicore_systhreads.ml
+++ b/testsuite/tests/parallel/multicore_systhreads.ml
@@ -1,8 +1,10 @@
 (* TEST
-* hassysthreads
+* skip
+reason = "OCaml 5 only"
+** hassysthreads
 include systhreads
-** bytecode
-** native
+*** bytecode
+*** native
 *)
 
 
diff --git a/testsuite/tests/parallel/pingpong.ml b/testsuite/tests/parallel/pingpong.ml
index 1f29cb6b8b..70b7ed6f69 100644
--- a/testsuite/tests/parallel/pingpong.ml
+++ b/testsuite/tests/parallel/pingpong.ml
@@ -1,4 +1,6 @@
 (* TEST
+* skip
+reason = "OCaml 5 only"
 *)
 
 let r = ref (Some 0)
diff --git a/testsuite/tests/parallel/poll.ml b/testsuite/tests/parallel/poll.ml
index 4248ba10cf..98255fb08d 100644
--- a/testsuite/tests/parallel/poll.ml
+++ b/testsuite/tests/parallel/poll.ml
@@ -1,8 +1,10 @@
 (* TEST
-* hasunix
+* skip
+reason = "OCaml 5 only"
+** hasunix
 include unix
-** bytecode
-** native
+*** bytecode
+*** native
 *)
 
 let continue = Atomic.make true
diff --git a/testsuite/tests/parallel/prodcons_domains.ml b/testsuite/tests/parallel/prodcons_domains.ml
index 2e2c09756c..2b86809df1 100644
--- a/testsuite/tests/parallel/prodcons_domains.ml
+++ b/testsuite/tests/parallel/prodcons_domains.ml
@@ -1,4 +1,6 @@
 (* TEST
+* skip
+reason = "OCaml 5 only"
 *)
 
 (* Classic producer-consumer *)
diff --git a/testsuite/tests/parallel/recommended_domain_count.ml b/testsuite/tests/parallel/recommended_domain_count.ml
index 8aedeba202..cb2c93cbf6 100644
--- a/testsuite/tests/parallel/recommended_domain_count.ml
+++ b/testsuite/tests/parallel/recommended_domain_count.ml
@@ -1,5 +1,7 @@
 (* TEST
 modules = "recommended_domain_count_cstubs.c"
+* skip
+reason = "OCaml 5 only"
 *)
 
 external get_max_domains : unit -> int = "caml_get_max_domains"
diff --git a/testsuite/tests/parallel/recommended_domain_count_unix.ml b/testsuite/tests/parallel/recommended_domain_count_unix.ml
index f26038a765..9bab6ccab9 100644
--- a/testsuite/tests/parallel/recommended_domain_count_unix.ml
+++ b/testsuite/tests/parallel/recommended_domain_count_unix.ml
@@ -1,8 +1,10 @@
 (* TEST
-* hasunix
+* skip
+reason = "OCaml 5 only"
+** hasunix
 include unix
-** bytecode
-** native
+*** bytecode
+*** native
 *)
 
 let try_ext cmd =
diff --git a/testsuite/tests/parallel/tak.ml b/testsuite/tests/parallel/tak.ml
index a9b6874c4f..bdc4173266 100644
--- a/testsuite/tests/parallel/tak.ml
+++ b/testsuite/tests/parallel/tak.ml
@@ -1,4 +1,6 @@
 (* TEST
+   * skip
+   reason = "OCaml 5 only"
 *)
 
 (* filling minor heaps in parallel to trigger
diff --git a/testsuite/tests/parallel/test_c_thread_register.ml b/testsuite/tests/parallel/test_c_thread_register.ml
index 352424a377..9e2073c4ef 100644
--- a/testsuite/tests/parallel/test_c_thread_register.ml
+++ b/testsuite/tests/parallel/test_c_thread_register.ml
@@ -1,9 +1,11 @@
 (* TEST
+   * skip
+   reason = "OCaml 5 only"
    modules = "test_c_thread_register_cstubs.c"
-   * hassysthreads
+   ** hassysthreads
    include systhreads
-   ** bytecode
-   ** native
+   *** bytecode
+   *** native
 *)
 
 (* spins a external thread from C and register it to the OCaml runtime *)
diff --git a/testsuite/tests/parallel/test_issue_11094.ml b/testsuite/tests/parallel/test_issue_11094.ml
index ffc6d4bedd..8b9fb98c50 100644
--- a/testsuite/tests/parallel/test_issue_11094.ml
+++ b/testsuite/tests/parallel/test_issue_11094.ml
@@ -1,6 +1,8 @@
 (* TEST
-* bytecode
-* native
+* skip
+reason = "OCaml 5 only"
+** bytecode
+** native
 *)
 
 open Effect
diff --git a/testsuite/tests/regression/pr9326/gc_set.ml b/testsuite/tests/regression/pr9326/gc_set.ml
index 2570aec28e..e9d7dbcd4c 100644
--- a/testsuite/tests/regression/pr9326/gc_set.ml
+++ b/testsuite/tests/regression/pr9326/gc_set.ml
@@ -4,35 +4,32 @@
 open Gc
 
 let min_heap_sz = 524288 (* 512k *)
-let space_overhead = 70
-let stack_limit = 4194304 (* 4M *)
-let custom_major_ratio = 40
-let custom_minor_ratio = 99
-let custom_minor_max_size = 4096
+let maj_heap_inc = 4194304 (* 4M *)
 
 let _ =
   let g1 = Gc.get() in
   (* Do not use { g1 with ... }, so that the code will break if more fields
      are added to the Gc.control record type *)
   Gc.set { minor_heap_size = min_heap_sz;
-           major_heap_increment = g1.major_heap_increment;
-           space_overhead = space_overhead;
+           major_heap_increment = maj_heap_inc;
+           space_overhead = g1.space_overhead;
            verbose = g1.verbose;
            max_overhead = g1.max_overhead;
-           stack_limit = stack_limit;
+           stack_limit = g1.stack_limit;
            allocation_policy = g1.allocation_policy;
            window_size = g1.window_size;
-           custom_major_ratio = custom_major_ratio;
-           custom_minor_ratio = custom_minor_ratio;
-           custom_minor_max_size = custom_minor_max_size };
+           custom_major_ratio = g1.custom_major_ratio;
+           custom_minor_ratio = g1.custom_minor_ratio;
+           custom_minor_max_size = g1.custom_minor_max_size };
   let g2 = Gc.get() in
   assert (g2.minor_heap_size = min_heap_sz);
-  assert (g2.space_overhead = space_overhead);
+  assert (g2.major_heap_increment = maj_heap_inc);
+  assert (g2.space_overhead = g1.space_overhead);
   assert (g2.verbose = g1.verbose);
   assert (g2.max_overhead = g1.max_overhead);
-  assert (g2.stack_limit = stack_limit);
+  assert (g2.stack_limit = g1.stack_limit);
   assert (g2.allocation_policy = g1.allocation_policy);
   assert (g2.window_size = g1.window_size);
-  assert (g2.custom_major_ratio = custom_major_ratio);
-  assert (g2.custom_minor_ratio = custom_minor_ratio);
-  assert (g2.custom_minor_max_size = custom_minor_max_size)
+  assert (g2.custom_major_ratio = g1.custom_major_ratio);
+  assert (g2.custom_minor_ratio = g1.custom_minor_ratio);
+  assert (g2.custom_minor_max_size = g1.custom_minor_max_size)
diff --git a/testsuite/tests/runtime-naked-pointers/cstubs.c b/testsuite/tests/runtime-naked-pointers/cstubs.c
new file mode 100644
index 0000000000..e9315f3aea
--- /dev/null
+++ b/testsuite/tests/runtime-naked-pointers/cstubs.c
@@ -0,0 +1,20 @@
+#include <string.h>
+#include "caml/mlvalues.h"
+#include "caml/gc.h"
+#include "caml/memory.h"
+
+static int colors[4] = { Caml_white, Caml_gray, Caml_blue, Caml_black };
+
+value make_block(value header_size, value color, value size)
+{
+  intnat sz = Nativeint_val(size);
+  value * p = caml_stat_alloc((1 + sz) * sizeof(value));
+  p[0] = Make_header(Nativeint_val(header_size), 0, colors[Int_val(color)]);
+  memset(p + 1, 0x80, sz * sizeof(value));
+  return (value) (p + 1);
+}
+
+value make_raw_pointer (value v)
+{
+  return (value) Nativeint_val(v);
+}
diff --git a/testsuite/tests/runtime-naked-pointers/np.ml b/testsuite/tests/runtime-naked-pointers/np.ml
new file mode 100644
index 0000000000..1738934ff0
--- /dev/null
+++ b/testsuite/tests/runtime-naked-pointers/np.ml
@@ -0,0 +1,11 @@
+type color = White | Gray | Blue | Black
+
+external make_block: nativeint -> color -> nativeint -> Obj.t
+         = "make_block"
+
+external make_raw_pointer: nativeint -> Obj.t
+         = "make_raw_pointer"
+
+let do_gc root =
+  Gc.compact();   (* full major + compaction *)
+  root
diff --git a/testsuite/tests/runtime-naked-pointers/np1.ml b/testsuite/tests/runtime-naked-pointers/np1.ml
new file mode 100644
index 0000000000..be4c677a23
--- /dev/null
+++ b/testsuite/tests/runtime-naked-pointers/np1.ml
@@ -0,0 +1,12 @@
+(* TEST
+   modules = "cstubs.c np.ml"
+   * bytecode
+   * native
+*)
+
+open Np
+
+(* Out-of-heap object with black header is accepted even in no-naked-pointers
+   mode.  GC doesn't scan black objects. *)
+
+let x = do_gc [ make_block 100n Black 100n ]
diff --git a/testsuite/tests/runtime-naked-pointers/np2.ml b/testsuite/tests/runtime-naked-pointers/np2.ml
new file mode 100644
index 0000000000..f24c813c2b
--- /dev/null
+++ b/testsuite/tests/runtime-naked-pointers/np2.ml
@@ -0,0 +1,13 @@
+(* TEST
+   modules = "cstubs.c np.ml"
+   * bytecode
+   * native
+*)
+
+open Np
+
+(* Out-of-heap object with black header is accepted even in no-naked-pointers
+   mode.  GC doesn't scan black objects.  However, if the size in the
+   head is crazily big, the naked pointer detector will warn. *)
+
+let x = do_gc [ make_block (-1n) Black 100n ]
diff --git a/testsuite/tests/runtime-naked-pointers/np2.run b/testsuite/tests/runtime-naked-pointers/np2.run
new file mode 100755
index 0000000000..c03f6f688d
--- /dev/null
+++ b/testsuite/tests/runtime-naked-pointers/np2.run
@@ -0,0 +1,3 @@
+#!/bin/sh
+
+exec ${test_source_directory}/runtest.sh
diff --git a/testsuite/tests/runtime-naked-pointers/np3.ml b/testsuite/tests/runtime-naked-pointers/np3.ml
new file mode 100644
index 0000000000..d207279df1
--- /dev/null
+++ b/testsuite/tests/runtime-naked-pointers/np3.ml
@@ -0,0 +1,15 @@
+(* TEST
+   modules = "cstubs.c np.ml"
+   * naked_pointers
+   ** bytecode
+   ** native
+*)
+
+open Np
+
+(* Out-of-heap object with non-black header is OK in naked pointers mode only *)
+(* Note that the header size can be wrong as it should not be used by the GC *)
+
+let x = do_gc [ make_block 10000n White 10n;
+                make_block 1n Blue 0n;
+                make_block (-1n) Gray 5n ]
diff --git a/testsuite/tests/runtime-naked-pointers/np3.run b/testsuite/tests/runtime-naked-pointers/np3.run
new file mode 100755
index 0000000000..c03f6f688d
--- /dev/null
+++ b/testsuite/tests/runtime-naked-pointers/np3.run
@@ -0,0 +1,3 @@
+#!/bin/sh
+
+exec ${test_source_directory}/runtest.sh
diff --git a/testsuite/tests/runtime-naked-pointers/np4.ml b/testsuite/tests/runtime-naked-pointers/np4.ml
new file mode 100644
index 0000000000..98966ddffc
--- /dev/null
+++ b/testsuite/tests/runtime-naked-pointers/np4.ml
@@ -0,0 +1,13 @@
+(* TEST
+   modules = "cstubs.c np.ml"
+   * naked_pointers
+   ** bytecode
+   ** native
+*)
+
+open Np
+
+(* Null pointers and bad pointers outside the heap are OK
+   in naked pointers mode only *)
+
+let x = do_gc [ make_raw_pointer 0n; make_raw_pointer 42n ]
diff --git a/testsuite/tests/runtime-naked-pointers/np4.run b/testsuite/tests/runtime-naked-pointers/np4.run
new file mode 100755
index 0000000000..c03f6f688d
--- /dev/null
+++ b/testsuite/tests/runtime-naked-pointers/np4.run
@@ -0,0 +1,3 @@
+#!/bin/sh
+
+exec ${test_source_directory}/runtest.sh
diff --git a/testsuite/tests/runtime-naked-pointers/runtest.sh b/testsuite/tests/runtime-naked-pointers/runtest.sh
new file mode 100755
index 0000000000..f5d4df561c
--- /dev/null
+++ b/testsuite/tests/runtime-naked-pointers/runtest.sh
@@ -0,0 +1,10 @@
+#!/bin/sh
+
+if grep -q "#define NAKED_POINTERS_CHECKER" ${ocamlsrcdir}/runtime/caml/m.h \
+&& (echo ${program} | grep -q '\.opt')
+then
+  (${program} > ${output}) 2>&1 | grep -q '^Out-of-heap '
+  exit $?
+else
+  exec ${program} > ${output}
+fi
diff --git a/testsuite/tests/shapes/comp_units.ml b/testsuite/tests/shapes/comp_units.ml
index 32d7f72b5c..b043beafc6 100644
--- a/testsuite/tests/shapes/comp_units.ml
+++ b/testsuite/tests/shapes/comp_units.ml
@@ -25,7 +25,7 @@ module Mproj = Unit
 module F (X : sig type t end) = X
 [%%expect{|
 {
- "F"[module] -> Abs<.4>(X/278, X/278<.3>);
+ "F"[module] -> Abs<.4>(X/273, X/273<.3>);
  }
 module F : functor (X : sig type t end) -> sig type t = X.t end
 |}]
diff --git a/testsuite/tests/shapes/functors.ml b/testsuite/tests/shapes/functors.ml
index a3d7bfd659..77ead1d555 100644
--- a/testsuite/tests/shapes/functors.ml
+++ b/testsuite/tests/shapes/functors.ml
@@ -17,7 +17,7 @@ module type S = sig type t val x : t end
 module Falias (X : S) = X
 [%%expect{|
 {
- "Falias"[module] -> Abs<.4>(X/280, X/280<.3>);
+ "Falias"[module] -> Abs<.4>(X/275, X/275<.3>);
  }
 module Falias : functor (X : S) -> sig type t = X.t val x : t end
 |}]
@@ -29,10 +29,10 @@ end
 {
  "Finclude"[module] ->
    Abs<.6>
-      (X/284,
+      (X/279,
        {
-        "t"[type] -> X/284<.5> . "t"[type];
-        "x"[value] -> X/284<.5> . "x"[value];
+        "t"[type] -> X/279<.5> . "t"[type];
+        "x"[value] -> X/279<.5> . "x"[value];
         });
  }
 module Finclude : functor (X : S) -> sig type t = X.t val x : t end
@@ -45,7 +45,7 @@ end
 [%%expect{|
 {
  "Fredef"[module] ->
-   Abs<.10>(X/291, {
+   Abs<.10>(X/286, {
                     "t"[type] -> <.8>;
                     "x"[value] -> <.9>;
                     });
@@ -223,8 +223,8 @@ module Big_to_small1 : B2S = functor (X : Big) -> X
 [%%expect{|
 {
  "Big_to_small1"[module] ->
-   Abs<.40>(X/386, {<.39>
-                    "t"[type] -> X/386<.39> . "t"[type];
+   Abs<.40>(X/381, {<.39>
+                    "t"[type] -> X/381<.39> . "t"[type];
                     });
  }
 module Big_to_small1 : B2S
@@ -234,8 +234,8 @@ module Big_to_small2 : B2S = functor (X : Big) -> struct include X end
 [%%expect{|
 {
  "Big_to_small2"[module] ->
-   Abs<.42>(X/389, {
-                    "t"[type] -> X/389<.41> . "t"[type];
+   Abs<.42>(X/384, {
+                    "t"[type] -> X/384<.41> . "t"[type];
                     });
  }
 module Big_to_small2 : B2S
diff --git a/testsuite/tests/shapes/open_arg.ml b/testsuite/tests/shapes/open_arg.ml
index 81b19af3f7..d86820c0f5 100644
--- a/testsuite/tests/shapes/open_arg.ml
+++ b/testsuite/tests/shapes/open_arg.ml
@@ -22,7 +22,7 @@ end = struct end
 
 [%%expect{|
 {
- "Make"[module] -> Abs<.3>(I/280, {
+ "Make"[module] -> Abs<.3>(I/275, {
                                    });
  }
 module Make : functor (I : sig end) -> sig end
diff --git a/testsuite/tests/shapes/recmodules.ml b/testsuite/tests/shapes/recmodules.ml
index 6d9d86fc9a..c2c58ba194 100644
--- a/testsuite/tests/shapes/recmodules.ml
+++ b/testsuite/tests/shapes/recmodules.ml
@@ -43,8 +43,8 @@ and B : sig
 end = B
 [%%expect{|
 {
- "A"[module] -> A/303<.11>;
- "B"[module] -> B/304<.12>;
+ "A"[module] -> A/298<.11>;
+ "B"[module] -> B/299<.12>;
  }
 module rec A : sig type t = Leaf of B.t end
 and B : sig type t = int end
@@ -82,12 +82,12 @@ end = Set.Make(A)
  "ASet"[module] ->
    {
     "compare"[value] ->
-      CU Stdlib . "Set"[module] . "Make"[module](A/325<.19>) .
+      CU Stdlib . "Set"[module] . "Make"[module](A/320<.19>) .
       "compare"[value];
     "elt"[type] ->
-      CU Stdlib . "Set"[module] . "Make"[module](A/325<.19>) . "elt"[type];
+      CU Stdlib . "Set"[module] . "Make"[module](A/320<.19>) . "elt"[type];
     "t"[type] ->
-      CU Stdlib . "Set"[module] . "Make"[module](A/325<.19>) . "t"[type];
+      CU Stdlib . "Set"[module] . "Make"[module](A/320<.19>) . "t"[type];
     };
  }
 module rec A :
diff --git a/testsuite/tests/shapes/rotor_example.ml b/testsuite/tests/shapes/rotor_example.ml
index 182a0a9bc2..53b1fb806a 100644
--- a/testsuite/tests/shapes/rotor_example.ml
+++ b/testsuite/tests/shapes/rotor_example.ml
@@ -25,7 +25,7 @@ end
 [%%expect{|
 {
  "Pair"[module] ->
-   Abs<.9>(X/280, Y/281, {
+   Abs<.9>(X/275, Y/276, {
                           "t"[type] -> <.5>;
                           "to_string"[value] -> <.6>;
                           });
diff --git a/testsuite/tests/statmemprof/alloc_counts.ml b/testsuite/tests/statmemprof/alloc_counts.ml
index de0d1e9e49..f8cbb5658d 100644
--- a/testsuite/tests/statmemprof/alloc_counts.ml
+++ b/testsuite/tests/statmemprof/alloc_counts.ml
@@ -1,7 +1,4 @@
-(* TEST
-* skip
-reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
-*)
+(* TEST *)
 module MP = Gc.Memprof
 
 let allocs_by_memprof f =
diff --git a/testsuite/tests/statmemprof/arrays_in_major.ml b/testsuite/tests/statmemprof/arrays_in_major.ml
index eb627324ba..78907a18e3 100644
--- a/testsuite/tests/statmemprof/arrays_in_major.ml
+++ b/testsuite/tests/statmemprof/arrays_in_major.ml
@@ -1,7 +1,5 @@
 (* TEST
    flags = "-g"
-   * skip
-   reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
 *)
 
 open Gc.Memprof
diff --git a/testsuite/tests/statmemprof/arrays_in_major.reference b/testsuite/tests/statmemprof/arrays_in_major.reference
new file mode 100644
index 0000000000..1f34ad8ec8
--- /dev/null
+++ b/testsuite/tests/statmemprof/arrays_in_major.reference
@@ -0,0 +1,11 @@
+check_nosample
+check_counts_full_major
+check_counts_full_major
+check_no_nested
+check_distrib 300 3000 3 0.000010
+check_distrib 300 3000 1 0.000100
+check_distrib 300 3000 1 0.010000
+check_distrib 300 3000 1 0.900000
+check_distrib 300 300 100000 0.100000
+check_distrib 300000 300000 30 0.100000
+OK !
diff --git a/testsuite/tests/statmemprof/arrays_in_minor.ml b/testsuite/tests/statmemprof/arrays_in_minor.ml
index 4359642d0e..432f8b1d09 100644
--- a/testsuite/tests/statmemprof/arrays_in_minor.ml
+++ b/testsuite/tests/statmemprof/arrays_in_minor.ml
@@ -1,7 +1,5 @@
 (* TEST
    flags = "-g"
-   * skip
-   reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
 *)
 
 open Gc.Memprof
diff --git a/testsuite/tests/statmemprof/arrays_in_minor.reference b/testsuite/tests/statmemprof/arrays_in_minor.reference
new file mode 100644
index 0000000000..1dad91939c
--- /dev/null
+++ b/testsuite/tests/statmemprof/arrays_in_minor.reference
@@ -0,0 +1,11 @@
+check_nosample
+check_counts_full_major
+check_counts_full_major
+check_no_nested
+check_distrib 1 250 1000 0.000010
+check_distrib 1 250 1000 0.000100
+check_distrib 1 250 1000 0.010000
+check_distrib 1 250 1000 0.900000
+check_distrib 1 1 10000000 0.010000
+check_distrib 250 250 100000 0.100000
+OK !
diff --git a/testsuite/tests/statmemprof/blocking_in_callback.ml b/testsuite/tests/statmemprof/blocking_in_callback.ml
index e1e40f1fb6..00f49cfc74 100644
--- a/testsuite/tests/statmemprof/blocking_in_callback.ml
+++ b/testsuite/tests/statmemprof/blocking_in_callback.ml
@@ -1,8 +1,6 @@
 (* TEST
 * hassysthreads
 include systhreads
-* skip
-reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
 ** bytecode
 ** native
 *)
diff --git a/testsuite/tests/statmemprof/callstacks.flat-float-array.reference b/testsuite/tests/statmemprof/callstacks.flat-float-array.reference
index baea29a0d5..d71791641d 100644
--- a/testsuite/tests/statmemprof/callstacks.flat-float-array.reference
+++ b/testsuite/tests/statmemprof/callstacks.flat-float-array.reference
@@ -1,74 +1,74 @@
 -----------
 Raised by primitive operation at Callstacks.alloc_list_literal in file "callstacks.ml", line 18, characters 30-53
 Called from Callstacks.test in file "callstacks.ml", line 92, characters 2-10
-Called from Stdlib__List.iter in file "list.ml", line 110, characters 12-15
+Called from Stdlib__List.iter in file "list.ml", line 112, characters 12-15
 Called from Callstacks in file "callstacks.ml", line 99, characters 2-27
 -----------
 Raised by primitive operation at Callstacks.alloc_pair in file "callstacks.ml", line 21, characters 30-76
 Called from Callstacks.test in file "callstacks.ml", line 92, characters 2-10
-Called from Stdlib__List.iter in file "list.ml", line 110, characters 12-15
+Called from Stdlib__List.iter in file "list.ml", line 112, characters 12-15
 Called from Callstacks in file "callstacks.ml", line 99, characters 2-27
 -----------
 Raised by primitive operation at Callstacks.alloc_record in file "callstacks.ml", line 26, characters 12-66
 Called from Callstacks.test in file "callstacks.ml", line 92, characters 2-10
-Called from Stdlib__List.iter in file "list.ml", line 110, characters 12-15
+Called from Stdlib__List.iter in file "list.ml", line 112, characters 12-15
 Called from Callstacks in file "callstacks.ml", line 99, characters 2-27
 -----------
 Raised by primitive operation at Callstacks.alloc_some in file "callstacks.ml", line 29, characters 30-60
 Called from Callstacks.test in file "callstacks.ml", line 92, characters 2-10
-Called from Stdlib__List.iter in file "list.ml", line 110, characters 12-15
+Called from Stdlib__List.iter in file "list.ml", line 112, characters 12-15
 Called from Callstacks in file "callstacks.ml", line 99, characters 2-27
 -----------
 Raised by primitive operation at Callstacks.alloc_array_literal in file "callstacks.ml", line 32, characters 30-55
 Called from Callstacks.test in file "callstacks.ml", line 92, characters 2-10
-Called from Stdlib__List.iter in file "list.ml", line 110, characters 12-15
+Called from Stdlib__List.iter in file "list.ml", line 112, characters 12-15
 Called from Callstacks in file "callstacks.ml", line 99, characters 2-27
 -----------
 Raised by primitive operation at Callstacks.alloc_float_array_literal in file "callstacks.ml", line 36, characters 12-62
 Called from Callstacks.test in file "callstacks.ml", line 92, characters 2-10
-Called from Stdlib__List.iter in file "list.ml", line 110, characters 12-15
+Called from Stdlib__List.iter in file "list.ml", line 112, characters 12-15
 Called from Callstacks in file "callstacks.ml", line 99, characters 2-27
 -----------
 Raised by primitive operation at Callstacks.do_alloc_unknown_array_literal in file "callstacks.ml", line 39, characters 22-27
 Called from Callstacks.alloc_unknown_array_literal in file "callstacks.ml", line 41, characters 30-65
 Called from Callstacks.test in file "callstacks.ml", line 92, characters 2-10
-Called from Stdlib__List.iter in file "list.ml", line 110, characters 12-15
+Called from Stdlib__List.iter in file "list.ml", line 112, characters 12-15
 Called from Callstacks in file "callstacks.ml", line 99, characters 2-27
 -----------
 Raised by primitive operation at Callstacks.alloc_small_array in file "callstacks.ml", line 44, characters 30-69
 Called from Callstacks.test in file "callstacks.ml", line 92, characters 2-10
-Called from Stdlib__List.iter in file "list.ml", line 110, characters 12-15
+Called from Stdlib__List.iter in file "list.ml", line 112, characters 12-15
 Called from Callstacks in file "callstacks.ml", line 99, characters 2-27
 -----------
 Raised by primitive operation at Callstacks.alloc_large_array in file "callstacks.ml", line 47, characters 30-73
 Called from Callstacks.test in file "callstacks.ml", line 92, characters 2-10
-Called from Stdlib__List.iter in file "list.ml", line 110, characters 12-15
+Called from Stdlib__List.iter in file "list.ml", line 112, characters 12-15
 Called from Callstacks in file "callstacks.ml", line 99, characters 2-27
 -----------
 Raised by primitive operation at Callstacks.alloc_closure.(fun) in file "callstacks.ml", line 51, characters 30-43
 Called from Callstacks.test in file "callstacks.ml", line 92, characters 2-10
-Called from Stdlib__List.iter in file "list.ml", line 110, characters 12-15
+Called from Stdlib__List.iter in file "list.ml", line 112, characters 12-15
 Called from Callstacks in file "callstacks.ml", line 99, characters 2-27
 -----------
 Raised by primitive operation at Callstacks.get0 in file "callstacks.ml", line 54, characters 28-33
 Called from Callstacks.getfloatfield in file "callstacks.ml", line 56, characters 30-47
 Called from Callstacks.test in file "callstacks.ml", line 92, characters 2-10
-Called from Stdlib__List.iter in file "list.ml", line 110, characters 12-15
+Called from Stdlib__List.iter in file "list.ml", line 112, characters 12-15
 Called from Callstacks in file "callstacks.ml", line 99, characters 2-27
 -----------
 Raised by primitive operation at Stdlib__Marshal.from_bytes in file "marshal.ml", line 61, characters 9-35
 Called from Callstacks.alloc_unmarshal in file "callstacks.ml", line 62, characters 12-87
 Called from Callstacks.test in file "callstacks.ml", line 92, characters 2-10
-Called from Stdlib__List.iter in file "list.ml", line 110, characters 12-15
+Called from Stdlib__List.iter in file "list.ml", line 112, characters 12-15
 Called from Callstacks in file "callstacks.ml", line 99, characters 2-27
 -----------
 Raised by primitive operation at Callstacks.alloc_ref in file "callstacks.ml", line 65, characters 30-59
 Called from Callstacks.test in file "callstacks.ml", line 92, characters 2-10
-Called from Stdlib__List.iter in file "list.ml", line 110, characters 12-15
+Called from Stdlib__List.iter in file "list.ml", line 112, characters 12-15
 Called from Callstacks in file "callstacks.ml", line 99, characters 2-27
 -----------
 Raised by primitive operation at Callstacks.prod_floats in file "callstacks.ml", line 68, characters 37-43
 Called from Callstacks.alloc_boxedfloat in file "callstacks.ml", line 70, characters 30-49
 Called from Callstacks.test in file "callstacks.ml", line 92, characters 2-10
-Called from Stdlib__List.iter in file "list.ml", line 110, characters 12-15
+Called from Stdlib__List.iter in file "list.ml", line 112, characters 12-15
 Called from Callstacks in file "callstacks.ml", line 99, characters 2-27
diff --git a/testsuite/tests/statmemprof/callstacks.ml b/testsuite/tests/statmemprof/callstacks.ml
index e864a50019..ec5a4199f0 100644
--- a/testsuite/tests/statmemprof/callstacks.ml
+++ b/testsuite/tests/statmemprof/callstacks.ml
@@ -3,15 +3,11 @@
 
    * flat-float-array
      reference = "${test_source_directory}/callstacks.flat-float-array.reference"
-   * skip
-   reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
    ** native
    ** bytecode
 
    * no-flat-float-array
      reference = "${test_source_directory}/callstacks.no-flat-float-array.reference"
-   * skip
-   reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
    ** native
    ** bytecode
 *)
diff --git a/testsuite/tests/statmemprof/comballoc.byte.reference b/testsuite/tests/statmemprof/comballoc.byte.reference
index 4db26f1c99..98c4fd718d 100644
--- a/testsuite/tests/statmemprof/comballoc.byte.reference
+++ b/testsuite/tests/statmemprof/comballoc.byte.reference
@@ -1,49 +1,49 @@
 2: 0.42 false
 Raised by primitive operation at Comballoc.f in file "comballoc.ml", line 14, characters 2-19
 Called from Comballoc.test in file "comballoc.ml", line 39, characters 25-48
-Called from Stdlib__List.iter in file "list.ml", line 110, characters 12-15
+Called from Stdlib__List.iter in file "list.ml", line 112, characters 12-15
 Called from Comballoc in file "comballoc.ml", line 69, characters 2-35
 3: 0.42 false
 Raised by primitive operation at Comballoc.f in file "comballoc.ml", line 14, characters 6-18
 Called from Comballoc.test in file "comballoc.ml", line 39, characters 25-48
-Called from Stdlib__List.iter in file "list.ml", line 110, characters 12-15
+Called from Stdlib__List.iter in file "list.ml", line 112, characters 12-15
 Called from Comballoc in file "comballoc.ml", line 69, characters 2-35
 4: 0.42 true
 Raised by primitive operation at Comballoc.f4 in file "comballoc.ml", line 11, characters 11-20
 Called from Comballoc.f in file "comballoc.ml", line 14, characters 13-17
 Called from Comballoc.test in file "comballoc.ml", line 39, characters 25-48
-Called from Stdlib__List.iter in file "list.ml", line 110, characters 12-15
+Called from Stdlib__List.iter in file "list.ml", line 112, characters 12-15
 Called from Comballoc in file "comballoc.ml", line 69, characters 2-35
 2: 0.01 false
 Raised by primitive operation at Comballoc.f in file "comballoc.ml", line 14, characters 2-19
 Called from Comballoc.test in file "comballoc.ml", line 39, characters 25-48
-Called from Stdlib__List.iter in file "list.ml", line 110, characters 12-15
+Called from Stdlib__List.iter in file "list.ml", line 112, characters 12-15
 Called from Comballoc in file "comballoc.ml", line 69, characters 2-35
 3: 0.01 false
 Raised by primitive operation at Comballoc.f in file "comballoc.ml", line 14, characters 6-18
 Called from Comballoc.test in file "comballoc.ml", line 39, characters 25-48
-Called from Stdlib__List.iter in file "list.ml", line 110, characters 12-15
+Called from Stdlib__List.iter in file "list.ml", line 112, characters 12-15
 Called from Comballoc in file "comballoc.ml", line 69, characters 2-35
 4: 0.01 true
 Raised by primitive operation at Comballoc.f4 in file "comballoc.ml", line 11, characters 11-20
 Called from Comballoc.f in file "comballoc.ml", line 14, characters 13-17
 Called from Comballoc.test in file "comballoc.ml", line 39, characters 25-48
-Called from Stdlib__List.iter in file "list.ml", line 110, characters 12-15
+Called from Stdlib__List.iter in file "list.ml", line 112, characters 12-15
 Called from Comballoc in file "comballoc.ml", line 69, characters 2-35
 2: 0.83 false
 Raised by primitive operation at Comballoc.f in file "comballoc.ml", line 14, characters 2-19
 Called from Comballoc.test in file "comballoc.ml", line 39, characters 25-48
-Called from Stdlib__List.iter in file "list.ml", line 110, characters 12-15
+Called from Stdlib__List.iter in file "list.ml", line 112, characters 12-15
 Called from Comballoc in file "comballoc.ml", line 69, characters 2-35
 3: 0.83 false
 Raised by primitive operation at Comballoc.f in file "comballoc.ml", line 14, characters 6-18
 Called from Comballoc.test in file "comballoc.ml", line 39, characters 25-48
-Called from Stdlib__List.iter in file "list.ml", line 110, characters 12-15
+Called from Stdlib__List.iter in file "list.ml", line 112, characters 12-15
 Called from Comballoc in file "comballoc.ml", line 69, characters 2-35
 4: 0.83 true
 Raised by primitive operation at Comballoc.f4 in file "comballoc.ml", line 11, characters 11-20
 Called from Comballoc.f in file "comballoc.ml", line 14, characters 13-17
 Called from Comballoc.test in file "comballoc.ml", line 39, characters 25-48
-Called from Stdlib__List.iter in file "list.ml", line 110, characters 12-15
+Called from Stdlib__List.iter in file "list.ml", line 112, characters 12-15
 Called from Comballoc in file "comballoc.ml", line 69, characters 2-35
 OK
diff --git a/testsuite/tests/statmemprof/comballoc.ml b/testsuite/tests/statmemprof/comballoc.ml
index 60ca4a0123..22b2547101 100644
--- a/testsuite/tests/statmemprof/comballoc.ml
+++ b/testsuite/tests/statmemprof/comballoc.ml
@@ -1,10 +1,8 @@
 (* TEST
    flags = "-g"
-   * skip
-   reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
-   ** bytecode
+   * bytecode
      reference = "${test_source_directory}/comballoc.byte.reference"
-   ** native
+   * native
      reference = "${test_source_directory}/comballoc.opt.reference"
 *)
 
diff --git a/testsuite/tests/statmemprof/comballoc.opt.reference b/testsuite/tests/statmemprof/comballoc.opt.reference
index 3afd163aa8..b6bd4f18fe 100644
--- a/testsuite/tests/statmemprof/comballoc.opt.reference
+++ b/testsuite/tests/statmemprof/comballoc.opt.reference
@@ -1,49 +1,49 @@
 2: 0.42 false
 Raised by primitive operation at Comballoc.f in file "comballoc.ml", line 14, characters 2-19
 Called from Comballoc.test in file "comballoc.ml", line 39, characters 25-48
-Called from Stdlib__List.iter in file "list.ml", line 110, characters 12-15
+Called from Stdlib__List.iter in file "list.ml", line 112, characters 12-15
 Called from Comballoc in file "comballoc.ml", line 69, characters 2-35
 3: 0.42 false
 Raised by primitive operation at Comballoc.f in file "comballoc.ml", line 14, characters 6-18
 Called from Comballoc.test in file "comballoc.ml", line 39, characters 25-48
-Called from Stdlib__List.iter in file "list.ml", line 110, characters 12-15
+Called from Stdlib__List.iter in file "list.ml", line 112, characters 12-15
 Called from Comballoc in file "comballoc.ml", line 69, characters 2-35
 4: 0.42 true
 Raised by primitive operation at Comballoc.f4 in file "comballoc.ml" (inlined), line 11, characters 11-20
 Called from Comballoc.f in file "comballoc.ml", line 14, characters 13-17
 Called from Comballoc.test in file "comballoc.ml", line 39, characters 25-48
-Called from Stdlib__List.iter in file "list.ml", line 110, characters 12-15
+Called from Stdlib__List.iter in file "list.ml", line 112, characters 12-15
 Called from Comballoc in file "comballoc.ml", line 69, characters 2-35
 2: 0.01 false
 Raised by primitive operation at Comballoc.f in file "comballoc.ml", line 14, characters 2-19
 Called from Comballoc.test in file "comballoc.ml", line 39, characters 25-48
-Called from Stdlib__List.iter in file "list.ml", line 110, characters 12-15
+Called from Stdlib__List.iter in file "list.ml", line 112, characters 12-15
 Called from Comballoc in file "comballoc.ml", line 69, characters 2-35
 3: 0.01 false
 Raised by primitive operation at Comballoc.f in file "comballoc.ml", line 14, characters 6-18
 Called from Comballoc.test in file "comballoc.ml", line 39, characters 25-48
-Called from Stdlib__List.iter in file "list.ml", line 110, characters 12-15
+Called from Stdlib__List.iter in file "list.ml", line 112, characters 12-15
 Called from Comballoc in file "comballoc.ml", line 69, characters 2-35
 4: 0.01 true
 Raised by primitive operation at Comballoc.f4 in file "comballoc.ml" (inlined), line 11, characters 11-20
 Called from Comballoc.f in file "comballoc.ml", line 14, characters 13-17
 Called from Comballoc.test in file "comballoc.ml", line 39, characters 25-48
-Called from Stdlib__List.iter in file "list.ml", line 110, characters 12-15
+Called from Stdlib__List.iter in file "list.ml", line 112, characters 12-15
 Called from Comballoc in file "comballoc.ml", line 69, characters 2-35
 2: 0.83 false
 Raised by primitive operation at Comballoc.f in file "comballoc.ml", line 14, characters 2-19
 Called from Comballoc.test in file "comballoc.ml", line 39, characters 25-48
-Called from Stdlib__List.iter in file "list.ml", line 110, characters 12-15
+Called from Stdlib__List.iter in file "list.ml", line 112, characters 12-15
 Called from Comballoc in file "comballoc.ml", line 69, characters 2-35
 3: 0.83 false
 Raised by primitive operation at Comballoc.f in file "comballoc.ml", line 14, characters 6-18
 Called from Comballoc.test in file "comballoc.ml", line 39, characters 25-48
-Called from Stdlib__List.iter in file "list.ml", line 110, characters 12-15
+Called from Stdlib__List.iter in file "list.ml", line 112, characters 12-15
 Called from Comballoc in file "comballoc.ml", line 69, characters 2-35
 4: 0.83 true
 Raised by primitive operation at Comballoc.f4 in file "comballoc.ml" (inlined), line 11, characters 11-20
 Called from Comballoc.f in file "comballoc.ml", line 14, characters 13-17
 Called from Comballoc.test in file "comballoc.ml", line 39, characters 25-48
-Called from Stdlib__List.iter in file "list.ml", line 110, characters 12-15
+Called from Stdlib__List.iter in file "list.ml", line 112, characters 12-15
 Called from Comballoc in file "comballoc.ml", line 69, characters 2-35
 OK
diff --git a/testsuite/tests/statmemprof/custom.ml b/testsuite/tests/statmemprof/custom.ml
index 41cf902ec8..f0ddfa7eed 100644
--- a/testsuite/tests/statmemprof/custom.ml
+++ b/testsuite/tests/statmemprof/custom.ml
@@ -1,7 +1,4 @@
-(* TEST
-* skip
-reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
-*)
+(* TEST *)
 
 open Gc.Memprof
 
diff --git a/testsuite/tests/statmemprof/exception_callback.ml b/testsuite/tests/statmemprof/exception_callback.ml
index f9f02f690f..e1589372ab 100644
--- a/testsuite/tests/statmemprof/exception_callback.ml
+++ b/testsuite/tests/statmemprof/exception_callback.ml
@@ -1,7 +1,5 @@
 (* TEST
    exit_status = "2"
-   * skip
-   reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
 *)
 
 open Gc.Memprof
diff --git a/testsuite/tests/statmemprof/exception_callback_minor.ml b/testsuite/tests/statmemprof/exception_callback_minor.ml
index 0bb37782be..f514123276 100644
--- a/testsuite/tests/statmemprof/exception_callback_minor.ml
+++ b/testsuite/tests/statmemprof/exception_callback_minor.ml
@@ -1,7 +1,5 @@
 (* TEST
    exit_status = "2"
-   * skip
-   reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
 *)
 
 open Gc.Memprof
diff --git a/testsuite/tests/statmemprof/intern.ml b/testsuite/tests/statmemprof/intern.ml
index bebcc3c8ff..bce6f89c5c 100644
--- a/testsuite/tests/statmemprof/intern.ml
+++ b/testsuite/tests/statmemprof/intern.ml
@@ -1,7 +1,5 @@
 (* TEST
    flags = "-g"
-   * skip
-   reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
 *)
 
 open Gc.Memprof
diff --git a/testsuite/tests/statmemprof/intern.reference b/testsuite/tests/statmemprof/intern.reference
new file mode 100644
index 0000000000..d83e8d6d50
--- /dev/null
+++ b/testsuite/tests/statmemprof/intern.reference
@@ -0,0 +1,10 @@
+check_nosample
+check_counts_full_major
+check_counts_full_major
+check_no_nested
+check_distrib 2 3000 3 0.000010
+check_distrib 2 3000 1 0.000100
+check_distrib 2 2000 1 0.010000
+check_distrib 2 2000 1 0.900000
+check_distrib 300000 300000 20 0.100000
+OK !
diff --git a/testsuite/tests/statmemprof/lists_in_minor.ml b/testsuite/tests/statmemprof/lists_in_minor.ml
index d08716c71b..ebd434857e 100644
--- a/testsuite/tests/statmemprof/lists_in_minor.ml
+++ b/testsuite/tests/statmemprof/lists_in_minor.ml
@@ -1,7 +1,5 @@
 (* TEST
    flags = "-g"
-   * skip
-   reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
 *)
 
 open Gc.Memprof
diff --git a/testsuite/tests/statmemprof/lists_in_minor.reference b/testsuite/tests/statmemprof/lists_in_minor.reference
new file mode 100644
index 0000000000..11cfe0ca12
--- /dev/null
+++ b/testsuite/tests/statmemprof/lists_in_minor.reference
@@ -0,0 +1,8 @@
+check_distrib 10 1000000 0.010000
+check_distrib 1000000 10 0.000010
+check_distrib 1000000 10 0.000100
+check_distrib 1000000 10 0.001000
+check_distrib 1000000 10 0.010000
+check_distrib 100000 10 0.100000
+check_distrib 100000 10 0.900000
+OK !
diff --git a/testsuite/tests/statmemprof/minor_no_postpone.ml b/testsuite/tests/statmemprof/minor_no_postpone.ml
index 21c8bfb244..fcb94cf81d 100644
--- a/testsuite/tests/statmemprof/minor_no_postpone.ml
+++ b/testsuite/tests/statmemprof/minor_no_postpone.ml
@@ -1,7 +1,5 @@
 (* TEST
    modules = "minor_no_postpone_stub.c"
-   * skip
-   reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
 *)
 
 open Gc.Memprof
diff --git a/testsuite/tests/statmemprof/moved_while_blocking.ml b/testsuite/tests/statmemprof/moved_while_blocking.ml
index bb8dfc9848..8efc172aea 100644
--- a/testsuite/tests/statmemprof/moved_while_blocking.ml
+++ b/testsuite/tests/statmemprof/moved_while_blocking.ml
@@ -1,8 +1,6 @@
 (* TEST
 * hassysthreads
 include systhreads
-* skip
-reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
 ** bytecode
 ** native
 *)
diff --git a/testsuite/tests/statmemprof/thread_exit_in_callback.ml b/testsuite/tests/statmemprof/thread_exit_in_callback.ml
index 28e2aabb8b..563be966a8 100644
--- a/testsuite/tests/statmemprof/thread_exit_in_callback.ml
+++ b/testsuite/tests/statmemprof/thread_exit_in_callback.ml
@@ -1,8 +1,6 @@
 (* TEST
 * hassysthreads
 include systhreads
-* skip
-reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
 ** bytecode
 ** native
 *)
@@ -12,7 +10,7 @@ let _ =
   Gc.Memprof.(start ~callstack_size:10 ~sampling_rate:1.
                 { null_tracker with alloc_minor = fun _ ->
                       if Thread.id (Thread.self ()) <> main_thread then
-                        Thread.exit ();
+                        raise Thread.Exit;
                       None });
   let t = Thread.create (fun () ->
       ignore (Sys.opaque_identity (ref 1));
@@ -21,6 +19,8 @@ let _ =
   Thread.join t;
   Gc.Memprof.stop ()
 
+[@@@ocaml.alert "-deprecated"]
+
 let _ =
   Gc.Memprof.(start ~callstack_size:10 ~sampling_rate:1.
     { null_tracker with alloc_minor = fun _ -> Thread.exit (); None });
diff --git a/testsuite/tests/typing-sigsubst/sigsubst.ml b/testsuite/tests/typing-sigsubst/sigsubst.ml
index 4948e3e7e8..6a922581a0 100644
--- a/testsuite/tests/typing-sigsubst/sigsubst.ml
+++ b/testsuite/tests/typing-sigsubst/sigsubst.ml
@@ -24,11 +24,11 @@ end
 Line 3, characters 2-36:
 3 |   include Comparable with type t = t
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-Error: Illegal shadowing of included type t/285 by t/290
+Error: Illegal shadowing of included type t/280 by t/285
        Line 2, characters 2-19:
-         Type t/285 came from this include
+         Type t/280 came from this include
        Line 3, characters 2-23:
-         The value print has no valid type if t/285 is shadowed
+         The value print has no valid type if t/280 is shadowed
 |}]
 
 module type Sunderscore = sig
diff --git a/testsuite/tests/unwind/unwind_test.reference b/testsuite/tests/unwind/unwind_test.reference
index b3804d00e5..827cc4affc 100644
--- a/testsuite/tests/unwind/unwind_test.reference
+++ b/testsuite/tests/unwind/unwind_test.reference
@@ -1,5 +1,4 @@
 ml_perform_stack_walk
-caml_c_call
 Mylib.baz
 Driver.entry
 caml_program
diff --git a/testsuite/tests/weak-ephe-final/ephetest_par.ml b/testsuite/tests/weak-ephe-final/ephetest_par.ml
index e3cab0e83e..26b5878c7a 100644
--- a/testsuite/tests/weak-ephe-final/ephetest_par.ml
+++ b/testsuite/tests/weak-ephe-final/ephetest_par.ml
@@ -1,4 +1,7 @@
-(* TEST *)
+(* TEST
+   * skip
+   reason = "OCaml 5 only"
+ *)
 
 (* Due to GCs running at non-deterministic places, the output from these tests
  * are unreliable except the bad value checks and as a check for catastrophic
diff --git a/testsuite/tests/weak-ephe-final/finaliser2.ml b/testsuite/tests/weak-ephe-final/finaliser2.ml
index 666a55efeb..5a36157e0e 100644
--- a/testsuite/tests/weak-ephe-final/finaliser2.ml
+++ b/testsuite/tests/weak-ephe-final/finaliser2.ml
@@ -1,4 +1,7 @@
-(* TEST *)
+(* TEST
+   * skip
+   reason = "OCaml 5 only"
+*)
 
 let () = Out_channel.set_buffered stdout false
 
diff --git a/testsuite/tests/weak-ephe-final/finaliser_handover.ml b/testsuite/tests/weak-ephe-final/finaliser_handover.ml
index fa2d2efc43..752a7eeabf 100644
--- a/testsuite/tests/weak-ephe-final/finaliser_handover.ml
+++ b/testsuite/tests/weak-ephe-final/finaliser_handover.ml
@@ -1,4 +1,7 @@
-(* TEST *)
+(* TEST
+   * skip
+   reason = "OCaml 5 only"
+*)
 
 (* ocaml-multicore issues 528 and 468 *)
 
diff --git a/testsuite/tests/weak-ephe-final/weaklifetime_par.ml b/testsuite/tests/weak-ephe-final/weaklifetime_par.ml
index b42d399907..656e318473 100644
--- a/testsuite/tests/weak-ephe-final/weaklifetime_par.ml
+++ b/testsuite/tests/weak-ephe-final/weaklifetime_par.ml
@@ -1,3 +1,7 @@
+(* TEST
+   * skip
+   reason = "OCaml 5 only"
+*)
 (* This test is currently disabled,
    until the random failures have been investigated.
 *)
diff --git a/testsuite/tools/asmgen_i386.S b/testsuite/tools/asmgen_i386.S
index 1d16b72d4e..956ec369ab 100644
--- a/testsuite/tools/asmgen_i386.S
+++ b/testsuite/tools/asmgen_i386.S
@@ -49,7 +49,7 @@ G(call_gen_code):
 G(caml_c_call):
         jmp     *%eax
 
-        .comm   G(Caml_state), 4
+        .comm   G(caml_state), 4
 
 /* Some tests are designed to cause registers to spill; on
  * x86 we require the caml_extra_params symbol from the RTS. */
diff --git a/tools/ci/actions/runner.sh b/tools/ci/actions/runner.sh
index de10bd1fd3..5f9e31bc66 100755
--- a/tools/ci/actions/runner.sh
+++ b/tools/ci/actions/runner.sh
@@ -40,19 +40,7 @@ EOF
     --enable-debug-runtime \
     $CONFIG_ARG"
 
-  case $XARCH in
-  x64)
-    ./configure $configure_flags
-    ;;
-  i386)
-    ./configure --build=x86_64-pc-linux-gnu --host=i386-pc-linux-gnu \
-      $configure_flags
-    ;;
-  *)
-    echo unknown arch
-    exit 1
-    ;;
-  esac
+  ./configure $configure_flags
 }
 
 Build () {
diff --git a/tools/ci/appveyor/appveyor_build.sh b/tools/ci/appveyor/appveyor_build.sh
index cdeaf1b674..832812925d 100644
--- a/tools/ci/appveyor/appveyor_build.sh
+++ b/tools/ci/appveyor/appveyor_build.sh
@@ -64,8 +64,8 @@ function set_configuration {
         mingw64)
             build='--build=i686-pc-cygwin'
             host='--host=x86_64-w64-mingw32'
-            dep='--disable-dependency-generation'
-            man='--disable-stdlib-manpages'
+            # Explicitly test dependency generation on msvc64
+            dep='--enable-dependency-generation'
         ;;
         msvc32)
             build='--build=i686-pc-cygwin'
@@ -152,10 +152,13 @@ case "$1" in
     run "test $PORT" \
         make -C "$FULL_BUILD_PREFIX-$PORT/testsuite" SHOW_TIMINGS=1 all
     run "install $PORT" $MAKE -C "$FULL_BUILD_PREFIX-$PORT" install
-    if [[ $PORT = 'msvc64' ]] ; then
+    if [[ $PORT = 'mingw64' ]] ; then
       run "$MAKE check_all_arches" \
            $MAKE -C "$FULL_BUILD_PREFIX-$PORT" check_all_arches
       cd "$FULL_BUILD_PREFIX-$PORT"
+
+      git config --global safe.directory '*'
+
       # Ensure that .gitignore is up-to-date - this will fail if any untracked
       # or altered files exist. We revert the change from the bootstrap (that
       # would have failed the build earlier if necessary)
@@ -175,7 +178,7 @@ case "$1" in
   *)
     cd "$APPVEYOR_BUILD_FOLDER/../$BUILD_PREFIX-$PORT"
 
-    if [[ $PORT = 'msvc64' ]] ; then
+    if [[ $PORT = 'mingw64' ]] ; then
       # Ensure that make distclean can be run from an empty tree
       run "$MAKE distclean" $MAKE distclean
     fi
