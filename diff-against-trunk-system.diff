diff --git a/.Diff-of-diff.diff b/.Diff-of-diff.diff
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/Changes b/Changes
index e35148f24d..af5bbe3e0e 100644
--- a/Changes
+++ b/Changes
@@ -462,6 +462,10 @@ OCaml 4.14.0
   toplevel, as in the bytecode toplevel.
   (David Allsopp, report by Nathan Rebours, review by Gabriel Scherer)
 
+- #10853: `Obj.reachable_words` could crash if called after a marshaling
+  operation in `NO_SHARING` mode.
+  (Xavier Leroy, report by Anil Madhavapeddy, review by Alain Frisch)
+
 
 OCaml 4.13 maintenance branch
 -----------------------------
diff --git a/Makefile.config.in b/Makefile.config.in
index 63bdc810a4..fb7ab00998 100644
--- a/Makefile.config.in
+++ b/Makefile.config.in
@@ -255,7 +255,7 @@ FLAT_FLOAT_ARRAY=@flat_float_array@
 FUNCTION_SECTIONS=@function_sections@
 AWK=@AWK@
 STDLIB_MANPAGES=@stdlib_manpages@
-NAKED_POINTERS=false
+NAKED_POINTERS=@naked_pointers@
 
 ### Native command to build ocamlrun.exe
 
diff --git a/VERSION b/VERSION
index d9d76e3115..4ef434f979 100644
--- a/VERSION
+++ b/VERSION
@@ -1,4 +1,4 @@
-5.00.0+dev0-2021-11-05
+5.0.0+jst-backport
 
 # Starting with OCaml 4.14, although the version string that appears above is
 # still correct and this file can thus still be used to figure it out,
diff --git a/api_docgen/Makefile.docfiles b/api_docgen/Makefile.docfiles
index 09c24557b5..14a3b18322 100644
--- a/api_docgen/Makefile.docfiles
+++ b/api_docgen/Makefile.docfiles
@@ -35,8 +35,8 @@ str_MLIS := str.mli
 unix_MLIS := unix.mli unixLabels.mli
 dynlink_MLIS := dynlink.mli
 thread_MLIS := \
-  thread.mli event.mli \
-  threadUnix.mli
+  thread.mli condition.mli mutex.mli event.mli \
+  threadUnix.mli semaphore.mli
 
 STDLIB=$(filter-out stdlib__Pervasives, $(STDLIB_MODULES))
 
diff --git a/asmcomp/amd64/emit.mlp b/asmcomp/amd64/emit.mlp
index ef768b11d8..e7dec0460a 100644
--- a/asmcomp/amd64/emit.mlp
+++ b/asmcomp/amd64/emit.mlp
@@ -63,6 +63,7 @@ let cfi_endproc () =
 let cfi_adjust_cfa_offset n =
   if Config.asm_cfi_supported then D.cfi_adjust_cfa_offset n
 
+(* BACKPORT
 let cfi_remember_state () =
   if Config.asm_cfi_supported then D.cfi_remember_state ()
 
@@ -71,13 +72,16 @@ let cfi_restore_state () =
 
 let cfi_def_cfa_register reg =
   if Config.asm_cfi_supported then D.cfi_def_cfa_register reg
+*)
 
 let emit_debug_info dbg =
   emit_debug_info_gen dbg D.file D.loc
 
 let fp = Config.with_frame_pointers
 
+(* BACKPORT
 let stack_threshold_size = Config.stack_threshold * 8 (* bytes *)
+*)
 
 let frame_size env =                     (* includes return address *)
   if env.f.fun_frame_required then begin
@@ -536,8 +540,9 @@ let emit_instr env fallthrough i =
           end
         end
       end
-  | Lop(Iextcall { func; alloc; stack_ofs }) ->
+  | Lop(Iextcall { func; alloc; stack_ofs = _ }) ->
       add_used_symbol func;
+(* BACKPORT
       let base_stack_size =
         if Arch.win64 then
           32 (* Windows x64 rcx+rdx+r8+r9 shadow stack *)
@@ -549,11 +554,26 @@ let emit_instr env fallthrough i =
         load_symbol_addr func rax;
         emit_call "caml_c_call_stack_args";
         record_frame env i.live (Dbg_other i.dbg);
-      end else if alloc then begin
+      end else*) if alloc then begin
         load_symbol_addr func rax;
         emit_call "caml_c_call";
         record_frame env i.live (Dbg_other i.dbg);
+(* BACKPORT BEGIN *)
+        if system <> S_win64 then begin
+
+          (* In amd64.S, "caml_c_call" tail-calls the C function (in order to
+             produce nicer backtraces), so we need to restore r15 manually after
+             it returns (note that this increases code size).
+
+             In amd64nt.asm (used for Win64), "caml_c_call" invokes the C
+             function via a regular call, and restores r15 itself, thus avoiding
+             the code size increase. *)
+
+          I.mov (domain_field Domainstate.Domain_young_ptr) r15
+        end
+(* BACKPORT END *)
       end else begin
+(* BACKPORT
         I.mov rsp rbp;
         cfi_remember_state ();
         cfi_def_cfa_register "rbp";
@@ -561,10 +581,12 @@ let emit_instr env fallthrough i =
            will not unwind through this unless we were to tag this
            calling frame with cfi_signal_frame in it's definition. *)
         I.mov (domain_field Domainstate.Domain_c_stack) rsp;
-
+*)
         emit_call func;
+(* BACKPORT
         I.mov rbp rsp;
         cfi_restore_state ();
+*)
       end
   | Lop(Istackoffset n) ->
       if n < 0
@@ -741,7 +763,10 @@ let emit_instr env fallthrough i =
   | Lop(Ispecific(Izextend32)) ->
       I.mov (arg32 i 0) (res32 i 0)
   | Lop (Idls_get) ->
+      assert false
+(* BACKPORT
       I.mov (domain_field Domainstate.Domain_dls_root) (res i 0)
+*)
   | Lreloadretaddr ->
       ()
   | Lreturn ->
@@ -842,12 +867,24 @@ let emit_instr env fallthrough i =
       load_label_addr lbl_handler r11;
       I.push r11;
       cfi_adjust_cfa_offset 8;
+(* BACKPORT BEGIN
       I.push (domain_field Domainstate.Domain_exn_handler);
+*)
+      I.push (domain_field Domainstate.Domain_exception_pointer);
+(* BACKPORT END *)
       cfi_adjust_cfa_offset 8;
+(* BACKPORT BEGIN
       I.mov rsp (domain_field Domainstate.Domain_exn_handler);
+*)
+      I.mov rsp (domain_field Domainstate.Domain_exception_pointer);
+(* BACKPORT END *)
       env.stack_offset <- env.stack_offset + 16;
   | Lpoptrap ->
+(* BACKPORT BEGIN
       I.pop (domain_field Domainstate.Domain_exn_handler);
+*)
+      I.pop (domain_field Domainstate.Domain_exception_pointer);
+(* BACKPORT END *)
       cfi_adjust_cfa_offset (-8);
       I.add (int 8) rsp;
       cfi_adjust_cfa_offset (-8);
@@ -855,14 +892,26 @@ let emit_instr env fallthrough i =
   | Lraise k ->
       begin match k with
       | Lambda.Raise_regular ->
+(* BACKPORT BEGIN *)
+          I.mov (int 0) (domain_field Domainstate.Domain_backtrace_pos);
+(* BACKPORT END *)
           emit_call "caml_raise_exn";
           record_frame env Reg.Set.empty (Dbg_raise i.dbg)
       | Lambda.Raise_reraise ->
+(* BACKPORT BEGIN
           emit_call "caml_reraise_exn";
+*)
+          emit_call "caml_raise_exn";
+(* BACKPORT END *)
           record_frame env Reg.Set.empty (Dbg_raise i.dbg)
       | Lambda.Raise_notrace ->
+(* BACKPORT BEGIN
           I.mov (domain_field Domainstate.Domain_exn_handler) rsp;
           I.pop (domain_field Domainstate.Domain_exn_handler);
+*)
+          I.mov (domain_field Domainstate.Domain_exception_pointer) rsp;
+          I.pop (domain_field Domainstate.Domain_exception_pointer);
+(* BACKPORT END *)
           I.pop r11;
           I.jmp r11
       end
@@ -876,6 +925,7 @@ let rec emit_all env fallthrough i =
 
 let all_functions = ref []
 
+(* BACKPORT
 type preproc_fun_result =
   { max_stack_size : int;
     contains_nontail_calls : bool }
@@ -899,6 +949,7 @@ let preproc_fun env fun_body _fun_name =
   let fs = frame_size env in
   let r = {max_stack_size = fs; contains_nontail_calls = false} in
   proc_instr r fs fun_body
+*)
 
 (* Emission of a function declaration *)
 
@@ -918,6 +969,7 @@ let fundecl fundecl =
   D.label (emit_symbol fundecl.fun_name);
   emit_debug_info fundecl.fun_dbg;
   cfi_startproc ();
+(* BACKPORT
   if !Clflags.runtime_variant = "d" then
     emit_call "caml_assert_stack_invariants";
   let { max_stack_size; contains_nontail_calls} =
@@ -933,9 +985,11 @@ let fundecl fundecl =
     def_label ret;
     handle_overflow := Some (overflow, ret)
   end;
+*)
   emit_all env true fundecl.fun_body;
   List.iter emit_call_gc env.call_gc_sites;
   emit_call_bound_errors env;
+(* BACKPORT
   begin match !handle_overflow with
   | None -> ()
   | Some (overflow,ret) -> begin
@@ -950,6 +1004,7 @@ let fundecl fundecl =
       I.jmp (label ret)
     end
   end;
+*)
   if fundecl.fun_frame_required then begin
     let n = (frame_size env) - 8 - (if fp then 8 else 0) in
     if n <> 0
diff --git a/asmcomp/amd64/proc.ml b/asmcomp/amd64/proc.ml
index 64b05a95c8..dbeaff0cbe 100644
--- a/asmcomp/amd64/proc.ml
+++ b/asmcomp/amd64/proc.ml
@@ -297,12 +297,20 @@ let destroyed_at_c_call =
   if win64 then
     (* Win64: rbx, rsi, rdi, r12-r15, xmm6-xmm15 preserved *)
     Array.of_list(List.map phys_reg
+(* BACKPORT BEGIN
       [0;4;5;6;7;10;11;12;
+*)
+      [0;4;5;6;7;10;11;
+(* BACKPORT END *)
        100;101;102;103;104;105])
   else
     (* Unix: rbx, r12-r15 preserved *)
     Array.of_list(List.map phys_reg
+(* BACKPORT BEGIN
       [0;2;3;4;5;6;7;10;11;12;
+*)
+      [0;2;3;4;5;6;7;10;11;
+(* BACKPORT END *)
        100;101;102;103;104;105;106;107;
        108;109;110;111;112;113;114;115])
 
diff --git a/asmcomp/cmm_helpers.ml b/asmcomp/cmm_helpers.ml
index 4e0b391338..9823a80f19 100644
--- a/asmcomp/cmm_helpers.ml
+++ b/asmcomp/cmm_helpers.ml
@@ -2200,8 +2200,13 @@ let assignment_kind
     (init: Lambda.initialization_or_assignment) =
   match init, ptr with
   | Assignment, Pointer -> Caml_modify
+(* BACKPORT BEGIN
   | Heap_initialization, Pointer
   | Root_initialization, Pointer -> Caml_initialize
+*)
+  | Heap_initialization, Pointer -> Caml_initialize
+  | Root_initialization, Pointer -> Simple
+(* BACKPORT END *)
   | Assignment, Immediate
   | Heap_initialization, Immediate
   | Root_initialization, Immediate -> Simple
diff --git a/boot/ocamlc b/boot/ocamlc
index d431dbd1f4..804880e707 100755
Binary files a/boot/ocamlc and b/boot/ocamlc differ
diff --git a/boot/ocamllex b/boot/ocamllex
index b35488cadc..9c4fe66628 100755
Binary files a/boot/ocamllex and b/boot/ocamllex differ
diff --git a/build-aux/ocaml_version.m4 b/build-aux/ocaml_version.m4
index 681f116bbb..0a59107ea8 100644
--- a/build-aux/ocaml_version.m4
+++ b/build-aux/ocaml_version.m4
@@ -32,11 +32,11 @@ m4_define([OCAML__DEVELOPMENT_VERSION], [true])
 # including the patchlevel, are mandatory.
 
 m4_define([OCAML__VERSION_MAJOR], [5])
-m4_define([OCAML__VERSION_MINOR], [00])
+m4_define([OCAML__VERSION_MINOR], [0])
 m4_define([OCAML__VERSION_PATCHLEVEL], [0])
 # Note that the OCAML__VERSION_EXTRA string defined below is always empty
 # for officially-released versions of OCaml.
-m4_define([OCAML__VERSION_EXTRA], [dev0-2021-11-05])
+m4_define([OCAML__VERSION_EXTRA], [jst-backport])
 
 # The OCAML__VERSION_EXTRA_PREFIX macro defined below should be a
 # single character:
diff --git a/bytecomp/emitcode.ml b/bytecomp/emitcode.ml
index ea423e50b7..bd961633a9 100644
--- a/bytecomp/emitcode.ml
+++ b/bytecomp/emitcode.ml
@@ -300,10 +300,14 @@ let emit_instr = function
   | Kgetpubmet tag -> out opGETPUBMET; out_int tag; out_int 0
   | Kgetdynmet -> out opGETDYNMET
   | Kevent ev -> record_event ev
+(* BACKPORT BEGIN
   | Kperform -> out opPERFORM
   | Kresume -> out opRESUME
   | Kresumeterm n -> out opRESUMETERM; out_int n
   | Kreperformterm n -> out opREPERFORMTERM; out_int n
+*)
+  | Kperform | Kresume | Kresumeterm _ | Kreperformterm _ -> assert false
+(* BACKPORT END *)
   | Kstop -> out opSTOP
 
 (* Emission of a list of instructions. Include some peephole optimization. *)
diff --git a/configure b/configure
index 4eaf314bc8..eb31fbb79a 100755
Binary files a/configure and b/configure differ
diff --git a/configure.ac b/configure.ac
index b1a8b29e75..5ed9f2531e 100644
--- a/configure.ac
+++ b/configure.ac
@@ -169,6 +169,8 @@ AC_SUBST([flexlink_flags])
 AC_SUBST([PACKLD])
 AC_SUBST([stdlib_manpages])
 AC_SUBST([compute_deps])
+AC_SUBST([naked_pointers])
+AC_SUBST([naked_pointers_checker])
 AC_SUBST([force_instrumented_runtime])
 
 ## Generated files
@@ -300,9 +302,16 @@ AC_ARG_ENABLE([frame-pointers],
   [AS_HELP_STRING([--enable-frame-pointers],
     [use frame pointers in runtime and generated code])])
 
-AC_ARG_ENABLE([naked-pointers], [],
-  [AC_MSG_ERROR([Naked pointers are not allowed in OCaml Multicore.])],
-  [AC_DEFINE([NO_NAKED_POINTERS])])
+dnl AC_ARG_ENABLE([naked-pointers], [],
+dnl   [AC_MSG_ERROR([Naked pointers are not allowed in OCaml Multicore.])],
+dnl   [AC_DEFINE([NO_NAKED_POINTERS])])
+AC_ARG_ENABLE([naked-pointers],
+  [AS_HELP_STRING([--disable-naked-pointers],
+    [do not allow naked pointers])])
+
+AC_ARG_ENABLE([naked-pointers-checker],
+  [AS_HELP_STRING([--enable-naked-pointers-checker],
+    [enable the naked pointers checker])])
 
 AC_ARG_ENABLE([spacetime], [],
   [AC_MSG_ERROR([spacetime profiling was deleted in OCaml 4.12.])],
@@ -1812,7 +1821,8 @@ AS_CASE([$enable_systhreads,$enable_unix_lib],
     [*-*-mingw32|*-pc-windows],
       [systhread_support=true
       otherlibraries="$otherlibraries systhreads"
-      PTHREAD_LIBS="-lpthread"
+dnl      PTHREAD_LIBS="-lpthread"
+      PTHREAD_LIBS=''
       AC_MSG_NOTICE([the Win32 threads library is supported])],
     [AX_PTHREAD(
       [systhread_support=true
@@ -1854,6 +1864,30 @@ AS_IF([test x"$enable_frame_pointers" = "xyes"],
   [AC_MSG_NOTICE([not using frame pointers])
   frame_pointers=false])
 
+## No naked pointers
+
+AS_IF([test x"$enable_naked_pointers" = "xno" ],
+  [naked_pointers=false
+   AC_DEFINE([NO_NAKED_POINTERS])],
+  [naked_pointers=true])
+
+AS_IF([test x"$enable_naked_pointers_checker" = "xyes" ],
+  [AS_IF([test x"$enable_naked_pointers" = "xno" ],
+         [AC_MSG_ERROR(m4_normalize([
+               --enable-naked-pointers-checker and --disable-naked-pointers
+               are incompatible]))])
+   AS_CASE(["$arch","$system"],
+    [amd64,linux|amd64,macosx \
+    |amd64,openbsd|amd64,win64 \
+    |amd64,freebsd|amd64,solaris \
+    |arm64,linux|arm64,macosx],
+      [naked_pointers_checker=true
+      AC_DEFINE([NAKED_POINTERS_CHECKER])],
+    [*],
+      [AC_MSG_ERROR([naked pointers checker not supported on this platform])]
+  )],
+  [naked_pointers_checker=false])
+
 ## Check for mmap support for huge pages and contiguous heap
 OCAML_MMAP_SUPPORTS_HUGE_PAGES
 
@@ -1963,8 +1997,10 @@ AC_CHECK_LIB(execinfo, backtrace, cclibs="$cclibs -lexecinfo",[])
 
 AS_CASE([$host],
   [*-*-mingw32],
-    [bytecclibs="-lws2_32 -lversion -lpthread -lgcc_eh -lDbgHelp"
-    nativecclibs="-lws2_32 -lversion -lpthread -lgcc_eh -lDbgHelp"],
+dnl    [bytecclibs="-lws2_32 -lversion -lpthread -lgcc_eh -lDbgHelp"
+dnl    nativecclibs="-lws2_32 -lversion -lpthread -lgcc_eh -lDbgHelp"],
+    [bytecclibs="-lws2_32 -lversion -lgcc_eh -lDbgHelp"
+    nativecclibs="-lws2_32 -lversion -lgcc_eh -lDbgHelp"],
   [*-pc-windows],
     [bytecclibs="advapi32.lib ws2_32.lib version.lib"
     nativecclibs="advapi32.lib ws2_32.lib version.lib"],
diff --git a/diff-against-4.14-runtime.diff b/diff-against-4.14-runtime.diff
new file mode 100644
index 0000000000..9db6af5522
--- /dev/null
+++ b/diff-against-4.14-runtime.diff
@@ -0,0 +1,573 @@
+diff --git a/runtime/caml/alloc.h b/runtime/caml/alloc.h
+index 13f0fac2fb..816da799bb 100644
+--- a/runtime/caml/alloc.h
++++ b/runtime/caml/alloc.h
+@@ -17,9 +17,6 @@
+ #define CAML_ALLOC_H
+ 
+ 
+-#ifndef CAML_NAME_SPACE
+-#include "compatibility.h"
+-#endif
+ #include "misc.h"
+ #include "mlvalues.h"
+ 
+diff --git a/runtime/caml/bigarray.h b/runtime/caml/bigarray.h
+index fc1fb14570..1664ae3f6e 100644
+--- a/runtime/caml/bigarray.h
++++ b/runtime/caml/bigarray.h
+@@ -16,9 +16,6 @@
+ #ifndef CAML_BIGARRAY_H
+ #define CAML_BIGARRAY_H
+ 
+-#ifndef CAML_NAME_SPACE
+-#include "compatibility.h"
+-#endif
+ #include "config.h"
+ #include "mlvalues.h"
+ 
+diff --git a/runtime/caml/callback.h b/runtime/caml/callback.h
+index eef3342ec7..5c45995b8a 100644
+--- a/runtime/caml/callback.h
++++ b/runtime/caml/callback.h
+@@ -18,9 +18,6 @@
+ #ifndef CAML_CALLBACK_H
+ #define CAML_CALLBACK_H
+ 
+-#ifndef CAML_NAME_SPACE
+-#include "compatibility.h"
+-#endif
+ #include "mlvalues.h"
+ 
+ #ifdef __cplusplus
+diff --git a/runtime/caml/compatibility.h b/runtime/caml/compatibility.h
+deleted file mode 100644
+index 410f975cf7..0000000000
+--- a/runtime/caml/compatibility.h
++++ /dev/null
+@@ -1,373 +0,0 @@
+-/**************************************************************************/
+-/*                                                                        */
+-/*                                 OCaml                                  */
+-/*                                                                        */
+-/*           Damien Doligez, projet Moscova, INRIA Rocquencourt           */
+-/*                                                                        */
+-/*   Copyright 2003 Institut National de Recherche en Informatique et     */
+-/*     en Automatique.                                                    */
+-/*                                                                        */
+-/*   All rights reserved.  This file is distributed under the terms of    */
+-/*   the GNU Lesser General Public License version 2.1, with the          */
+-/*   special exception on linking described in the file LICENSE.          */
+-/*                                                                        */
+-/**************************************************************************/
+-
+-/* definitions for compatibility with old identifiers */
+-
+-#ifndef CAML_COMPATIBILITY_H
+-#define CAML_COMPATIBILITY_H
+-
+-/* internal global variables renamed between 4.02.1 and 4.03.0 */
+-#define caml_stat_top_heap_size Bsize_wsize(caml_stat_top_heap_wsz)
+-#define caml_stat_heap_size Bsize_wsize(caml_stat_heap_wsz)
+-
+-#ifndef CAML_NAME_SPACE
+-
+-/*
+-   #define --> CAMLextern  (defined with CAMLexport or CAMLprim)
+-   (rien)  --> CAMLprim
+-   g       --> global C identifier
+-   x       --> special case
+-
+-   SP* signals the special cases:
+-   - when the identifier was not simply prefixed with [caml_]
+-   - when the [caml_] version was already used for something else, and
+-     was renamed out of the way (watch out for [caml_alloc] and
+-     [caml_array_bound_error] in *.s)
+-*/
+-
+-/* a faire:
+-   - ui_*   (reverifier que win32.c n'en depend pas)
+-*/
+-
+-
+-/* **** alloc.c */
+-#define alloc CAML_DEPRECATED("alloc", "caml_alloc") caml_alloc /*SP*/
+-#define alloc_small CAML_DEPRECATED("alloc_small", "caml_alloc_small") caml_alloc_small
+-#define alloc_tuple CAML_DEPRECATED("alloc_tuple", "caml_alloc_tuple") caml_alloc_tuple
+-#define alloc_string CAML_DEPRECATED("alloc_string", "caml_alloc_string") caml_alloc_string
+-#define alloc_final CAML_DEPRECATED("alloc_final", "caml_alloc_final") caml_alloc_final
+-#define copy_string CAML_DEPRECATED("copy_string", "caml_copy_string") caml_copy_string
+-#define alloc_array CAML_DEPRECATED("alloc_array", "caml_alloc_array") caml_alloc_array
+-#define copy_string_array CAML_DEPRECATED("copy_string_array", "caml_copy_string_array") caml_copy_string_array
+-#define convert_flag_list CAML_DEPRECATED("convert_flag_list", "caml_convert_flag_list") caml_convert_flag_list
+-
+-/* **** array.c */
+-
+-/* **** backtrace.c */
+-#define backtrace_active CAML_DEPRECATED("backtrace_active", "caml_backtrace_active") caml_backtrace_active
+-#define backtrace_pos CAML_DEPRECATED("backtrace_pos", "caml_backtrace_pos") caml_backtrace_pos
+-#define backtrace_buffer CAML_DEPRECATED("backtrace_buffer", "caml_backtrace_buffer") caml_backtrace_buffer
+-#define backtrace_last_exn CAML_DEPRECATED("backtrace_last_exn", "caml_backtrace_last_exn") caml_backtrace_last_exn
+-#define print_exception_backtrace CAML_DEPRECATED("print_exception_backtrace", "caml_print_exception_backtrace") caml_print_exception_backtrace
+-
+-/* **** callback.c */
+-#define callback_depth CAML_DEPRECATED("callback_depth", "caml_callback_depth") caml_callback_depth
+-#define callbackN_exn CAML_DEPRECATED("callbackN_exn", "caml_callbackN_exn") caml_callbackN_exn
+-#define callback_exn CAML_DEPRECATED("callback_exn", "caml_callback_exn") caml_callback_exn
+-#define callback2_exn CAML_DEPRECATED("callback2_exn", "caml_callback2_exn") caml_callback2_exn
+-#define callback3_exn CAML_DEPRECATED("callback3_exn", "caml_callback3_exn") caml_callback3_exn
+-#define callback CAML_DEPRECATED("callback", "caml_callback") caml_callback
+-#define callback2 CAML_DEPRECATED("callback2", "caml_callback2") caml_callback2
+-#define callback3 CAML_DEPRECATED("callback3", "caml_callback3") caml_callback3
+-#define callbackN CAML_DEPRECATED("callbackN", "caml_callbackN") caml_callbackN
+-
+-/* **** compact.c */
+-
+-/* **** compare.c */
+-#define compare_unordered CAML_DEPRECATED("compare_unordered", "caml_compare_unordered") caml_compare_unordered
+-
+-/* **** custom.c */
+-#define alloc_custom CAML_DEPRECATED("alloc_custom", "caml_alloc_custom") caml_alloc_custom
+-#define register_custom_operations CAML_DEPRECATED("register_custom_operations", "caml_register_custom_operations") caml_register_custom_operations
+-
+-/* **** debugger.c */
+-
+-/* **** dynlink.c */
+-
+-/* **** extern.c */
+-#define output_val CAML_DEPRECATED("output_val", "caml_output_val") caml_output_val
+-#define output_value_to_malloc CAML_DEPRECATED("output_value_to_malloc", "caml_output_value_to_malloc") caml_output_value_to_malloc
+-#define output_value_to_block CAML_DEPRECATED("output_value_to_block", "caml_output_value_to_block") caml_output_value_to_block
+-#define serialize_int_1 CAML_DEPRECATED("serialize_int_1", "caml_serialize_int_1") caml_serialize_int_1
+-#define serialize_int_2 CAML_DEPRECATED("serialize_int_2", "caml_serialize_int_2") caml_serialize_int_2
+-#define serialize_int_4 CAML_DEPRECATED("serialize_int_4", "caml_serialize_int_4") caml_serialize_int_4
+-#define serialize_int_8 CAML_DEPRECATED("serialize_int_8", "caml_serialize_int_8") caml_serialize_int_8
+-#define serialize_float_4 CAML_DEPRECATED("serialize_float_4", "caml_serialize_float_4") caml_serialize_float_4
+-#define serialize_float_8 CAML_DEPRECATED("serialize_float_8", "caml_serialize_float_8") caml_serialize_float_8
+-#define serialize_block_1 CAML_DEPRECATED("serialize_block_1", "caml_serialize_block_1") caml_serialize_block_1
+-#define serialize_block_2 CAML_DEPRECATED("serialize_block_2", "caml_serialize_block_2") caml_serialize_block_2
+-#define serialize_block_4 CAML_DEPRECATED("serialize_block_4", "caml_serialize_block_4") caml_serialize_block_4
+-#define serialize_block_8 CAML_DEPRECATED("serialize_block_8", "caml_serialize_block_8") caml_serialize_block_8
+-#define serialize_block_float_8 CAML_DEPRECATED("serialize_block_float_8", "caml_serialize_block_float_8") caml_serialize_block_float_8
+-
+-/* **** fail.c */
+-#define external_raise CAML_DEPRECATED("external_raise", "caml_external_raise") caml_external_raise
+-#define mlraise CAML_DEPRECATED("mlraise", "caml_raise") caml_raise /*SP*/
+-#define raise_constant CAML_DEPRECATED("raise_constant", "caml_raise_constant") caml_raise_constant
+-#define raise_with_arg CAML_DEPRECATED("raise_with_arg", "caml_raise_with_arg") caml_raise_with_arg
+-#define raise_with_string CAML_DEPRECATED("raise_with_string", "caml_raise_with_string") caml_raise_with_string
+-#define failwith CAML_DEPRECATED("failwith", "caml_failwith") caml_failwith
+-#define invalid_argument CAML_DEPRECATED("invalid_argument", "caml_invalid_argument") caml_invalid_argument
+-#define array_bound_error CAML_DEPRECATED("array_bound_error", "caml_array_bound_error") caml_array_bound_error /*SP*/
+-#define raise_out_of_memory CAML_DEPRECATED("raise_out_of_memory", "caml_raise_out_of_memory") caml_raise_out_of_memory
+-#define raise_stack_overflow CAML_DEPRECATED("raise_stack_overflow", "caml_raise_stack_overflow") caml_raise_stack_overflow
+-#define raise_sys_error CAML_DEPRECATED("raise_sys_error", "caml_raise_sys_error") caml_raise_sys_error
+-#define raise_end_of_file CAML_DEPRECATED("raise_end_of_file", "caml_raise_end_of_file") caml_raise_end_of_file
+-#define raise_zero_divide CAML_DEPRECATED("raise_zero_divide", "caml_raise_zero_divide") caml_raise_zero_divide
+-#define raise_not_found CAML_DEPRECATED("raise_not_found", "caml_raise_not_found") caml_raise_not_found
+-#define raise_sys_blocked_io CAML_DEPRECATED("raise_sys_blocked_io", "caml_raise_sys_blocked_io") caml_raise_sys_blocked_io
+-/* **** runtime/fail_nat.c */
+-/* **** runtime/<arch>.s */
+-
+-/* **** finalise.c */
+-
+-/* **** fix_code.c */
+-
+-/* **** floats.c */
+-/*#define Double_val caml_Double_val             done in mlvalues.h as needed */
+-/*#define Store_double_val caml_Store_double_val done in mlvalues.h as needed */
+-#define copy_double CAML_DEPRECATED("copy_double", "caml_copy_double") caml_copy_double
+-
+-/* **** freelist.c */
+-
+-/* **** gc_ctrl.c */
+-
+-/* **** globroots.c */
+-#define register_global_root CAML_DEPRECATED("register_global_root", "caml_register_global_root") caml_register_global_root
+-#define remove_global_root CAML_DEPRECATED("remove_global_root", "caml_remove_global_root") caml_remove_global_root
+-
+-/* **** hash.c */
+-#define hash_variant CAML_DEPRECATED("hash_variant", "caml_hash_variant") caml_hash_variant
+-
+-/* **** instrtrace.c */
+-
+-/* **** intern.c */
+-#define input_val CAML_DEPRECATED("input_val", "caml_input_val") caml_input_val
+-#define input_val_from_string CAML_DEPRECATED("input_val_from_string", "caml_input_val_from_string") caml_input_val_from_string
+-#define input_value_from_malloc CAML_DEPRECATED("input_value_from_malloc", "caml_input_value_from_malloc") caml_input_value_from_malloc
+-#define input_value_from_block CAML_DEPRECATED("input_value_from_block", "caml_input_value_from_block") caml_input_value_from_block
+-#define deserialize_uint_1 CAML_DEPRECATED("deserialize_uint_1", "caml_deserialize_uint_1") caml_deserialize_uint_1
+-#define deserialize_sint_1 CAML_DEPRECATED("deserialize_sint_1", "caml_deserialize_sint_1") caml_deserialize_sint_1
+-#define deserialize_uint_2 CAML_DEPRECATED("deserialize_uint_2", "caml_deserialize_uint_2") caml_deserialize_uint_2
+-#define deserialize_sint_2 CAML_DEPRECATED("deserialize_sint_2", "caml_deserialize_sint_2") caml_deserialize_sint_2
+-#define deserialize_uint_4 CAML_DEPRECATED("deserialize_uint_4", "caml_deserialize_uint_4") caml_deserialize_uint_4
+-#define deserialize_sint_4 CAML_DEPRECATED("deserialize_sint_4", "caml_deserialize_sint_4") caml_deserialize_sint_4
+-#define deserialize_uint_8 CAML_DEPRECATED("deserialize_uint_8", "caml_deserialize_uint_8") caml_deserialize_uint_8
+-#define deserialize_sint_8 CAML_DEPRECATED("deserialize_sint_8", "caml_deserialize_sint_8") caml_deserialize_sint_8
+-#define deserialize_float_4 CAML_DEPRECATED("deserialize_float_4", "caml_deserialize_float_4") caml_deserialize_float_4
+-#define deserialize_float_8 CAML_DEPRECATED("deserialize_float_8", "caml_deserialize_float_8") caml_deserialize_float_8
+-#define deserialize_block_1 CAML_DEPRECATED("deserialize_block_1", "caml_deserialize_block_1") caml_deserialize_block_1
+-#define deserialize_block_2 CAML_DEPRECATED("deserialize_block_2", "caml_deserialize_block_2") caml_deserialize_block_2
+-#define deserialize_block_4 CAML_DEPRECATED("deserialize_block_4", "caml_deserialize_block_4") caml_deserialize_block_4
+-#define deserialize_block_8 CAML_DEPRECATED("deserialize_block_8", "caml_deserialize_block_8") caml_deserialize_block_8
+-#define deserialize_block_float_8 CAML_DEPRECATED("deserialize_block_float_8", "caml_deserialize_block_float_8") caml_deserialize_block_float_8
+-#define deserialize_error CAML_DEPRECATED("deserialize_error", "caml_deserialize_error") caml_deserialize_error
+-
+-/* **** interp.c */
+-
+-/* **** ints.c */
+-#define int32_ops CAML_DEPRECATED("int32_ops", "caml_int32_ops") caml_int32_ops
+-#define copy_int32 CAML_DEPRECATED("copy_int32", "caml_copy_int32") caml_copy_int32
+-/*#define Int64_val caml_Int64_val   *** done in mlvalues.h as needed */
+-#define int64_ops CAML_DEPRECATED("int64_ops", "caml_int64_ops") caml_int64_ops
+-#define copy_int64 CAML_DEPRECATED("copy_int64", "caml_copy_int64") caml_copy_int64
+-#define nativeint_ops CAML_DEPRECATED("nativeint_ops", "caml_nativeint_ops") caml_nativeint_ops
+-#define copy_nativeint CAML_DEPRECATED("copy_nativeint", "caml_copy_nativeint") caml_copy_nativeint
+-
+-/* **** io.c */
+-#define channel_mutex_free CAML_DEPRECATED("channel_mutex_free", "caml_channel_mutex_free") caml_channel_mutex_free
+-#define channel_mutex_lock CAML_DEPRECATED("channel_mutex_lock", "caml_channel_mutex_lock") caml_channel_mutex_lock
+-#define channel_mutex_unlock CAML_DEPRECATED("channel_mutex_unlock", "caml_channel_mutex_unlock") caml_channel_mutex_unlock
+-#define channel_mutex_unlock_exn CAML_DEPRECATED("channel_mutex_unlock_exn", "caml_channel_mutex_unlock_exn") caml_channel_mutex_unlock_exn
+-#define all_opened_channels CAML_DEPRECATED("all_opened_channels", "caml_all_opened_channels") caml_all_opened_channels
+-#define open_descriptor_in CAML_DEPRECATED("open_descriptor_in", "caml_open_descriptor_in") caml_open_descriptor_in /*SP*/
+-#define open_descriptor_out CAML_DEPRECATED("open_descriptor_out", "caml_open_descriptor_out") caml_open_descriptor_out /*SP*/
+-#define close_channel CAML_DEPRECATED("close_channel", "caml_close_channel") caml_close_channel /*SP*/
+-#define channel_size CAML_DEPRECATED("channel_size", "caml_channel_size") caml_channel_size /*SP*/
+-#define channel_binary_mode CAML_DEPRECATED("channel_binary_mode", "caml_channel_binary_mode") caml_channel_binary_mode
+-#define flush_partial CAML_DEPRECATED("flush_partial", "caml_flush_partial") caml_flush_partial /*SP*/
+-#define flush CAML_DEPRECATED("flush", "caml_flush") caml_flush /*SP*/
+-#define putword CAML_DEPRECATED("putword", "caml_putword") caml_putword
+-#define putblock CAML_DEPRECATED("putblock", "caml_putblock") caml_putblock
+-#define really_putblock CAML_DEPRECATED("really_putblock", "caml_really_putblock") caml_really_putblock
+-#define seek_out CAML_DEPRECATED("seek_out", "caml_seek_out") caml_seek_out /*SP*/
+-#define pos_out CAML_DEPRECATED("pos_out", "caml_pos_out") caml_pos_out /*SP*/
+-#define do_read CAML_DEPRECATED("do_read", "caml_do_read") caml_do_read
+-#define refill CAML_DEPRECATED("refill", "caml_refill") caml_refill
+-#define getword CAML_DEPRECATED("getword", "caml_getword") caml_getword
+-#define getblock CAML_DEPRECATED("getblock", "caml_getblock") caml_getblock
+-#define really_getblock CAML_DEPRECATED("really_getblock", "caml_really_getblock") caml_really_getblock
+-#define seek_in CAML_DEPRECATED("seek_in", "caml_seek_in") caml_seek_in /*SP*/
+-#define pos_in CAML_DEPRECATED("pos_in", "caml_pos_in") caml_pos_in /*SP*/
+-#define input_scan_line CAML_DEPRECATED("input_scan_line", "caml_input_scan_line") caml_input_scan_line /*SP*/
+-#define finalize_channel CAML_DEPRECATED("finalize_channel", "caml_finalize_channel") caml_finalize_channel
+-#define alloc_channel CAML_DEPRECATED("alloc_channel", "caml_alloc_channel") caml_alloc_channel
+-/*#define Val_file_offset caml_Val_file_offset   *** done in io.h as needed */
+-/*#define File_offset_val caml_File_offset_val   *** done in io.h as needed */
+-
+-/* **** lexing.c */
+-
+-/* **** main.c */
+-/* *** no change */
+-
+-/* **** major_gc.c */
+-#define heap_start CAML_DEPRECATED("heap_start", "caml_heap_start") caml_heap_start
+-#define page_table CAML_DEPRECATED("page_table", "caml_page_table") caml_page_table
+-
+-/* **** md5.c */
+-#define md5_string CAML_DEPRECATED("md5_string", "caml_md5_string") caml_md5_string
+-#define md5_chan CAML_DEPRECATED("md5_chan", "caml_md5_chan") caml_md5_chan
+-#define MD5Init CAML_DEPRECATED("MD5Init", "caml_MD5Init") caml_MD5Init
+-#define MD5Update CAML_DEPRECATED("MD5Update", "caml_MD5Update") caml_MD5Update
+-#define MD5Final CAML_DEPRECATED("MD5Final", "caml_MD5Final") caml_MD5Final
+-#define MD5Transform CAML_DEPRECATED("MD5Transform", "caml_MD5Transform") caml_MD5Transform
+-
+-/* **** memory.c */
+-#define alloc_shr CAML_DEPRECATED("alloc_shr", "caml_alloc_shr") caml_alloc_shr
+-#define initialize CAML_DEPRECATED("initialize", "caml_initialize") caml_initialize
+-#define modify CAML_DEPRECATED("modify", "caml_modify") caml_modify
+-#define stat_alloc CAML_DEPRECATED("stat_alloc", "caml_stat_alloc") caml_stat_alloc
+-#define stat_free CAML_DEPRECATED("stat_free", "caml_stat_free") caml_stat_free
+-#define stat_resize CAML_DEPRECATED("stat_resize", "caml_stat_resize") caml_stat_resize
+-
+-/* **** meta.c */
+-
+-/* **** minor_gc.c */
+-#define young_start CAML_DEPRECATED("young_start", "caml_young_start") caml_young_start
+-#define young_end CAML_DEPRECATED("young_end", "caml_young_end") caml_young_end
+-#define young_ptr CAML_DEPRECATED("young_ptr", "caml_young_ptr") caml_young_ptr
+-#define young_limit CAML_DEPRECATED("young_limit", "caml_young_limit") caml_young_limit
+-#define ref_table CAML_DEPRECATED("ref_table", "caml_ref_table") caml_ref_table
+-#define minor_collection CAML_DEPRECATED("minor_collection", "caml_minor_collection") caml_minor_collection
+-#define check_urgent_gc CAML_DEPRECATED("check_urgent_gc", "caml_check_urgent_gc") caml_check_urgent_gc
+-
+-/* **** misc.c */
+-
+-/* **** obj.c */
+-
+-/* **** parsing.c */
+-
+-/* **** prims.c */
+-
+-/* **** printexc.c */
+-#define format_caml_exception CAML_DEPRECATED("format_caml_exception", "caml_format_exception") caml_format_exception /*SP*/
+-
+-/* **** roots.c */
+-#define local_roots CAML_DEPRECATED("local_roots", "caml_local_roots") caml_local_roots
+-#define scan_roots_hook CAML_DEPRECATED("scan_roots_hook", "caml_scan_roots_hook") caml_scan_roots_hook
+-#define do_local_roots CAML_DEPRECATED("do_local_roots", "caml_do_local_roots") caml_do_local_roots
+-
+-/* **** signals.c */
+-#define pending_signals CAML_DEPRECATED("pending_signals", "caml_pending_signals") caml_pending_signals
+-#define something_to_do CAML_DEPRECATED("something_to_do", "caml_something_to_do") caml_something_to_do
+-#define enter_blocking_section_hook CAML_DEPRECATED("enter_blocking_section_hook", "caml_enter_blocking_section_hook") caml_enter_blocking_section_hook
+-#define leave_blocking_section_hook CAML_DEPRECATED("leave_blocking_section_hook", "caml_leave_blocking_section_hook") caml_leave_blocking_section_hook
+-#define enter_blocking_section CAML_DEPRECATED("enter_blocking_section", "caml_enter_blocking_section") caml_enter_blocking_section
+-#define leave_blocking_section CAML_DEPRECATED("leave_blocking_section", "caml_leave_blocking_section") caml_leave_blocking_section
+-#define convert_signal_number CAML_DEPRECATED("convert_signal_number", "caml_convert_signal_number") caml_convert_signal_number
+-
+-/* **** runtime/signals.c */
+-#define garbage_collection CAML_DEPRECATED("garbage_collection", "caml_garbage_collection") caml_garbage_collection
+-
+-/* **** stacks.c */
+-#define stack_low CAML_DEPRECATED("stack_low", "caml_stack_low") caml_stack_low
+-#define stack_high CAML_DEPRECATED("stack_high", "caml_stack_high") caml_stack_high
+-#define stack_threshold CAML_DEPRECATED("stack_threshold", "caml_stack_threshold") caml_stack_threshold
+-#define extern_sp CAML_DEPRECATED("extern_sp", "caml_extern_sp") caml_extern_sp
+-#define trapsp CAML_DEPRECATED("trapsp", "caml_trapsp") caml_trapsp
+-#define trap_barrier CAML_DEPRECATED("trap_barrier", "caml_trap_barrier") caml_trap_barrier
+-
+-/* **** startup.c */
+-#define atom_table CAML_DEPRECATED("atom_table", "caml_atom_table") caml_atom_table
+-/* **** runtime/startup_nat.c */
+-#define static_data_start CAML_DEPRECATED("static_data_start", "caml_static_data_start") caml_static_data_start
+-#define static_data_end CAML_DEPRECATED("static_data_end", "caml_static_data_end") caml_static_data_end
+-
+-/* **** str.c */
+-#define string_length CAML_DEPRECATED("string_length", "caml_string_length") caml_string_length
+-
+-/* **** sys.c */
+-#define sys_error CAML_DEPRECATED("sys_error", "caml_sys_error") caml_sys_error
+-
+-/* **** terminfo.c */
+-
+-/* **** unix.c  &  win32.c */
+-#define search_exe_in_path CAML_DEPRECATED("search_exe_in_path", "caml_search_exe_in_path") caml_search_exe_in_path
+-
+-/* **** weak.c */
+-
+-/* **** asmcomp/asmlink.ml */
+-
+-/* **** asmcomp/cmmgen.ml */
+-
+-/* **** asmcomp/asmlink.ml, asmcomp/cmmgen.ml, asmcomp/compilenv.ml */
+-
+-/* ************************************************************* */
+-
+-/* **** otherlibs/bigarray */
+-#define int8 CAML_DEPRECATED("int8", "caml_ba_int8") caml_ba_int8
+-#define uint8 CAML_DEPRECATED("uint8", "caml_ba_uint8") caml_ba_uint8
+-#define int16 CAML_DEPRECATED("int16", "caml_ba_int16") caml_ba_int16
+-#define uint16 CAML_DEPRECATED("uint16", "caml_ba_uint16") caml_ba_uint16
+-#define MAX_NUM_DIMS CAML_DEPRECATED("MAX_NUM_DIMS", "CAML_BA_MAX_NUM_DIMS") CAML_BA_MAX_NUM_DIMS
+-#define caml_bigarray_kind CAML_DEPRECATED("caml_bigarray_kind", "caml_ba_kind") caml_ba_kind
+-#define BIGARRAY_FLOAT32 CAML_DEPRECATED("BIGARRAY_FLOAT32", "CAML_BA_FLOAT32") CAML_BA_FLOAT32
+-#define BIGARRAY_FLOAT64 CAML_DEPRECATED("BIGARRAY_FLOAT64", "CAML_BA_FLOAT64") CAML_BA_FLOAT64
+-#define BIGARRAY_SINT8 CAML_DEPRECATED("BIGARRAY_SINT8", "CAML_BA_SINT8") CAML_BA_SINT8
+-#define BIGARRAY_UINT8 CAML_DEPRECATED("BIGARRAY_UINT8", "CAML_BA_UINT8") CAML_BA_UINT8
+-#define BIGARRAY_SINT16 CAML_DEPRECATED("BIGARRAY_SINT16", "CAML_BA_SINT16") CAML_BA_SINT16
+-#define BIGARRAY_UINT16 CAML_DEPRECATED("BIGARRAY_UINT16", "CAML_BA_UINT16") CAML_BA_UINT16
+-#define BIGARRAY_INT32 CAML_DEPRECATED("BIGARRAY_INT32", "CAML_BA_INT32") CAML_BA_INT32
+-#define BIGARRAY_INT64 CAML_DEPRECATED("BIGARRAY_INT64", "CAML_BA_INT64") CAML_BA_INT64
+-#define BIGARRAY_CAML_INT CAML_DEPRECATED("BIGARRAY_CAML_INT", "CAML_BA_CAML_INT") CAML_BA_CAML_INT
+-#define BIGARRAY_NATIVE_INT CAML_DEPRECATED("BIGARRAY_NATIVE_INT", "CAML_BA_NATIVE_INT") CAML_BA_NATIVE_INT
+-#define BIGARRAY_COMPLEX32 CAML_DEPRECATED("BIGARRAY_COMPLEX32", "CAML_BA_COMPLEX32") CAML_BA_COMPLEX32
+-#define BIGARRAY_COMPLEX64 CAML_DEPRECATED("BIGARRAY_COMPLEX64", "CAML_BA_COMPLEX64") CAML_BA_COMPLEX64
+-#define BIGARRAY_KIND_MASK CAML_DEPRECATED("BIGARRAY_KIND_MASK", "CAML_BA_KIND_MASK") CAML_BA_KIND_MASK
+-#define caml_bigarray_layout CAML_DEPRECATED("caml_bigarray_layout", "caml_ba_layout") caml_ba_layout
+-#define BIGARRAY_C_LAYOUT CAML_DEPRECATED("BIGARRAY_C_LAYOUT", "CAML_BA_C_LAYOUT") CAML_BA_C_LAYOUT
+-#define BIGARRAY_FORTRAN_LAYOUT CAML_DEPRECATED("BIGARRAY_FORTRAN_LAYOUT", "CAML_BA_FORTRAN_LAYOUT") CAML_BA_FORTRAN_LAYOUT
+-#define BIGARRAY_LAYOUT_MASK CAML_DEPRECATED("BIGARRAY_LAYOUT_MASK", "CAML_BA_LAYOUT_MASK") CAML_BA_LAYOUT_MASK
+-#define caml_bigarray_managed CAML_DEPRECATED("caml_bigarray_managed", "caml_ba_managed") caml_ba_managed
+-#define BIGARRAY_EXTERNAL CAML_DEPRECATED("BIGARRAY_EXTERNAL", "CAML_BA_EXTERNAL") CAML_BA_EXTERNAL
+-#define BIGARRAY_MANAGED CAML_DEPRECATED("BIGARRAY_MANAGED", "CAML_BA_MANAGED") CAML_BA_MANAGED
+-#define BIGARRAY_MAPPED_FILE CAML_DEPRECATED("BIGARRAY_MAPPED_FILE", "CAML_BA_MAPPED_FILE") CAML_BA_MAPPED_FILE
+-#define BIGARRAY_MANAGED_MASK CAML_DEPRECATED("BIGARRAY_MANAGED_MASK", "CAML_BA_MANAGED_MASK") CAML_BA_MANAGED_MASK
+-#define caml_bigarray_proxy CAML_DEPRECATED("caml_bigarray_proxy", "caml_ba_proxy") caml_ba_proxy
+-#define caml_bigarray CAML_DEPRECATED("caml_bigarray", "caml_ba_array") caml_ba_array
+-#define Bigarray_val CAML_DEPRECATED("Bigarray_val", "Caml_ba_array_val") Caml_ba_array_val
+-#define Data_bigarray_val CAML_DEPRECATED("Data_bigarray_val", "Caml_ba_data_val") Caml_ba_data_val
+-#define alloc_bigarray CAML_DEPRECATED("alloc_bigarray", "caml_ba_alloc") caml_ba_alloc
+-#define alloc_bigarray_dims CAML_DEPRECATED("alloc_bigarray_dims", "caml_ba_alloc_dims") caml_ba_alloc_dims
+-#define bigarray_map_file CAML_DEPRECATED("bigarray_map_file", "caml_ba_map_file") caml_ba_map_file
+-#define bigarray_unmap_file CAML_DEPRECATED("bigarray_unmap_file", "caml_ba_unmap_file") caml_ba_unmap_file
+-#define bigarray_element_size CAML_DEPRECATED("bigarray_element_size", "caml_ba_element_size") caml_ba_element_size
+-#define bigarray_byte_size CAML_DEPRECATED("bigarray_byte_size", "caml_ba_byte_size") caml_ba_byte_size
+-#define bigarray_deserialize CAML_DEPRECATED("bigarray_deserialize", "caml_ba_deserialize") caml_ba_deserialize
+-#define MAX_BIGARRAY_MEMORY CAML_DEPRECATED("MAX_BIGARRAY_MEMORY", "CAML_BA_MAX_MEMORY") CAML_BA_MAX_MEMORY
+-#define bigarray_create CAML_DEPRECATED("bigarray_create", "caml_ba_create") caml_ba_create
+-#define bigarray_get_N CAML_DEPRECATED("bigarray_get_N", "caml_ba_get_N") caml_ba_get_N
+-#define bigarray_get_1 CAML_DEPRECATED("bigarray_get_1", "caml_ba_get_1") caml_ba_get_1
+-#define bigarray_get_2 CAML_DEPRECATED("bigarray_get_2", "caml_ba_get_2") caml_ba_get_2
+-#define bigarray_get_3 CAML_DEPRECATED("bigarray_get_3", "caml_ba_get_3") caml_ba_get_3
+-#define bigarray_get_generic CAML_DEPRECATED("bigarray_get_generic", "caml_ba_get_generic") caml_ba_get_generic
+-#define bigarray_set_1 CAML_DEPRECATED("bigarray_set_1", "caml_ba_set_1") caml_ba_set_1
+-#define bigarray_set_2 CAML_DEPRECATED("bigarray_set_2", "caml_ba_set_2") caml_ba_set_2
+-#define bigarray_set_3 CAML_DEPRECATED("bigarray_set_3", "caml_ba_set_3") caml_ba_set_3
+-#define bigarray_set_N CAML_DEPRECATED("bigarray_set_N", "caml_ba_set_N") caml_ba_set_N
+-#define bigarray_set_generic CAML_DEPRECATED("bigarray_set_generic", "caml_ba_set_generic") caml_ba_set_generic
+-#define bigarray_num_dims CAML_DEPRECATED("bigarray_num_dims", "caml_ba_num_dims") caml_ba_num_dims
+-#define bigarray_dim CAML_DEPRECATED("bigarray_dim", "caml_ba_dim") caml_ba_dim
+-#define bigarray_kind CAML_DEPRECATED("bigarray_kind", "caml_ba_kind") caml_ba_kind
+-#define bigarray_layout CAML_DEPRECATED("bigarray_layout", "caml_ba_layout") caml_ba_layout
+-#define bigarray_slice CAML_DEPRECATED("bigarray_slice", "caml_ba_slice") caml_ba_slice
+-#define bigarray_sub CAML_DEPRECATED("bigarray_sub", "caml_ba_sub") caml_ba_sub
+-#define bigarray_blit CAML_DEPRECATED("bigarray_blit", "caml_ba_blit") caml_ba_blit
+-#define bigarray_fill CAML_DEPRECATED("bigarray_fill", "caml_ba_fill") caml_ba_fill
+-#define bigarray_reshape CAML_DEPRECATED("bigarray_reshape", "caml_ba_reshape") caml_ba_reshape
+-#define bigarray_init CAML_DEPRECATED("bigarray_init", "caml_ba_init") caml_ba_init
+-
+-#endif /* CAML_NAME_SPACE */
+-#endif /* CAML_COMPATIBILITY_H */
+diff --git a/runtime/caml/config.h b/runtime/caml/config.h
+index 471a6bc6f4..70eef5c61d 100644
+--- a/runtime/caml/config.h
++++ b/runtime/caml/config.h
+@@ -41,10 +41,6 @@
+ 
+ #include "s.h"
+ 
+-#ifndef CAML_NAME_SPACE
+-#include "compatibility.h"
+-#endif
+-
+ #ifndef CAML_CONFIG_H_NO_TYPEDEFS
+ 
+ #include <stddef.h>
+diff --git a/runtime/caml/custom.h b/runtime/caml/custom.h
+index 420121f43e..231019aef7 100644
+--- a/runtime/caml/custom.h
++++ b/runtime/caml/custom.h
+@@ -17,9 +17,6 @@
+ #define CAML_CUSTOM_H
+ 
+ 
+-#ifndef CAML_NAME_SPACE
+-#include "compatibility.h"
+-#endif
+ #include "mlvalues.h"
+ 
+ struct custom_fixed_length {
+diff --git a/runtime/caml/domain_state.h b/runtime/caml/domain_state.h
+index 84e677d041..911895a3aa 100644
+--- a/runtime/caml/domain_state.h
++++ b/runtime/caml/domain_state.h
+@@ -29,11 +29,7 @@ typedef value extra_params_area[NUM_EXTRA_PARAMS];
+  * via native code, which is why the indices are important */
+ 
+ typedef struct {
+-#ifdef CAML_NAME_SPACE
+ #define DOMAIN_STATE(type, name) CAMLalign(8) type name;
+-#else
+-#define DOMAIN_STATE(type, name) CAMLalign(8) type _##name;
+-#endif
+ #include "domain_state.tbl"
+ #undef DOMAIN_STATE
+ } caml_domain_state;
+@@ -45,11 +41,7 @@ enum {
+ #undef DOMAIN_STATE
+ };
+ 
+-#ifdef CAML_NAME_SPACE
+ #define LAST_DOMAIN_STATE_MEMBER extra_params
+-#else
+-#define LAST_DOMAIN_STATE_MEMBER _extra_params
+-#endif
+ 
+ /* Check that the structure was laid out without padding,
+    since the runtime assumes this in computing offsets */
+@@ -58,10 +50,6 @@ CAML_STATIC_ASSERT(
+     (Domain_state_num_fields - 1) * 8);
+ 
+ CAMLextern caml_domain_state* Caml_state;
+-#ifdef CAML_NAME_SPACE
+ #define Caml_state_field(field) Caml_state->field
+-#else
+-#define Caml_state_field(field) Caml_state->_##field
+-#endif
+ 
+ #endif /* CAML_STATE_H */
+diff --git a/runtime/caml/fail.h b/runtime/caml/fail.h
+index 822c603260..887ef9c227 100644
+--- a/runtime/caml/fail.h
++++ b/runtime/caml/fail.h
+@@ -20,9 +20,6 @@
+ #include <setjmp.h>
+ #endif /* CAML_INTERNALS */
+ 
+-#ifndef CAML_NAME_SPACE
+-#include "compatibility.h"
+-#endif
+ #include "misc.h"
+ #include "mlvalues.h"
+ 
+diff --git a/runtime/caml/intext.h b/runtime/caml/intext.h
+index a2a3fb8248..b68030aad8 100644
+--- a/runtime/caml/intext.h
++++ b/runtime/caml/intext.h
+@@ -18,9 +18,6 @@
+ #ifndef CAML_INTEXT_H
+ #define CAML_INTEXT_H
+ 
+-#ifndef CAML_NAME_SPACE
+-#include "compatibility.h"
+-#endif
+ #include "misc.h"
+ #include "mlvalues.h"
+ 
+diff --git a/runtime/caml/memory.h b/runtime/caml/memory.h
+index 1e9cdf6d9b..8837d33d25 100644
+--- a/runtime/caml/memory.h
++++ b/runtime/caml/memory.h
+@@ -18,9 +18,6 @@
+ #ifndef CAML_MEMORY_H
+ #define CAML_MEMORY_H
+ 
+-#ifndef CAML_NAME_SPACE
+-#include "compatibility.h"
+-#endif
+ #include "config.h"
+ #ifdef CAML_INTERNALS
+ #include "gc.h"
+diff --git a/runtime/caml/misc.h b/runtime/caml/misc.h
+index 5915c30a7b..46bc21511b 100644
+--- a/runtime/caml/misc.h
++++ b/runtime/caml/misc.h
+@@ -18,9 +18,6 @@
+ #ifndef CAML_MISC_H
+ #define CAML_MISC_H
+ 
+-#ifndef CAML_NAME_SPACE
+-#include "compatibility.h"
+-#endif
+ #include "config.h"
+ 
+ /* Standard definitions */
+diff --git a/runtime/caml/mlvalues.h b/runtime/caml/mlvalues.h
+index 677e44e183..9173ab8c2b 100644
+--- a/runtime/caml/mlvalues.h
++++ b/runtime/caml/mlvalues.h
+@@ -16,9 +16,6 @@
+ #ifndef CAML_MLVALUES_H
+ #define CAML_MLVALUES_H
+ 
+-#ifndef CAML_NAME_SPACE
+-#include "compatibility.h"
+-#endif
+ #include "config.h"
+ #include "misc.h"
+ 
+diff --git a/runtime/caml/signals.h b/runtime/caml/signals.h
+index c6aeebfc78..3a3b86911c 100644
+--- a/runtime/caml/signals.h
++++ b/runtime/caml/signals.h
+@@ -20,9 +20,6 @@
+ #include<signal.h>
+ #endif
+ 
+-#ifndef CAML_NAME_SPACE
+-#include "compatibility.h"
+-#endif
+ #include "misc.h"
+ #include "mlvalues.h"
+ 
diff --git a/diff-against-trunk-support.diff b/diff-against-trunk-support.diff
new file mode 100644
index 0000000000..b639107fc5
--- /dev/null
+++ b/diff-against-trunk-support.diff
@@ -0,0 +1,2526 @@
+diff --git a/testsuite/tests/asmcomp/polling.c b/testsuite/tests/asmcomp/polling.c
+index 93620c9bcc..4f6bf1dcab 100644
+--- a/testsuite/tests/asmcomp/polling.c
++++ b/testsuite/tests/asmcomp/polling.c
+@@ -12,7 +12,11 @@ CAMLprim value request_minor_gc(value v) {
+     tests are only run in a single domain, so we're probably
+     good.
+   */
++#if 0
+   Caml_state->young_limit = (uintnat)Caml_state->young_end;
++#endif
++  caml_something_to_do = 1;
++  Caml_state->young_limit = Caml_state->young_alloc_end;
+ 
+   return Val_unit;
+ }
+diff --git a/testsuite/tests/backtrace/backtrace2.reference b/testsuite/tests/backtrace/backtrace2.reference
+index 20ef708fe0..e75c2e2982 100644
+--- a/testsuite/tests/backtrace/backtrace2.reference
++++ b/testsuite/tests/backtrace/backtrace2.reference
+@@ -35,7 +35,7 @@ Uncaught exception Invalid_argument("index out of bounds")
+ Raised by primitive operation at Backtrace2.run in file "backtrace2.ml", line 62, characters 14-22
+ test_Not_found
+ Uncaught exception Not_found
+-Raised at Stdlib__Hashtbl.find in file "hashtbl.ml", line 541, characters 13-28
++Raised at Stdlib__Hashtbl.find in file "hashtbl.ml", line 549, characters 13-28
+ Called from Backtrace2.test_Not_found in file "backtrace2.ml", line 43, characters 9-42
+ Re-raised at Backtrace2.test_Not_found in file "backtrace2.ml", line 43, characters 61-70
+ Called from Backtrace2.run in file "backtrace2.ml", line 62, characters 11-23
+@@ -46,13 +46,13 @@ Called from Backtrace2.test_lazy.aux in file "backtrace2.ml", line 47, character
+ Called from Backtrace2.test_lazy.aux in file "backtrace2.ml", line 47, characters 43-52
+ Called from Backtrace2.test_lazy.aux in file "backtrace2.ml", line 47, characters 43-52
+ Called from Backtrace2.test_lazy.aux in file "backtrace2.ml", line 47, characters 43-52
+-Called from CamlinternalLazy.do_force_block in file "camlinternalLazy.ml", line 49, characters 17-27
+-Re-raised at CamlinternalLazy.do_force_block in file "camlinternalLazy.ml", line 56, characters 4-11
++Called from CamlinternalLazy.force_lazy_block in file "camlinternalLazy.ml", line 110, characters 17-27
++Re-raised at CamlinternalLazy.force_lazy_block in file "camlinternalLazy.ml", line 115, characters 4-11
+ Called from Backtrace2.run in file "backtrace2.ml", line 62, characters 11-23
+ Uncaught exception Not_found
+-Raised at Stdlib__Hashtbl.find in file "hashtbl.ml", line 541, characters 13-28
++Raised at Stdlib__Hashtbl.find in file "hashtbl.ml", line 549, characters 13-28
+ Called from Backtrace2.test_lazy.exception_raised_internally in file "backtrace2.ml", line 50, characters 8-41
+-Re-raised at CamlinternalLazy.do_force_block.(fun) in file "camlinternalLazy.ml", line 54, characters 43-50
+-Called from CamlinternalLazy.do_force_block in file "camlinternalLazy.ml", line 49, characters 17-27
+-Re-raised at CamlinternalLazy.do_force_block in file "camlinternalLazy.ml", line 56, characters 4-11
++Re-raised at CamlinternalLazy.force_lazy_block.(fun) in file "camlinternalLazy.ml", line 114, characters 56-63
++Called from CamlinternalLazy.force_lazy_block in file "camlinternalLazy.ml", line 110, characters 17-27
++Re-raised at CamlinternalLazy.force_lazy_block in file "camlinternalLazy.ml", line 115, characters 4-11
+ Called from Backtrace2.run in file "backtrace2.ml", line 62, characters 11-23
+diff --git a/testsuite/tests/backtrace/backtrace_c_exn.ml b/testsuite/tests/backtrace/backtrace_c_exn.ml
+index 9b0077d509..1680c23f7b 100644
+--- a/testsuite/tests/backtrace/backtrace_c_exn.ml
++++ b/testsuite/tests/backtrace/backtrace_c_exn.ml
+@@ -2,6 +2,8 @@
+    modules = "backtrace_c_exn_.c"
+    flags = "-g"
+    ocamlrunparam += ",b=1"
++   * skip
++   reason = "OCaml 5 only"
+ *)
+ 
+ (* https://github.com/ocaml-multicore/ocaml-multicore/issues/498 *)
+diff --git a/testsuite/tests/backtrace/backtrace_dynlink.reference b/testsuite/tests/backtrace/backtrace_dynlink.reference
+index 12390de624..5ee294030f 100644
+--- a/testsuite/tests/backtrace/backtrace_dynlink.reference
++++ b/testsuite/tests/backtrace/backtrace_dynlink.reference
+@@ -1,18 +1,22 @@
+ Raised by primitive operation at Backtrace_dynlink_plugin in file "backtrace_dynlink_plugin.ml", line 6, characters 13-38
+ Called from Dynlink.Native.run.(fun) in file "otherlibs/dynlink/native/dynlink.ml", line 85, characters 12-29
+ Called from Stdlib__List.iter in file "list.ml", line 110, characters 12-15
+-Called from Dynlink_common.Make.load.(fun) in file "otherlibs/dynlink/dynlink_common.ml", line 350, characters 13-44
++Called from Dynlink_common.Make.load.(fun) in file "otherlibs/dynlink/dynlink_common.ml", line 352, characters 13-44
+ Called from Stdlib__List.iter in file "list.ml", line 110, characters 12-15
+-Called from Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 348, characters 8-240
+-Called from Dynlink_common.Make.loadfile in file "otherlibs/dynlink/dynlink_common.ml" (inlined), line 360, characters 26-45
++Called from Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 350, characters 8-240
++Called from Dynlink_common.Make.loadfile in file "otherlibs/dynlink/dynlink_common.ml" (inlined), line 362, characters 26-45
+ Called from Backtrace_dynlink in file "backtrace_dynlink.ml", line 35, characters 4-52
+ execution of module initializers in the shared library failed: Failure("SUCCESS")
+-Raised by primitive operation at Dynlink.Native.run.(fun) in file "otherlibs/dynlink/native/dynlink.ml", line 85, characters 12-29
++Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
++Called from Backtrace_dynlink_plugin in file "backtrace_dynlink_plugin.ml", line 3, characters 4-22
++Re-raised at Backtrace_dynlink_plugin in file "backtrace_dynlink_plugin.ml", line 8, characters 5-12
++Called from Dynlink.Native.run.(fun) in file "otherlibs/dynlink/native/dynlink.ml", line 85, characters 12-29
++Called from Dynlink.Native.run.(fun) in file "otherlibs/dynlink/native/dynlink.ml", line 85, characters 12-29
+ Re-raised at Dynlink.Native.run.(fun) in file "otherlibs/dynlink/native/dynlink.ml", line 87, characters 10-149
+ Called from Stdlib__List.iter in file "list.ml", line 110, characters 12-15
+-Called from Dynlink_common.Make.load.(fun) in file "otherlibs/dynlink/dynlink_common.ml", line 350, characters 13-44
++Called from Dynlink_common.Make.load.(fun) in file "otherlibs/dynlink/dynlink_common.ml", line 352, characters 13-44
+ Called from Stdlib__List.iter in file "list.ml", line 110, characters 12-15
+-Called from Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 348, characters 8-240
+-Re-raised at Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 358, characters 8-17
+-Called from Dynlink_common.Make.loadfile in file "otherlibs/dynlink/dynlink_common.ml" (inlined), line 360, characters 26-45
++Called from Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 350, characters 8-240
++Re-raised at Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 360, characters 8-17
++Called from Dynlink_common.Make.loadfile in file "otherlibs/dynlink/dynlink_common.ml" (inlined), line 362, characters 26-45
+ Called from Backtrace_dynlink in file "backtrace_dynlink.ml", line 35, characters 4-52
+diff --git a/testsuite/tests/backtrace/backtrace_effects.ml b/testsuite/tests/backtrace/backtrace_effects.ml
+index 68ffcd420c..d616d54eb9 100644
+--- a/testsuite/tests/backtrace/backtrace_effects.ml
++++ b/testsuite/tests/backtrace/backtrace_effects.ml
+@@ -2,6 +2,8 @@
+    flags = "-g"
+    ocamlrunparam += ",b=1"
+    exit_status = "2"
++   * skip
++   reason = "OCaml 5 only"
+ *)
+ 
+ open EffectHandlers
+diff --git a/testsuite/tests/backtrace/backtrace_effects_nested.ml b/testsuite/tests/backtrace/backtrace_effects_nested.ml
+index c5e41cfd0a..a536c944e9 100644
+--- a/testsuite/tests/backtrace/backtrace_effects_nested.ml
++++ b/testsuite/tests/backtrace/backtrace_effects_nested.ml
+@@ -1,5 +1,7 @@
+ (* TEST
+    flags = "-g"
++   * skip
++   reason = "OCaml 5 only"
+ *)
+ 
+ open EffectHandlers
+diff --git a/testsuite/tests/backtrace/backtrace_systhreads.reference b/testsuite/tests/backtrace/backtrace_systhreads.reference
+index c1b45f1b63..b6e95802e6 100644
+--- a/testsuite/tests/backtrace/backtrace_systhreads.reference
++++ b/testsuite/tests/backtrace/backtrace_systhreads.reference
+@@ -2,24 +2,24 @@ Thread 2 killed on uncaught exception Failure("0")
+ Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
+ Called from Backtrace_systhreads.thread_func in file "backtrace_systhreads.ml", line 14, characters 6-37
+ Re-raised at Backtrace_systhreads.thread_func in file "backtrace_systhreads.ml", line 18, characters 5-14
+-Called from Thread.create.(fun) in file "thread.ml", line 49, characters 8-14
++Called from Thread.create.(fun) in file "thread.ml", line 51, characters 8-14
+ Thread 3 killed on uncaught exception Failure("1")
+ Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
+ Called from Backtrace_systhreads.thread_func in file "backtrace_systhreads.ml", line 14, characters 6-37
+ Re-raised at Backtrace_systhreads.thread_func in file "backtrace_systhreads.ml", line 18, characters 5-14
+-Called from Thread.create.(fun) in file "thread.ml", line 49, characters 8-14
++Called from Thread.create.(fun) in file "thread.ml", line 51, characters 8-14
+ Thread 4 killed on uncaught exception Failure("2")
+ Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
+ Called from Backtrace_systhreads.thread_func in file "backtrace_systhreads.ml", line 14, characters 6-37
+ Re-raised at Backtrace_systhreads.thread_func in file "backtrace_systhreads.ml", line 18, characters 5-14
+-Called from Thread.create.(fun) in file "thread.ml", line 49, characters 8-14
++Called from Thread.create.(fun) in file "thread.ml", line 51, characters 8-14
+ Thread 5 killed on uncaught exception Failure("3")
+ Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
+ Called from Backtrace_systhreads.thread_func in file "backtrace_systhreads.ml", line 14, characters 6-37
+ Re-raised at Backtrace_systhreads.thread_func in file "backtrace_systhreads.ml", line 18, characters 5-14
+-Called from Thread.create.(fun) in file "thread.ml", line 49, characters 8-14
++Called from Thread.create.(fun) in file "thread.ml", line 51, characters 8-14
+ Thread 1 killed on uncaught exception Failure("backtrace")
+ Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
+ Called from Backtrace_systhreads.thread_backtrace in file "backtrace_systhreads.ml", line 22, characters 6-27
+ Re-raised at Backtrace_systhreads.thread_backtrace in file "backtrace_systhreads.ml", line 26, characters 5-14
+-Called from Thread.create.(fun) in file "thread.ml", line 49, characters 8-14
++Called from Thread.create.(fun) in file "thread.ml", line 51, characters 8-14
+diff --git a/testsuite/tests/backtrace/callstack.reference b/testsuite/tests/backtrace/callstack.reference
+index 2243abe4fd..c83ca05156 100644
+--- a/testsuite/tests/backtrace/callstack.reference
++++ b/testsuite/tests/backtrace/callstack.reference
+@@ -12,4 +12,4 @@ Raised by primitive operation at Callstack.f0 in file "callstack.ml", line 11, c
+ Called from Callstack.f1 in file "callstack.ml", line 12, characters 27-32
+ Called from Callstack.f2 in file "callstack.ml", line 13, characters 27-32
+ Called from Callstack.f3 in file "callstack.ml", line 14, characters 27-32
+-Called from Thread.create.(fun) in file "thread.ml", line 49, characters 8-14
++Called from Thread.create.(fun) in file "thread.ml", line 51, characters 8-14
+diff --git a/testsuite/tests/backtrace/lazy.reference b/testsuite/tests/backtrace/lazy.reference
+index 5e8f53482f..72b9ef2117 100644
+--- a/testsuite/tests/backtrace/lazy.reference
++++ b/testsuite/tests/backtrace/lazy.reference
+@@ -1,14 +1,12 @@
+ Uncaught exception Not_found
+ Raised at Lazy.l1 in file "lazy.ml", line 7, characters 28-45
+-Called from CamlinternalLazy.do_force_block in file "camlinternalLazy.ml", line 49, characters 17-27
+-Re-raised at CamlinternalLazy.do_force_block in file "camlinternalLazy.ml", line 56, characters 4-11
+-Called from CamlinternalLazy.force_lazy_block in file "camlinternalLazy.ml" (inlined), line 78, characters 27-67
++Called from CamlinternalLazy.force_lazy_block in file "camlinternalLazy.ml", line 110, characters 17-27
++Re-raised at CamlinternalLazy.force_lazy_block in file "camlinternalLazy.ml", line 115, characters 4-11
+ Called from Lazy.test1 in file "lazy.ml", line 10, characters 11-24
+ Called from Lazy.run in file "lazy.ml", line 19, characters 4-11
+ Uncaught exception Not_found
+ Raised at Lazy.l2 in file "lazy.ml", line 12, characters 28-45
+-Called from CamlinternalLazy.do_force_block in file "camlinternalLazy.ml", line 49, characters 17-27
+-Re-raised at CamlinternalLazy.do_force_block in file "camlinternalLazy.ml", line 56, characters 4-11
+-Called from CamlinternalLazy.force_lazy_block in file "camlinternalLazy.ml" (inlined), line 78, characters 27-67
++Called from CamlinternalLazy.force_lazy_block in file "camlinternalLazy.ml", line 110, characters 17-27
++Re-raised at CamlinternalLazy.force_lazy_block in file "camlinternalLazy.ml", line 115, characters 4-11
+ Called from Lazy.test2 in file "lazy.ml", line 15, characters 6-15
+ Called from Lazy.run in file "lazy.ml", line 19, characters 4-11
+diff --git a/testsuite/tests/basic/patmatch_for_multiple.ml b/testsuite/tests/basic/patmatch_for_multiple.ml
+index 7b45d08c19..6433f3d9a4 100644
+--- a/testsuite/tests/basic/patmatch_for_multiple.ml
++++ b/testsuite/tests/basic/patmatch_for_multiple.ml
+@@ -26,15 +26,15 @@ match (3, 2, 1) with
+ | _ -> false
+ ;;
+ [%%expect{|
+-(let (*match*/279 = 3 *match*/280 = 2 *match*/281 = 1)
++(let (*match*/274 = 3 *match*/275 = 2 *match*/276 = 1)
+   (catch
+     (catch
+-      (catch (if (!= *match*/280 3) (exit 3) (exit 1)) with (3)
+-        (if (!= *match*/279 1) (exit 2) (exit 1)))
++      (catch (if (!= *match*/275 3) (exit 3) (exit 1)) with (3)
++        (if (!= *match*/274 1) (exit 2) (exit 1)))
+      with (2) 0)
+    with (1) 1))
+-(let (*match*/279 = 3 *match*/280 = 2 *match*/281 = 1)
+-  (catch (if (!= *match*/280 3) (if (!= *match*/279 1) 0 (exit 1)) (exit 1))
++(let (*match*/274 = 3 *match*/275 = 2 *match*/276 = 1)
++  (catch (if (!= *match*/275 3) (if (!= *match*/274 1) 0 (exit 1)) (exit 1))
+    with (1) 1))
+ - : bool = false
+ |}];;
+@@ -47,26 +47,26 @@ match (3, 2, 1) with
+ | _ -> false
+ ;;
+ [%%expect{|
+-(let (*match*/284 = 3 *match*/285 = 2 *match*/286 = 1)
++(let (*match*/279 = 3 *match*/280 = 2 *match*/281 = 1)
+   (catch
+     (catch
+       (catch
+-        (if (!= *match*/285 3) (exit 6)
+-          (let (x/288 =a (makeblock 0 *match*/284 *match*/285 *match*/286))
+-            (exit 4 x/288)))
++        (if (!= *match*/280 3) (exit 6)
++          (let (x/283 =a (makeblock 0 *match*/279 *match*/280 *match*/281))
++            (exit 4 x/283)))
+        with (6)
+-        (if (!= *match*/284 1) (exit 5)
+-          (let (x/287 =a (makeblock 0 *match*/284 *match*/285 *match*/286))
+-            (exit 4 x/287))))
++        (if (!= *match*/279 1) (exit 5)
++          (let (x/282 =a (makeblock 0 *match*/279 *match*/280 *match*/281))
++            (exit 4 x/282))))
+      with (5) 0)
+-   with (4 x/282) (seq (ignore x/282) 1)))
+-(let (*match*/284 = 3 *match*/285 = 2 *match*/286 = 1)
++   with (4 x/277) (seq (ignore x/277) 1)))
++(let (*match*/279 = 3 *match*/280 = 2 *match*/281 = 1)
+   (catch
+-    (if (!= *match*/285 3)
+-      (if (!= *match*/284 1) 0
+-        (exit 4 (makeblock 0 *match*/284 *match*/285 *match*/286)))
+-      (exit 4 (makeblock 0 *match*/284 *match*/285 *match*/286)))
+-   with (4 x/282) (seq (ignore x/282) 1)))
++    (if (!= *match*/280 3)
++      (if (!= *match*/279 1) 0
++        (exit 4 (makeblock 0 *match*/279 *match*/280 *match*/281)))
++      (exit 4 (makeblock 0 *match*/279 *match*/280 *match*/281)))
++   with (4 x/277) (seq (ignore x/277) 1)))
+ - : bool = false
+ |}];;
+ 
+@@ -76,8 +76,8 @@ let _ = fun a b ->
+   | ((true, _) as _g)
+   | ((false, _) as _g) -> ()
+ [%%expect{|
+-(function a/289[int] b/290 : int 0)
+-(function a/289[int] b/290 : int 0)
++(function a/284[int] b/285 : int 0)
++(function a/284[int] b/285 : int 0)
+ - : bool -> 'a -> unit = <fun>
+ |}];;
+ 
+@@ -96,8 +96,8 @@ let _ = fun a b -> match a, b with
+ | (false, _) as p -> p
+ (* outside, trivial *)
+ [%%expect {|
+-(function a/293[int] b/294 (let (p/295 =a (makeblock 0 a/293 b/294)) p/295))
+-(function a/293[int] b/294 (makeblock 0 a/293 b/294))
++(function a/288[int] b/289 (let (p/290 =a (makeblock 0 a/288 b/289)) p/290))
++(function a/288[int] b/289 (makeblock 0 a/288 b/289))
+ - : bool -> 'a -> bool * 'a = <fun>
+ |}]
+ 
+@@ -106,8 +106,8 @@ let _ = fun a b -> match a, b with
+ | ((false, _) as p) -> p
+ (* inside, trivial *)
+ [%%expect{|
+-(function a/297[int] b/298 (let (p/299 =a (makeblock 0 a/297 b/298)) p/299))
+-(function a/297[int] b/298 (makeblock 0 a/297 b/298))
++(function a/292[int] b/293 (let (p/294 =a (makeblock 0 a/292 b/293)) p/294))
++(function a/292[int] b/293 (makeblock 0 a/292 b/293))
+ - : bool -> 'a -> bool * 'a = <fun>
+ |}];;
+ 
+@@ -116,11 +116,11 @@ let _ = fun a b -> match a, b with
+ | (false as x, _) as p -> x, p
+ (* outside, simple *)
+ [%%expect {|
+-(function a/303[int] b/304
+-  (let (x/305 =a[int] a/303 p/306 =a (makeblock 0 a/303 b/304))
+-    (makeblock 0 (int,*) x/305 p/306)))
+-(function a/303[int] b/304
+-  (makeblock 0 (int,*) a/303 (makeblock 0 a/303 b/304)))
++(function a/298[int] b/299
++  (let (x/300 =a[int] a/298 p/301 =a (makeblock 0 a/298 b/299))
++    (makeblock 0 (int,*) x/300 p/301)))
++(function a/298[int] b/299
++  (makeblock 0 (int,*) a/298 (makeblock 0 a/298 b/299)))
+ - : bool -> 'a -> bool * (bool * 'a) = <fun>
+ |}]
+ 
+@@ -129,11 +129,11 @@ let _ = fun a b -> match a, b with
+ | ((false as x, _) as p) -> x, p
+ (* inside, simple *)
+ [%%expect {|
+-(function a/309[int] b/310
+-  (let (x/311 =a[int] a/309 p/312 =a (makeblock 0 a/309 b/310))
+-    (makeblock 0 (int,*) x/311 p/312)))
+-(function a/309[int] b/310
+-  (makeblock 0 (int,*) a/309 (makeblock 0 a/309 b/310)))
++(function a/304[int] b/305
++  (let (x/306 =a[int] a/304 p/307 =a (makeblock 0 a/304 b/305))
++    (makeblock 0 (int,*) x/306 p/307)))
++(function a/304[int] b/305
++  (makeblock 0 (int,*) a/304 (makeblock 0 a/304 b/305)))
+ - : bool -> 'a -> bool * (bool * 'a) = <fun>
+ |}]
+ 
+@@ -142,15 +142,15 @@ let _ = fun a b -> match a, b with
+ | (false, x) as p -> x, p
+ (* outside, complex *)
+ [%%expect{|
+-(function a/319[int] b/320[int]
+-  (if a/319
+-    (let (x/321 =a[int] a/319 p/322 =a (makeblock 0 a/319 b/320))
+-      (makeblock 0 (int,*) x/321 p/322))
+-    (let (x/323 =a b/320 p/324 =a (makeblock 0 a/319 b/320))
+-      (makeblock 0 (int,*) x/323 p/324))))
+-(function a/319[int] b/320[int]
+-  (if a/319 (makeblock 0 (int,*) a/319 (makeblock 0 a/319 b/320))
+-    (makeblock 0 (int,*) b/320 (makeblock 0 a/319 b/320))))
++(function a/314[int] b/315[int]
++  (if a/314
++    (let (x/316 =a[int] a/314 p/317 =a (makeblock 0 a/314 b/315))
++      (makeblock 0 (int,*) x/316 p/317))
++    (let (x/318 =a b/315 p/319 =a (makeblock 0 a/314 b/315))
++      (makeblock 0 (int,*) x/318 p/319))))
++(function a/314[int] b/315[int]
++  (if a/314 (makeblock 0 (int,*) a/314 (makeblock 0 a/314 b/315))
++    (makeblock 0 (int,*) b/315 (makeblock 0 a/314 b/315))))
+ - : bool -> bool -> bool * (bool * bool) = <fun>
+ |}]
+ 
+@@ -160,19 +160,19 @@ let _ = fun a b -> match a, b with
+   -> x, p
+ (* inside, complex *)
+ [%%expect{|
+-(function a/325[int] b/326[int]
++(function a/320[int] b/321[int]
+   (catch
+-    (if a/325
+-      (let (x/333 =a[int] a/325 p/334 =a (makeblock 0 a/325 b/326))
+-        (exit 10 x/333 p/334))
+-      (let (x/331 =a b/326 p/332 =a (makeblock 0 a/325 b/326))
+-        (exit 10 x/331 p/332)))
+-   with (10 x/327[int] p/328) (makeblock 0 (int,*) x/327 p/328)))
+-(function a/325[int] b/326[int]
++    (if a/320
++      (let (x/328 =a[int] a/320 p/329 =a (makeblock 0 a/320 b/321))
++        (exit 10 x/328 p/329))
++      (let (x/326 =a b/321 p/327 =a (makeblock 0 a/320 b/321))
++        (exit 10 x/326 p/327)))
++   with (10 x/322[int] p/323) (makeblock 0 (int,*) x/322 p/323)))
++(function a/320[int] b/321[int]
+   (catch
+-    (if a/325 (exit 10 a/325 (makeblock 0 a/325 b/326))
+-      (exit 10 b/326 (makeblock 0 a/325 b/326)))
+-   with (10 x/327[int] p/328) (makeblock 0 (int,*) x/327 p/328)))
++    (if a/320 (exit 10 a/320 (makeblock 0 a/320 b/321))
++      (exit 10 b/321 (makeblock 0 a/320 b/321)))
++   with (10 x/322[int] p/323) (makeblock 0 (int,*) x/322 p/323)))
+ - : bool -> bool -> bool * (bool * bool) = <fun>
+ |}]
+ 
+@@ -185,15 +185,15 @@ let _ = fun a b -> match a, b with
+ | (false as x, _) as p -> x, p
+ (* outside, onecase *)
+ [%%expect {|
+-(function a/335[int] b/336[int]
+-  (if a/335
+-    (let (x/337 =a[int] a/335 _p/338 =a (makeblock 0 a/335 b/336))
+-      (makeblock 0 (int,*) x/337 [0: 1 1]))
+-    (let (x/339 =a[int] a/335 p/340 =a (makeblock 0 a/335 b/336))
+-      (makeblock 0 (int,*) x/339 p/340))))
+-(function a/335[int] b/336[int]
+-  (if a/335 (makeblock 0 (int,*) a/335 [0: 1 1])
+-    (makeblock 0 (int,*) a/335 (makeblock 0 a/335 b/336))))
++(function a/330[int] b/331[int]
++  (if a/330
++    (let (x/332 =a[int] a/330 _p/333 =a (makeblock 0 a/330 b/331))
++      (makeblock 0 (int,*) x/332 [0: 1 1]))
++    (let (x/334 =a[int] a/330 p/335 =a (makeblock 0 a/330 b/331))
++      (makeblock 0 (int,*) x/334 p/335))))
++(function a/330[int] b/331[int]
++  (if a/330 (makeblock 0 (int,*) a/330 [0: 1 1])
++    (makeblock 0 (int,*) a/330 (makeblock 0 a/330 b/331))))
+ - : bool -> bool -> bool * (bool * bool) = <fun>
+ |}]
+ 
+@@ -202,11 +202,11 @@ let _ = fun a b -> match a, b with
+ | ((false as x, _) as p) -> x, p
+ (* inside, onecase *)
+ [%%expect{|
+-(function a/341[int] b/342
+-  (let (x/343 =a[int] a/341 p/344 =a (makeblock 0 a/341 b/342))
+-    (makeblock 0 (int,*) x/343 p/344)))
+-(function a/341[int] b/342
+-  (makeblock 0 (int,*) a/341 (makeblock 0 a/341 b/342)))
++(function a/336[int] b/337
++  (let (x/338 =a[int] a/336 p/339 =a (makeblock 0 a/336 b/337))
++    (makeblock 0 (int,*) x/338 p/339)))
++(function a/336[int] b/337
++  (makeblock 0 (int,*) a/336 (makeblock 0 a/336 b/337)))
+ - : bool -> 'a -> bool * (bool * 'a) = <fun>
+ |}]
+ 
+@@ -223,14 +223,14 @@ let _ =fun a b -> match a, b with
+ | (_, _) as p -> p
+ (* outside, tuplist *)
+ [%%expect {|
+-(function a/354[int] b/355
++(function a/349[int] b/350
+   (catch
+-    (if a/354 (if b/355 (let (p/356 =a (field_imm 0 b/355)) p/356) (exit 12))
++    (if a/349 (if b/350 (let (p/351 =a (field_imm 0 b/350)) p/351) (exit 12))
+       (exit 12))
+-   with (12) (let (p/357 =a (makeblock 0 a/354 b/355)) p/357)))
+-(function a/354[int] b/355
+-  (catch (if a/354 (if b/355 (field_imm 0 b/355) (exit 12)) (exit 12))
+-   with (12) (makeblock 0 a/354 b/355)))
++   with (12) (let (p/352 =a (makeblock 0 a/349 b/350)) p/352)))
++(function a/349[int] b/350
++  (catch (if a/349 (if b/350 (field_imm 0 b/350) (exit 12)) (exit 12))
++   with (12) (makeblock 0 a/349 b/350)))
+ - : bool -> bool tuplist -> bool * bool tuplist = <fun>
+ |}]
+ 
+@@ -239,20 +239,20 @@ let _ = fun a b -> match a, b with
+ | ((_, _) as p) -> p
+ (* inside, tuplist *)
+ [%%expect{|
+-(function a/358[int] b/359
++(function a/353[int] b/354
+   (catch
+     (catch
+-      (if a/358
+-        (if b/359 (let (p/363 =a (field_imm 0 b/359)) (exit 13 p/363))
++      (if a/353
++        (if b/354 (let (p/358 =a (field_imm 0 b/354)) (exit 13 p/358))
+           (exit 14))
+         (exit 14))
+-     with (14) (let (p/362 =a (makeblock 0 a/358 b/359)) (exit 13 p/362)))
+-   with (13 p/360) p/360))
+-(function a/358[int] b/359
++     with (14) (let (p/357 =a (makeblock 0 a/353 b/354)) (exit 13 p/357)))
++   with (13 p/355) p/355))
++(function a/353[int] b/354
+   (catch
+     (catch
+-      (if a/358 (if b/359 (exit 13 (field_imm 0 b/359)) (exit 14)) (exit 14))
+-     with (14) (exit 13 (makeblock 0 a/358 b/359)))
+-   with (13 p/360) p/360))
++      (if a/353 (if b/354 (exit 13 (field_imm 0 b/354)) (exit 14)) (exit 14))
++     with (14) (exit 13 (makeblock 0 a/353 b/354)))
++   with (13 p/355) p/355))
+ - : bool -> bool tuplist -> bool * bool tuplist = <fun>
+ |}]
+diff --git a/testsuite/tests/c-api/alloc_async.ml b/testsuite/tests/c-api/alloc_async.ml
+index b8c99a4b07..0ed35acf16 100644
+--- a/testsuite/tests/c-api/alloc_async.ml
++++ b/testsuite/tests/c-api/alloc_async.ml
+@@ -1,7 +1,5 @@
+ (* TEST
+    modules = "alloc_async_stubs.c"
+-   * skip
+-   reason = "alloc async changes: https://github.com/ocaml/ocaml/pull/8897"
+ *)
+ 
+ external test : int ref -> unit = "stub"
+diff --git a/testsuite/tests/callback/nested_fiber.ml b/testsuite/tests/callback/nested_fiber.ml
+index d7e792729a..cfdcf96d4e 100644
+--- a/testsuite/tests/callback/nested_fiber.ml
++++ b/testsuite/tests/callback/nested_fiber.ml
+@@ -1,9 +1,11 @@
+ (* TEST
+    include unix
+    modules = "nested_fiber_.c"
+-   * libunix
+-   ** bytecode
+-   ** native
++   * skip
++   reason = "OCaml 5 only"
++   ** libunix
++   *** bytecode
++   *** native
+ *)
+ 
+ external caml_to_c : (unit -> 'a) -> 'a = "caml_to_c"
+diff --git a/testsuite/tests/callback/stack_overflow.ml b/testsuite/tests/callback/stack_overflow.ml
+index df0e4f5c4d..a14ee4d09a 100644
+--- a/testsuite/tests/callback/stack_overflow.ml
++++ b/testsuite/tests/callback/stack_overflow.ml
+@@ -1,9 +1,11 @@
+ (* TEST
+    include unix
+    modules = "stack_overflow_.c"
+-   * libunix
+-   ** bytecode
+-   ** native
++   * skip
++   reason = "OCaml 5 only"
++   ** libunix
++   *** bytecode
++   *** native
+ *)
+ 
+ external caml_to_c : (unit -> 'a) -> 'a = "caml_to_c"
+diff --git a/testsuite/tests/callback/test7.ml b/testsuite/tests/callback/test7.ml
+index 00aca09afe..85a7377371 100644
+--- a/testsuite/tests/callback/test7.ml
++++ b/testsuite/tests/callback/test7.ml
+@@ -1,9 +1,11 @@
+ (* TEST
+    include unix
+    modules = "test7_.c"
+-   * libunix
+-   ** bytecode
+-   ** native
++   * skip
++   reason = "OCaml 5 only"
++   ** libunix
++   *** bytecode
++   *** native
+ *)
+ 
+ (* Tests nested calls from C (main C) to OCaml (main OCaml) to C (caml_to_c) to
+diff --git a/testsuite/tests/callback/test_signalhandler.ml b/testsuite/tests/callback/test_signalhandler.ml
+index 9d0ecaac13..1c24a38f9d 100644
+--- a/testsuite/tests/callback/test_signalhandler.ml
++++ b/testsuite/tests/callback/test_signalhandler.ml
+@@ -1,6 +1,6 @@
+ (* TEST
+    include unix
+-   modules = "test_signalhandler_.c"
++   modules = "callbackprim.c"
+    * libunix
+    ** bytecode
+    ** native
+@@ -52,17 +52,19 @@ let sighandler signo =
+   (* Thoroughly wipe the minor heap *)
+   ignore (tak (18, 12, 6))
+ 
++external raise_sigusr1 : unit -> unit = "raise_sigusr1" [@@noalloc]
+ external unix_getpid : unit -> int = "unix_getpid" [@@noalloc]
+ external unix_kill : int -> int -> unit = "unix_kill" [@@noalloc]
+ 
+ let callbacksig () =
+-  let pid = unix_getpid() in
++  let _pid = unix_getpid() in
+   (* Allocate a block in the minor heap *)
+   let s = String.make 5 'b' in
+   (* Send a signal to self.  We want s to remain in a register and
+      not be spilled on the stack, hence we declare unix_kill
+      [@@noalloc]. *)
+-  unix_kill pid Sys.sigusr1;
++  (*unix_kill pid Sys.sigusr1;*)
++  raise_sigusr1 ();
+   (* Allocate some more so that the signal will be tested *)
+   let u = (s, s) in
+   fst u
+diff --git a/testsuite/tests/effects/backtrace.ml b/testsuite/tests/effects/backtrace.ml
+index 9e8813c2a1..f96b5e6650 100644
+--- a/testsuite/tests/effects/backtrace.ml
++++ b/testsuite/tests/effects/backtrace.ml
+@@ -1,6 +1,8 @@
+ (* TEST
+    flags = "-g"
+    ocamlrunparam += ",b=1"
++   * skip
++   reason = "OCaml 5 only"
+ *)
+ 
+ open EffectHandlers
+diff --git a/testsuite/tests/effects/cmphash.ml b/testsuite/tests/effects/cmphash.ml
+index 49f2cd3285..952886d628 100644
+--- a/testsuite/tests/effects/cmphash.ml
++++ b/testsuite/tests/effects/cmphash.ml
+@@ -1,4 +1,6 @@
+ (* TEST
++   * skip
++   reason = "OCaml 5 only"
+  *)
+ 
+ open EffectHandlers
+diff --git a/testsuite/tests/effects/evenodd.ml b/testsuite/tests/effects/evenodd.ml
+index 0a0b735988..450fcea011 100644
+--- a/testsuite/tests/effects/evenodd.ml
++++ b/testsuite/tests/effects/evenodd.ml
+@@ -1,4 +1,6 @@
+ (* TEST
++   * skip
++   reason = "OCaml 5 only"
+  *)
+ 
+ open EffectHandlers
+diff --git a/testsuite/tests/effects/issue479.ml b/testsuite/tests/effects/issue479.ml
+index 8d526f8639..691d2757ae 100644
+--- a/testsuite/tests/effects/issue479.ml
++++ b/testsuite/tests/effects/issue479.ml
+@@ -1,5 +1,7 @@
+ (* TEST
+-   * toplevel
++   * skip
++   reason = "OCaml 5 only"
++   ** toplevel
+ *)
+ 
+ (* https://github.com/ocaml-multicore/ocaml-multicore/issues/479 *)
+diff --git a/testsuite/tests/effects/overflow.ml b/testsuite/tests/effects/overflow.ml
+index 28325d47e2..7e332f1c5c 100644
+--- a/testsuite/tests/effects/overflow.ml
++++ b/testsuite/tests/effects/overflow.ml
+@@ -1,4 +1,6 @@
+ (* TEST
++   * skip
++   reason = "OCaml 5 only"
+  *)
+ 
+ open EffectHandlers
+diff --git a/testsuite/tests/effects/partial.ml b/testsuite/tests/effects/partial.ml
+index 440ce14d6f..3e10697e68 100644
+--- a/testsuite/tests/effects/partial.ml
++++ b/testsuite/tests/effects/partial.ml
+@@ -1,4 +1,6 @@
+ (* TEST
++   * skip
++   reason = "OCaml 5 only"
+  *)
+ 
+ open EffectHandlers
+diff --git a/testsuite/tests/effects/reperform.ml b/testsuite/tests/effects/reperform.ml
+index 759c1e4804..48ca55ca81 100644
+--- a/testsuite/tests/effects/reperform.ml
++++ b/testsuite/tests/effects/reperform.ml
+@@ -1,4 +1,6 @@
+ (* TEST
++   * skip
++   reason = "OCaml 5 only"
+  *)
+ 
+ open EffectHandlers
+diff --git a/testsuite/tests/effects/sched.ml b/testsuite/tests/effects/sched.ml
+index b78014ecb1..48e72f8b3b 100644
+--- a/testsuite/tests/effects/sched.ml
++++ b/testsuite/tests/effects/sched.ml
+@@ -1,4 +1,6 @@
+ (* TEST
++   * skip
++   reason = "OCaml 5 only"
+  *)
+ 
+ open EffectHandlers
+diff --git a/testsuite/tests/effects/shallow_state.ml b/testsuite/tests/effects/shallow_state.ml
+index 7d74a8e1b8..b7813fc9b0 100644
+--- a/testsuite/tests/effects/shallow_state.ml
++++ b/testsuite/tests/effects/shallow_state.ml
+@@ -1,4 +1,6 @@
+ (* TEST
++   * skip
++   reason = "OCaml 5 only"
+  *)
+ 
+ open EffectHandlers
+diff --git a/testsuite/tests/effects/shallow_state_io.ml b/testsuite/tests/effects/shallow_state_io.ml
+index ecf431db73..e6ebe39ba7 100644
+--- a/testsuite/tests/effects/shallow_state_io.ml
++++ b/testsuite/tests/effects/shallow_state_io.ml
+@@ -1,4 +1,6 @@
+ (* TEST
++   * skip
++   reason = "OCaml 5 only"
+  *)
+ 
+ open EffectHandlers
+diff --git a/testsuite/tests/effects/test1.ml b/testsuite/tests/effects/test1.ml
+index 2654f113dd..30002f6fb3 100644
+--- a/testsuite/tests/effects/test1.ml
++++ b/testsuite/tests/effects/test1.ml
+@@ -1,4 +1,6 @@
+ (* TEST
++   * skip
++   reason = "OCaml 5 only"
+  *)
+ 
+ open EffectHandlers
+diff --git a/testsuite/tests/effects/test10.ml b/testsuite/tests/effects/test10.ml
+index 612692ac9d..984278638c 100644
+--- a/testsuite/tests/effects/test10.ml
++++ b/testsuite/tests/effects/test10.ml
+@@ -1,4 +1,6 @@
+ (* TEST
++   * skip
++   reason = "OCaml 5 only"
+  *)
+ 
+ open EffectHandlers
+diff --git a/testsuite/tests/effects/test11.ml b/testsuite/tests/effects/test11.ml
+index 32b706a580..d01ea66203 100644
+--- a/testsuite/tests/effects/test11.ml
++++ b/testsuite/tests/effects/test11.ml
+@@ -1,4 +1,6 @@
+ (* TEST
++   * skip
++   reason = "OCaml 5 only"
+ *)
+ 
+ (* Tests RESUMETERM with extra_args != 0 in bytecode,
+diff --git a/testsuite/tests/effects/test2.ml b/testsuite/tests/effects/test2.ml
+index c7cd9d51bc..3bb4becf1f 100644
+--- a/testsuite/tests/effects/test2.ml
++++ b/testsuite/tests/effects/test2.ml
+@@ -1,4 +1,6 @@
+ (* TEST
++   * skip
++   reason = "OCaml 5 only"
+  *)
+ 
+ open Printf
+diff --git a/testsuite/tests/effects/test3.ml b/testsuite/tests/effects/test3.ml
+index 9d413920de..99a4008f02 100644
+--- a/testsuite/tests/effects/test3.ml
++++ b/testsuite/tests/effects/test3.ml
+@@ -1,4 +1,6 @@
+ (* TEST
++   * skip
++   reason = "OCaml 5 only"
+  *)
+ 
+ open EffectHandlers
+diff --git a/testsuite/tests/effects/test4.ml b/testsuite/tests/effects/test4.ml
+index 0169bab840..3e50bbe582 100644
+--- a/testsuite/tests/effects/test4.ml
++++ b/testsuite/tests/effects/test4.ml
+@@ -1,4 +1,6 @@
+ (* TEST
++   * skip
++   reason = "OCaml 5 only"
+  *)
+ 
+ open EffectHandlers
+diff --git a/testsuite/tests/effects/test5.ml b/testsuite/tests/effects/test5.ml
+index 4529e4b6df..131985cd54 100644
+--- a/testsuite/tests/effects/test5.ml
++++ b/testsuite/tests/effects/test5.ml
+@@ -1,4 +1,6 @@
+ (* TEST
++   * skip
++   reason = "OCaml 5 only"
+  *)
+ 
+ open EffectHandlers
+diff --git a/testsuite/tests/effects/test6.ml b/testsuite/tests/effects/test6.ml
+index c6c9991a38..286efaa95f 100644
+--- a/testsuite/tests/effects/test6.ml
++++ b/testsuite/tests/effects/test6.ml
+@@ -1,4 +1,6 @@
+ (* TEST
++   * skip
++   reason = "OCaml 5 only"
+  *)
+ 
+ open EffectHandlers
+diff --git a/testsuite/tests/effects/test_lazy.ml b/testsuite/tests/effects/test_lazy.ml
+index 697fddd2d1..68045a4bb1 100644
+--- a/testsuite/tests/effects/test_lazy.ml
++++ b/testsuite/tests/effects/test_lazy.ml
+@@ -1,4 +1,7 @@
+-(* TEST *)
++(* TEST
++   * skip
++   reason = "OCaml 5 only"
++*)
+ 
+ open EffectHandlers
+ open EffectHandlers.Deep
+diff --git a/testsuite/tests/effects/used_cont.ml b/testsuite/tests/effects/used_cont.ml
+index e302d72318..a8134975cc 100644
+--- a/testsuite/tests/effects/used_cont.ml
++++ b/testsuite/tests/effects/used_cont.ml
+@@ -1,4 +1,6 @@
+ (* TEST
++   * skip
++   reason = "OCaml 5 only"
+  *)
+ 
+ open EffectHandlers
+diff --git a/testsuite/tests/ephe-c-api/test.ml b/testsuite/tests/ephe-c-api/test.ml
+index ff1646835a..a29cd8516b 100644
+--- a/testsuite/tests/ephe-c-api/test.ml
++++ b/testsuite/tests/ephe-c-api/test.ml
+@@ -1,7 +1,5 @@
+ (* TEST
+    modules = "stubs.c"
+-   * skip
+-   reason = "port the new Ephemeron C-api to multicore : https://github.com/ocaml/ocaml/pull/676"
+ *)
+ 
+ (* C version of ephetest.ml *)
+diff --git a/testsuite/tests/gc-roots/globroots.ml b/testsuite/tests/gc-roots/globroots.ml
+index b11aff1f67..2e1146adef 100644
+--- a/testsuite/tests/gc-roots/globroots.ml
++++ b/testsuite/tests/gc-roots/globroots.ml
+@@ -1,5 +1,7 @@
+ (* TEST
+    modules = "globrootsprim.c"
++   * skip
++   reason = "OCaml 5 only"
+ *)
+ 
+ module type GLOBREF = sig
+diff --git a/testsuite/tests/gc-roots/globroots_parallel.ml b/testsuite/tests/gc-roots/globroots_parallel.ml
+index 4c3e36d140..fabbaa8ec6 100644
+--- a/testsuite/tests/gc-roots/globroots_parallel.ml
++++ b/testsuite/tests/gc-roots/globroots_parallel.ml
+@@ -1,6 +1,8 @@
+ (* TEST
+    flags += " -w a "
+    modules = "globrootsprim.c globroots.ml"
++   * skip
++   reason = "OCaml 5 only"
+ *)
+ 
+ open Globroots
+diff --git a/testsuite/tests/gc-roots/globroots_parallel_spawn_burn.ml b/testsuite/tests/gc-roots/globroots_parallel_spawn_burn.ml
+index bf392c13b0..cf932d9491 100644
+--- a/testsuite/tests/gc-roots/globroots_parallel_spawn_burn.ml
++++ b/testsuite/tests/gc-roots/globroots_parallel_spawn_burn.ml
+@@ -1,6 +1,8 @@
+ (* TEST
+    flags += " -w a "
+    modules = "globrootsprim.c globroots.ml"
++   * skip
++   reason = "OCaml 5 only"
+ *)
+ 
+ open Globroots
+diff --git a/testsuite/tests/gc-roots/globroots_sequential.ml b/testsuite/tests/gc-roots/globroots_sequential.ml
+index 6bf995bf96..dc732ce6a3 100644
+--- a/testsuite/tests/gc-roots/globroots_sequential.ml
++++ b/testsuite/tests/gc-roots/globroots_sequential.ml
+@@ -1,6 +1,8 @@
+ (* TEST
+    flags += " -w a "
+    modules = "globrootsprim.c globroots.ml"
++   * skip
++   reason = "OCaml 5 only"
+ *)
+ open Globroots
+ 
+diff --git a/testsuite/tests/generalized-open/gpr1506.ml b/testsuite/tests/generalized-open/gpr1506.ml
+index dd55e349af..bd72ed302f 100644
+--- a/testsuite/tests/generalized-open/gpr1506.ml
++++ b/testsuite/tests/generalized-open/gpr1506.ml
+@@ -103,9 +103,9 @@ include struct open struct type t = T end let x = T end
+ Line 1, characters 15-41:
+ 1 | include struct open struct type t = T end let x = T end
+                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
+-Error: The type t/342 introduced by this open appears in the signature
++Error: The type t/337 introduced by this open appears in the signature
+        Line 1, characters 46-47:
+-         The value x has no valid type if t/342 is hidden
++         The value x has no valid type if t/337 is hidden
+ |}];;
+ 
+ module A = struct
+@@ -123,9 +123,9 @@ Lines 3-6, characters 4-7:
+ 4 |       type t = T
+ 5 |       let x = T
+ 6 |     end
+-Error: The type t/347 introduced by this open appears in the signature
++Error: The type t/342 introduced by this open appears in the signature
+        Line 7, characters 8-9:
+-         The value y has no valid type if t/347 is hidden
++         The value y has no valid type if t/342 is hidden
+ |}];;
+ 
+ module A = struct
+@@ -142,9 +142,9 @@ Lines 3-5, characters 4-7:
+ 3 | ....open struct
+ 4 |       type t = T
+ 5 |     end
+-Error: The type t/352 introduced by this open appears in the signature
++Error: The type t/347 introduced by this open appears in the signature
+        Line 6, characters 8-9:
+-         The value y has no valid type if t/352 is hidden
++         The value y has no valid type if t/347 is hidden
+ |}]
+ 
+ (* It was decided to not allow this anymore. *)
+diff --git a/testsuite/tests/instrumented-runtime/main.ml b/testsuite/tests/instrumented-runtime/main.ml
+index 084ceb03ca..94200ec67f 100644
+--- a/testsuite/tests/instrumented-runtime/main.ml
++++ b/testsuite/tests/instrumented-runtime/main.ml
+@@ -1,7 +1,5 @@
+ (* TEST
+   * instrumented-runtime
+-  * skip
+-  reason = "instrumented runtime test is not very useful and broken on multicore. (#9413)"
+   ** native
+     flags = "-runtime-variant=i"
+ *)
+diff --git a/testsuite/tests/lazy/lazy2.ml b/testsuite/tests/lazy/lazy2.ml
+index cccbd96d71..35dd7fd85b 100644
+--- a/testsuite/tests/lazy/lazy2.ml
++++ b/testsuite/tests/lazy/lazy2.ml
+@@ -1,5 +1,7 @@
+ (* TEST
+    ocamlopt_flags += " -O3 "
++   * skip
++   reason = "OCaml 5 only"
+ *)
+ 
+ open Domain
+diff --git a/testsuite/tests/lazy/lazy3.ml b/testsuite/tests/lazy/lazy3.ml
+index a22a0893b9..737791b7db 100644
+--- a/testsuite/tests/lazy/lazy3.ml
++++ b/testsuite/tests/lazy/lazy3.ml
+@@ -1,5 +1,7 @@
+ (* TEST
+    ocamlopt_flags += " -O3 "
++   * skip
++   reason = "OCaml 5 only"
+ *)
+ 
+ let f count =
+diff --git a/testsuite/tests/lazy/lazy5.ml b/testsuite/tests/lazy/lazy5.ml
+index 217b84175e..e37b499268 100644
+--- a/testsuite/tests/lazy/lazy5.ml
++++ b/testsuite/tests/lazy/lazy5.ml
+@@ -1,5 +1,7 @@
+ (* TEST
+    ocamlopt_flags += " -O3 "
++   * skip
++   reason = "OCaml 5 only"
+ *)
+ let rec safe_force l =
+   try Lazy.force l with
+diff --git a/testsuite/tests/lazy/lazy6.ml b/testsuite/tests/lazy/lazy6.ml
+index 098848769a..29067f1a41 100644
+--- a/testsuite/tests/lazy/lazy6.ml
++++ b/testsuite/tests/lazy/lazy6.ml
+@@ -1,5 +1,7 @@
+ (* TEST
+    ocamlopt_flags += " -O3 "
++   * skip
++   reason = "OCaml 5 only"
+ *)
+ 
+ let flag1 = Atomic.make false
+diff --git a/testsuite/tests/lazy/lazy7.ml b/testsuite/tests/lazy/lazy7.ml
+index 6c96f32907..d9c9b82127 100644
+--- a/testsuite/tests/lazy/lazy7.ml
++++ b/testsuite/tests/lazy/lazy7.ml
+@@ -1,5 +1,7 @@
+ (* TEST
+    ocamlopt_flags += " -O3 "
++   * skip
++   reason = "OCaml 5 only"
+ *)
+ 
+ let num_domains = 4
+diff --git a/testsuite/tests/lazy/lazy8.ml b/testsuite/tests/lazy/lazy8.ml
+index c9b5781617..ddadf48a1b 100644
+--- a/testsuite/tests/lazy/lazy8.ml
++++ b/testsuite/tests/lazy/lazy8.ml
+@@ -1,5 +1,7 @@
+ (* TEST
+    ocamlopt_flags += " -O3 "
++   * skip
++   reason = "OCaml 5 only"
+ *)
+ 
+ exception E
+diff --git a/testsuite/tests/lazy/minor_major_force.ml b/testsuite/tests/lazy/minor_major_force.ml
+index b18fe44a9b..d7497f986d 100644
+--- a/testsuite/tests/lazy/minor_major_force.ml
++++ b/testsuite/tests/lazy/minor_major_force.ml
+@@ -1,5 +1,7 @@
+ (* TEST
+    ocamlopt_flags += " -O3 "
++   * skip
++   reason = "OCaml 5 only"
+ *)
+ 
+ (*
+diff --git a/testsuite/tests/lf_skiplist/test.ml b/testsuite/tests/lf_skiplist/test.ml
+index f3b11bf411..4dcffc523d 100644
+--- a/testsuite/tests/lf_skiplist/test.ml
++++ b/testsuite/tests/lf_skiplist/test.ml
+@@ -1,5 +1,7 @@
+ (* TEST
+    modules = "stubs.c"
++   * skip
++   reason = "OCaml 5 only"
+ *)
+ 
+ external test_skiplist_serial : unit -> unit = "test_skiplist_serial"
+diff --git a/testsuite/tests/lf_skiplist/test_parallel.ml b/testsuite/tests/lf_skiplist/test_parallel.ml
+index ac02717889..c882a8dac7 100644
+--- a/testsuite/tests/lf_skiplist/test_parallel.ml
++++ b/testsuite/tests/lf_skiplist/test_parallel.ml
+@@ -1,5 +1,7 @@
+ (* TEST
+    modules = "stubs.c"
++   * skip
++   reason = "OCaml 5 only"
+ *)
+ 
+ external init_skiplist : unit -> unit = "init_skiplist"
+diff --git a/testsuite/tests/lib-dynlink-initializers/test10_main.byte.reference b/testsuite/tests/lib-dynlink-initializers/test10_main.byte.reference
+index 8f70ff73cd..04083e8f47 100755
+--- a/testsuite/tests/lib-dynlink-initializers/test10_main.byte.reference
++++ b/testsuite/tests/lib-dynlink-initializers/test10_main.byte.reference
+@@ -5,8 +5,8 @@ Called from Test10_plugin.f in file "test10_plugin.ml", line 6, characters 2-6
+ Called from Test10_plugin in file "test10_plugin.ml", line 10, characters 2-6
+ Called from Dynlink.Bytecode.run in file "otherlibs/dynlink/dynlink.ml", line 137, characters 16-25
+ Re-raised at Dynlink.Bytecode.run in file "otherlibs/dynlink/dynlink.ml", line 139, characters 6-137
+-Called from Dynlink_common.Make.load.(fun) in file "otherlibs/dynlink/dynlink_common.ml", line 350, characters 13-44
++Called from Dynlink_common.Make.load.(fun) in file "otherlibs/dynlink/dynlink_common.ml", line 352, characters 13-44
+ Called from Stdlib__List.iter in file "list.ml", line 110, characters 12-15
+-Called from Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 348, characters 8-240
+-Re-raised at Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 358, characters 8-17
++Called from Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 350, characters 8-240
++Re-raised at Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 360, characters 8-17
+ Called from Test10_main in file "test10_main.ml", line 51, characters 13-69
+diff --git a/testsuite/tests/lib-dynlink-initializers/test10_main.native.reference b/testsuite/tests/lib-dynlink-initializers/test10_main.native.reference
+index 6496b8870f..fd2a2d84b1 100755
+--- a/testsuite/tests/lib-dynlink-initializers/test10_main.native.reference
++++ b/testsuite/tests/lib-dynlink-initializers/test10_main.native.reference
+@@ -1,10 +1,14 @@
+ Error: Failure("Plugin error")
+-Raised by primitive operation at Dynlink.Native.run.(fun) in file "otherlibs/dynlink/native/dynlink.ml", line 85, characters 12-29
++Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
++Called from Test10_plugin.g in file "test10_plugin.ml", line 2, characters 15-38
++Called from Test10_plugin in file "test10_plugin.ml", line 10, characters 2-6
++Called from Dynlink.Native.run.(fun) in file "otherlibs/dynlink/native/dynlink.ml", line 85, characters 12-29
++Called from Dynlink.Native.run.(fun) in file "otherlibs/dynlink/native/dynlink.ml", line 85, characters 12-29
+ Re-raised at Dynlink.Native.run.(fun) in file "otherlibs/dynlink/native/dynlink.ml", line 87, characters 10-149
+ Called from Stdlib__List.iter in file "list.ml", line 110, characters 12-15
+-Called from Dynlink_common.Make.load.(fun) in file "otherlibs/dynlink/dynlink_common.ml", line 350, characters 13-44
++Called from Dynlink_common.Make.load.(fun) in file "otherlibs/dynlink/dynlink_common.ml", line 352, characters 13-44
+ Called from Stdlib__List.iter in file "list.ml", line 110, characters 12-15
+-Called from Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 348, characters 8-240
+-Re-raised at Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 358, characters 8-17
+-Called from Dynlink_common.Make.loadfile in file "otherlibs/dynlink/dynlink_common.ml" (inlined), line 360, characters 26-45
++Called from Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 350, characters 8-240
++Re-raised at Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 360, characters 8-17
++Called from Dynlink_common.Make.loadfile in file "otherlibs/dynlink/dynlink_common.ml" (inlined), line 362, characters 26-45
+ Called from Test10_main in file "test10_main.ml", line 49, characters 30-87
+diff --git a/testsuite/tests/lib-format/mc_pr586_par.ml b/testsuite/tests/lib-format/mc_pr586_par.ml
+index 456a306ce7..da5c148416 100644
+--- a/testsuite/tests/lib-format/mc_pr586_par.ml
++++ b/testsuite/tests/lib-format/mc_pr586_par.ml
+@@ -1,4 +1,7 @@
+-(* TEST *)
++(* TEST
++   * skip
++   reason = "OCaml 5 only"
++*)
+ 
+ let () =
+   let domains = Array.init 7 (fun i ->
+diff --git a/testsuite/tests/lib-format/mc_pr586_par2.ml b/testsuite/tests/lib-format/mc_pr586_par2.ml
+index 0ead3627b5..8a96be1456 100644
+--- a/testsuite/tests/lib-format/mc_pr586_par2.ml
++++ b/testsuite/tests/lib-format/mc_pr586_par2.ml
+@@ -1,4 +1,7 @@
+-(* TEST *)
++(* TEST
++   * skip
++   reason = "OCaml 5 only"
++*)
+ 
+ let () =
+   let fmt_key = Format.synchronized_formatter_of_out_channel stdout in
+diff --git a/testsuite/tests/lib-marshal/intext_par.ml b/testsuite/tests/lib-marshal/intext_par.ml
+index 2efb846665..68ad0e1edb 100644
+--- a/testsuite/tests/lib-marshal/intext_par.ml
++++ b/testsuite/tests/lib-marshal/intext_par.ml
+@@ -1,5 +1,7 @@
+ (* TEST
+    modules = "intextaux_par.c"
++   * skip
++   reason = "OCaml 5 only"
+ *)
+ 
+ (* Test for output_value / input_value *)
+diff --git a/testsuite/tests/lib-obj/reachable_words_np.ml b/testsuite/tests/lib-obj/reachable_words_np.ml
+new file mode 100644
+index 0000000000..8a50268d20
+--- /dev/null
++++ b/testsuite/tests/lib-obj/reachable_words_np.ml
+@@ -0,0 +1,21 @@
++(* TEST
++ * naked_pointers
++ ** bytecode
++ ** native
++*)
++
++let native =
++  match Sys.backend_type with
++  | Sys.Native -> true
++  | Sys.Bytecode -> false
++  | Sys.Other s -> print_endline s; assert false
++
++let size x = Obj.reachable_words (Obj.repr x)
++
++let expect_size s x =
++  let i = size x in
++  if i <> s then
++    Printf.printf "size = %i; expected = %i\n%!" i s
++
++let () =
++  expect_size (if native then 0 else 3) (1, 2)
+diff --git a/testsuite/tests/lib-str/parallel.ml b/testsuite/tests/lib-str/parallel.ml
+index 23f2a5f7de..08055698e7 100644
+--- a/testsuite/tests/lib-str/parallel.ml
++++ b/testsuite/tests/lib-str/parallel.ml
+@@ -1,8 +1,10 @@
+ (* TEST
+-* hasstr
++* skip
++reason = "OCaml 5 only"
++** hasstr
+ include str
+-** bytecode
+-** native
++*** bytecode
++*** native
+ *)
+ 
+ let total = Atomic.make 0
+diff --git a/testsuite/tests/lib-sync/prodcons.ml b/testsuite/tests/lib-sync/prodcons.ml
+index 2e2c09756c..093d8740be 100644
+--- a/testsuite/tests/lib-sync/prodcons.ml
++++ b/testsuite/tests/lib-sync/prodcons.ml
+@@ -1,4 +1,6 @@
+ (* TEST
++   * skip
++   reason = "OCaml 5 only"
+ *)
+ 
+ (* Classic producer-consumer *)
+diff --git a/testsuite/tests/lib-sync/trylock.ml b/testsuite/tests/lib-sync/trylock.ml
+index 314f1142ca..b4719fff04 100644
+--- a/testsuite/tests/lib-sync/trylock.ml
++++ b/testsuite/tests/lib-sync/trylock.ml
+@@ -1,4 +1,6 @@
+ (* TEST
++   * skip
++   reason = "OCaml 5 only"
+ *)
+ 
+ (* Test Mutex.try_lock *)
+diff --git a/testsuite/tests/lib-sync/trylock2.ml b/testsuite/tests/lib-sync/trylock2.ml
+index b31ace08b5..e29ee93f9e 100644
+--- a/testsuite/tests/lib-sync/trylock2.ml
++++ b/testsuite/tests/lib-sync/trylock2.ml
+@@ -1,4 +1,6 @@
+ (* TEST
++   * skip
++   reason = "OCaml 5 only"
+ *)
+ 
+ (* Test Mutex.try_lock *)
+diff --git a/testsuite/tests/lib-systhreads/multicore_lifecycle.ml b/testsuite/tests/lib-systhreads/multicore_lifecycle.ml
+index f481464906..0138046146 100644
+--- a/testsuite/tests/lib-systhreads/multicore_lifecycle.ml
++++ b/testsuite/tests/lib-systhreads/multicore_lifecycle.ml
+@@ -1,8 +1,10 @@
+ (* TEST
+-* hassysthreads
++* skip
++reason = "OCaml 5 only"
++** hassysthreads
+ include systhreads
+-** bytecode
+-** native
++*** bytecode
++*** native
+ *)
+ 
+ let _ =
+diff --git a/testsuite/tests/lib-systhreads/test_c_thread_register.ml b/testsuite/tests/lib-systhreads/test_c_thread_register.ml
+index a8ec98aa9a..784fe6945f 100644
+--- a/testsuite/tests/lib-systhreads/test_c_thread_register.ml
++++ b/testsuite/tests/lib-systhreads/test_c_thread_register.ml
+@@ -2,9 +2,10 @@
+    modules = "test_c_thread_register_cstubs.c"
+    * hassysthreads
+    include systhreads
+-   ** not-bsd
+-   *** bytecode
+-   *** native
++   ** not-windows
++   *** not-bsd
++   **** bytecode
++   **** native
+ *)
+ 
+ (* spins a external thread from C and register it to the OCaml runtime *)
+diff --git a/testsuite/tests/lib-threads/uncaught_exception_handler.reference b/testsuite/tests/lib-threads/uncaught_exception_handler.reference
+index 34a8e2d7f6..b18e7dc5bb 100644
+--- a/testsuite/tests/lib-threads/uncaught_exception_handler.reference
++++ b/testsuite/tests/lib-threads/uncaught_exception_handler.reference
+@@ -1,12 +1,12 @@
+ Thread 1 killed on uncaught exception Uncaught_exception_handler.CallbackExn
+ Raised at Uncaught_exception_handler.fn in file "uncaught_exception_handler.ml", line 28, characters 12-113
+-Called from Thread.create.(fun) in file "thread.ml", line 49, characters 8-14
++Called from Thread.create.(fun) in file "thread.ml", line 51, characters 8-14
+ [thread 2] caught Uncaught_exception_handler.CallbackExn
+ Raised at Uncaught_exception_handler.fn in file "uncaught_exception_handler.ml", line 28, characters 12-113
+-Called from Thread.create.(fun) in file "thread.ml", line 49, characters 8-14
++Called from Thread.create.(fun) in file "thread.ml", line 51, characters 8-14
+ Thread 2 killed on uncaught exception Uncaught_exception_handler.CallbackExn
+ Raised at Uncaught_exception_handler.fn in file "uncaught_exception_handler.ml", line 28, characters 12-113
+-Called from Thread.create.(fun) in file "thread.ml", line 49, characters 8-14
++Called from Thread.create.(fun) in file "thread.ml", line 51, characters 8-14
+ Thread 2 uncaught exception handler raised Uncaught_exception_handler.UncaughtHandlerExn
+ Raised at Uncaught_exception_handler.handler in file "uncaught_exception_handler.ml", line 26, characters 2-26
+-Called from Thread.create.(fun) in file "thread.ml", line 55, characters 10-41
++Called from Thread.create.(fun) in file "thread.ml", line 57, characters 10-41
+diff --git a/testsuite/tests/lib-unix/common/multicore_fork_domain_alone.ml b/testsuite/tests/lib-unix/common/multicore_fork_domain_alone.ml
+index 9549f256ea..169cf9a260 100644
+--- a/testsuite/tests/lib-unix/common/multicore_fork_domain_alone.ml
++++ b/testsuite/tests/lib-unix/common/multicore_fork_domain_alone.ml
+@@ -1,9 +1,11 @@
+ (* TEST
+ include unix
+-* hasunix
+-** not-windows
+-*** bytecode
+-*** native
++* skip
++reason = "OCaml 5 only"
++** hasunix
++*** not-windows
++**** bytecode
++**** native
+ *)
+ 
+ (* on Multicore, fork is not allowed is another domain is, and was running. *)
+diff --git a/testsuite/tests/lib-unix/common/multicore_fork_domain_alone2.ml b/testsuite/tests/lib-unix/common/multicore_fork_domain_alone2.ml
+index 929ed5ecf7..61f75dce4a 100644
+--- a/testsuite/tests/lib-unix/common/multicore_fork_domain_alone2.ml
++++ b/testsuite/tests/lib-unix/common/multicore_fork_domain_alone2.ml
+@@ -1,9 +1,11 @@
+ (* TEST
+ include unix
+-* hasunix
+-** not-windows
+-*** bytecode
+-*** native
++* skip
++reason = "OCaml 5 only"
++** hasunix
++*** not-windows
++**** bytecode
++**** native
+ *)
+ 
+ (* on Multicore, fork is not allowed is another domain is, and was running. *)
+diff --git a/testsuite/tests/parallel/atomics.ml b/testsuite/tests/parallel/atomics.ml
+index 9c1d0a3cf2..b1f5813b4a 100644
+--- a/testsuite/tests/parallel/atomics.ml
++++ b/testsuite/tests/parallel/atomics.ml
+@@ -1,8 +1,10 @@
+ (* TEST
+-* hasunix
++* skip
++reason = "OCaml 5 only"
++** hasunix
+ include unix
+-** bytecode
+-** native
++*** bytecode
++*** native
+ *)
+ 
+ type u = U of unit
+diff --git a/testsuite/tests/parallel/backup_thread.ml b/testsuite/tests/parallel/backup_thread.ml
+index 05b06cc47c..c69f164ce7 100644
+--- a/testsuite/tests/parallel/backup_thread.ml
++++ b/testsuite/tests/parallel/backup_thread.ml
+@@ -1,8 +1,10 @@
+ (* TEST
+-* hasunix
++* skip
++reason = "OCaml 5 only"
++** hasunix
+ include unix
+-** bytecode
+-** native
++*** bytecode
++*** native
+ *)
+ 
+ 
+diff --git a/testsuite/tests/parallel/backup_thread_pipe.ml b/testsuite/tests/parallel/backup_thread_pipe.ml
+index 41fd101c1f..d0c5bb6e35 100644
+--- a/testsuite/tests/parallel/backup_thread_pipe.ml
++++ b/testsuite/tests/parallel/backup_thread_pipe.ml
+@@ -1,8 +1,10 @@
+ (* TEST
+-* hasunix
++* skip
++reason = "OCaml 5 only"
++** hasunix
+ include unix
+-** bytecode
+-** native
++*** bytecode
++*** native
+ *)
+ 
+ 
+diff --git a/testsuite/tests/parallel/constpromote.ml b/testsuite/tests/parallel/constpromote.ml
+index fc9fd65ff6..466c846ed1 100644
+--- a/testsuite/tests/parallel/constpromote.ml
++++ b/testsuite/tests/parallel/constpromote.ml
+@@ -1,8 +1,10 @@
+ (* TEST
+-* hasunix
++* skip
++reason = "OCaml 5 only"
++** hasunix
+ include unix
+-** bytecode
+-** native
++*** bytecode
++*** native
+ *)
+ 
+ (* when run with the bytecode debug runtime, this test
+diff --git a/testsuite/tests/parallel/deadcont.ml b/testsuite/tests/parallel/deadcont.ml
+index 34e59f0e93..6a10ab3938 100644
+--- a/testsuite/tests/parallel/deadcont.ml
++++ b/testsuite/tests/parallel/deadcont.ml
+@@ -1,8 +1,10 @@
+ (* TEST
+-* hasunix
++* skip
++reason = "OCaml 5 only"
++** hasunix
+ include unix
+-** bytecode
+-** native
++*** bytecode
++*** native
+ *)
+ 
+ (*
+diff --git a/testsuite/tests/parallel/domain_dls.ml b/testsuite/tests/parallel/domain_dls.ml
+index db4ebe0c56..82d8f55e5a 100644
+--- a/testsuite/tests/parallel/domain_dls.ml
++++ b/testsuite/tests/parallel/domain_dls.ml
+@@ -1,8 +1,10 @@
+ (* TEST
+-* hasunix
++* skip
++reason = "OCaml 5 only"
++** hasunix
+ include unix
+-** bytecode
+-** native
++*** bytecode
++*** native
+ *)
+ 
+ let check_dls () =
+diff --git a/testsuite/tests/parallel/domain_dls2.ml b/testsuite/tests/parallel/domain_dls2.ml
+index 6c79145ba7..279f178774 100644
+--- a/testsuite/tests/parallel/domain_dls2.ml
++++ b/testsuite/tests/parallel/domain_dls2.ml
+@@ -1,8 +1,10 @@
+ (* TEST
+-* hasunix
++* skip
++reason = "OCaml 5 only"
++** hasunix
+ include unix
+-** bytecode
+-** native
++*** bytecode
++*** native
+ *)
+ 
+ let _ =
+diff --git a/testsuite/tests/parallel/domain_id.ml b/testsuite/tests/parallel/domain_id.ml
+index 023d425346..79a2fe48a8 100644
+--- a/testsuite/tests/parallel/domain_id.ml
++++ b/testsuite/tests/parallel/domain_id.ml
+@@ -1,8 +1,10 @@
+ (* TEST
+-* hasunix
++* skip
++reason = "OCaml 5 only"
++** hasunix
+ include unix
+-** bytecode
+-** native
++*** bytecode
++*** native
+ *)
+ 
+ open Domain
+diff --git a/testsuite/tests/parallel/domain_parallel_spawn_burn.ml b/testsuite/tests/parallel/domain_parallel_spawn_burn.ml
+index 8dd2398ac8..ffb7e2f969 100644
+--- a/testsuite/tests/parallel/domain_parallel_spawn_burn.ml
++++ b/testsuite/tests/parallel/domain_parallel_spawn_burn.ml
+@@ -1,8 +1,10 @@
+ (* TEST
+-* hasunix
++* skip
++reason = "OCaml 5 only"
++** hasunix
+ include unix
+-** bytecode
+-** native
++*** bytecode
++*** native
+ *)
+ 
+ open Domain
+diff --git a/testsuite/tests/parallel/domain_serial_spawn_burn.ml b/testsuite/tests/parallel/domain_serial_spawn_burn.ml
+index 2d1961d9f1..89c3f3d5c5 100644
+--- a/testsuite/tests/parallel/domain_serial_spawn_burn.ml
++++ b/testsuite/tests/parallel/domain_serial_spawn_burn.ml
+@@ -1,8 +1,10 @@
+ (* TEST
+-* hasunix
++* skip
++reason = "OCaml 5 only"
++** hasunix
+ include unix
+-** bytecode
+-** native
++*** bytecode
++*** native
+ *)
+ 
+ open Domain
+diff --git a/testsuite/tests/parallel/fib_threads.ml b/testsuite/tests/parallel/fib_threads.ml
+index f6005729b7..3ab3dde90d 100644
+--- a/testsuite/tests/parallel/fib_threads.ml
++++ b/testsuite/tests/parallel/fib_threads.ml
+@@ -1,8 +1,10 @@
+ (* TEST
+-* hassysthreads
++* skip
++reason = "OCaml 5 only"
++** hassysthreads
+ include systhreads
+-** bytecode
+-** native
++*** bytecode
++*** native
+ *)
+ 
+ 
+diff --git a/testsuite/tests/parallel/join.ml b/testsuite/tests/parallel/join.ml
+index fba31533e3..388d8ef8c3 100644
+--- a/testsuite/tests/parallel/join.ml
++++ b/testsuite/tests/parallel/join.ml
+@@ -1,8 +1,10 @@
+ (* TEST
+-* hasunix
++* skip
++reason = "OCaml 5 only"
++** hasunix
+ include unix
+-** bytecode
+-** native
++*** bytecode
++*** native
+ *)
+ 
+ let main_join n =
+diff --git a/testsuite/tests/parallel/major_gc_wait_backup.ml b/testsuite/tests/parallel/major_gc_wait_backup.ml
+index e418500774..f11190aee3 100644
+--- a/testsuite/tests/parallel/major_gc_wait_backup.ml
++++ b/testsuite/tests/parallel/major_gc_wait_backup.ml
+@@ -1,8 +1,10 @@
+ (* TEST
+-* hasunix
++* skip
++reason = "OCaml 5 only"
++** hasunix
+ include unix
+-** native
+-** bytecode
++*** native
++*** bytecode
+ *)
+ 
+ type 'a tree = Empty | Node of 'a tree * 'a tree
+diff --git a/testsuite/tests/parallel/mctest.ml b/testsuite/tests/parallel/mctest.ml
+index 96f34c941c..6e3bbe9aad 100644
+--- a/testsuite/tests/parallel/mctest.ml
++++ b/testsuite/tests/parallel/mctest.ml
+@@ -1,8 +1,10 @@
+ (* TEST
+-* hasunix
++* skip
++reason = "OCaml 5 only"
++** hasunix
+ include unix
+-** bytecode
+-** native
++*** bytecode
++*** native
+ *)
+ 
+ (*
+diff --git a/testsuite/tests/parallel/multicore_systhreads.ml b/testsuite/tests/parallel/multicore_systhreads.ml
+index 2f0fcf20b0..5ce5ea86ea 100644
+--- a/testsuite/tests/parallel/multicore_systhreads.ml
++++ b/testsuite/tests/parallel/multicore_systhreads.ml
+@@ -1,8 +1,10 @@
+ (* TEST
+-* hassysthreads
++* skip
++reason = "OCaml 5 only"
++** hassysthreads
+ include systhreads
+-** bytecode
+-** native
++*** bytecode
++*** native
+ *)
+ 
+ 
+diff --git a/testsuite/tests/parallel/pingpong.ml b/testsuite/tests/parallel/pingpong.ml
+index 30fb9eee71..6113340ccf 100644
+--- a/testsuite/tests/parallel/pingpong.ml
++++ b/testsuite/tests/parallel/pingpong.ml
+@@ -1,8 +1,10 @@
+ (* TEST
+-* hasunix
++* skip
++reason = "OCaml 5 only"
++** hasunix
+ include unix
+-** bytecode
+-** native
++*** bytecode
++*** native
+ *)
+ 
+ let r = ref (Some 0)
+diff --git a/testsuite/tests/parallel/poll.ml b/testsuite/tests/parallel/poll.ml
+index b6c06be354..5af3ad1082 100644
+--- a/testsuite/tests/parallel/poll.ml
++++ b/testsuite/tests/parallel/poll.ml
+@@ -1,8 +1,10 @@
+ (* TEST
+-* hasunix
++* skip
++reason = "OCaml 5 only"
++** hasunix
+ include unix
+-** bytecode
+-** native
++*** bytecode
++*** native
+ *)
+ 
+ let rec loop () =
+diff --git a/testsuite/tests/parallel/prodcons_domains.ml b/testsuite/tests/parallel/prodcons_domains.ml
+index 67499d342a..e8e9d736f3 100644
+--- a/testsuite/tests/parallel/prodcons_domains.ml
++++ b/testsuite/tests/parallel/prodcons_domains.ml
+@@ -1,9 +1,11 @@
+ (* TEST
+ 
+-* hassysthreads
++* skip
++reason = "OCaml 5 only"
++** hassysthreads
+ include systhreads
+-** bytecode
+-** native
++*** bytecode
++*** native
+ 
+ *)
+ 
+diff --git a/testsuite/tests/parallel/tak.ml b/testsuite/tests/parallel/tak.ml
+index a9b6874c4f..bdc4173266 100644
+--- a/testsuite/tests/parallel/tak.ml
++++ b/testsuite/tests/parallel/tak.ml
+@@ -1,4 +1,6 @@
+ (* TEST
++   * skip
++   reason = "OCaml 5 only"
+ *)
+ 
+ (* filling minor heaps in parallel to trigger
+diff --git a/testsuite/tests/parallel/test_c_thread_register.ml b/testsuite/tests/parallel/test_c_thread_register.ml
+index 352424a377..9e2073c4ef 100644
+--- a/testsuite/tests/parallel/test_c_thread_register.ml
++++ b/testsuite/tests/parallel/test_c_thread_register.ml
+@@ -1,9 +1,11 @@
+ (* TEST
++   * skip
++   reason = "OCaml 5 only"
+    modules = "test_c_thread_register_cstubs.c"
+-   * hassysthreads
++   ** hassysthreads
+    include systhreads
+-   ** bytecode
+-   ** native
++   *** bytecode
++   *** native
+ *)
+ 
+ (* spins a external thread from C and register it to the OCaml runtime *)
+diff --git a/testsuite/tests/regression/pr9326/gc_set.ml b/testsuite/tests/regression/pr9326/gc_set.ml
+index 2570aec28e..e9d7dbcd4c 100644
+--- a/testsuite/tests/regression/pr9326/gc_set.ml
++++ b/testsuite/tests/regression/pr9326/gc_set.ml
+@@ -4,35 +4,32 @@
+ open Gc
+ 
+ let min_heap_sz = 524288 (* 512k *)
+-let space_overhead = 70
+-let stack_limit = 4194304 (* 4M *)
+-let custom_major_ratio = 40
+-let custom_minor_ratio = 99
+-let custom_minor_max_size = 4096
++let maj_heap_inc = 4194304 (* 4M *)
+ 
+ let _ =
+   let g1 = Gc.get() in
+   (* Do not use { g1 with ... }, so that the code will break if more fields
+      are added to the Gc.control record type *)
+   Gc.set { minor_heap_size = min_heap_sz;
+-           major_heap_increment = g1.major_heap_increment;
+-           space_overhead = space_overhead;
++           major_heap_increment = maj_heap_inc;
++           space_overhead = g1.space_overhead;
+            verbose = g1.verbose;
+            max_overhead = g1.max_overhead;
+-           stack_limit = stack_limit;
++           stack_limit = g1.stack_limit;
+            allocation_policy = g1.allocation_policy;
+            window_size = g1.window_size;
+-           custom_major_ratio = custom_major_ratio;
+-           custom_minor_ratio = custom_minor_ratio;
+-           custom_minor_max_size = custom_minor_max_size };
++           custom_major_ratio = g1.custom_major_ratio;
++           custom_minor_ratio = g1.custom_minor_ratio;
++           custom_minor_max_size = g1.custom_minor_max_size };
+   let g2 = Gc.get() in
+   assert (g2.minor_heap_size = min_heap_sz);
+-  assert (g2.space_overhead = space_overhead);
++  assert (g2.major_heap_increment = maj_heap_inc);
++  assert (g2.space_overhead = g1.space_overhead);
+   assert (g2.verbose = g1.verbose);
+   assert (g2.max_overhead = g1.max_overhead);
+-  assert (g2.stack_limit = stack_limit);
++  assert (g2.stack_limit = g1.stack_limit);
+   assert (g2.allocation_policy = g1.allocation_policy);
+   assert (g2.window_size = g1.window_size);
+-  assert (g2.custom_major_ratio = custom_major_ratio);
+-  assert (g2.custom_minor_ratio = custom_minor_ratio);
+-  assert (g2.custom_minor_max_size = custom_minor_max_size)
++  assert (g2.custom_major_ratio = g1.custom_major_ratio);
++  assert (g2.custom_minor_ratio = g1.custom_minor_ratio);
++  assert (g2.custom_minor_max_size = g1.custom_minor_max_size)
+diff --git a/testsuite/tests/runtime-naked-pointers/cstubs.c b/testsuite/tests/runtime-naked-pointers/cstubs.c
+new file mode 100644
+index 0000000000..e9315f3aea
+--- /dev/null
++++ b/testsuite/tests/runtime-naked-pointers/cstubs.c
+@@ -0,0 +1,20 @@
++#include <string.h>
++#include "caml/mlvalues.h"
++#include "caml/gc.h"
++#include "caml/memory.h"
++
++static int colors[4] = { Caml_white, Caml_gray, Caml_blue, Caml_black };
++
++value make_block(value header_size, value color, value size)
++{
++  intnat sz = Nativeint_val(size);
++  value * p = caml_stat_alloc((1 + sz) * sizeof(value));
++  p[0] = Make_header(Nativeint_val(header_size), 0, colors[Int_val(color)]);
++  memset(p + 1, 0x80, sz * sizeof(value));
++  return (value) (p + 1);
++}
++
++value make_raw_pointer (value v)
++{
++  return (value) Nativeint_val(v);
++}
+diff --git a/testsuite/tests/runtime-naked-pointers/np.ml b/testsuite/tests/runtime-naked-pointers/np.ml
+new file mode 100644
+index 0000000000..1738934ff0
+--- /dev/null
++++ b/testsuite/tests/runtime-naked-pointers/np.ml
+@@ -0,0 +1,11 @@
++type color = White | Gray | Blue | Black
++
++external make_block: nativeint -> color -> nativeint -> Obj.t
++         = "make_block"
++
++external make_raw_pointer: nativeint -> Obj.t
++         = "make_raw_pointer"
++
++let do_gc root =
++  Gc.compact();   (* full major + compaction *)
++  root
+diff --git a/testsuite/tests/runtime-naked-pointers/np1.ml b/testsuite/tests/runtime-naked-pointers/np1.ml
+new file mode 100644
+index 0000000000..be4c677a23
+--- /dev/null
++++ b/testsuite/tests/runtime-naked-pointers/np1.ml
+@@ -0,0 +1,12 @@
++(* TEST
++   modules = "cstubs.c np.ml"
++   * bytecode
++   * native
++*)
++
++open Np
++
++(* Out-of-heap object with black header is accepted even in no-naked-pointers
++   mode.  GC doesn't scan black objects. *)
++
++let x = do_gc [ make_block 100n Black 100n ]
+diff --git a/testsuite/tests/runtime-naked-pointers/np2.ml b/testsuite/tests/runtime-naked-pointers/np2.ml
+new file mode 100644
+index 0000000000..f24c813c2b
+--- /dev/null
++++ b/testsuite/tests/runtime-naked-pointers/np2.ml
+@@ -0,0 +1,13 @@
++(* TEST
++   modules = "cstubs.c np.ml"
++   * bytecode
++   * native
++*)
++
++open Np
++
++(* Out-of-heap object with black header is accepted even in no-naked-pointers
++   mode.  GC doesn't scan black objects.  However, if the size in the
++   head is crazily big, the naked pointer detector will warn. *)
++
++let x = do_gc [ make_block (-1n) Black 100n ]
+diff --git a/testsuite/tests/runtime-naked-pointers/np2.run b/testsuite/tests/runtime-naked-pointers/np2.run
+new file mode 100755
+index 0000000000..c03f6f688d
+--- /dev/null
++++ b/testsuite/tests/runtime-naked-pointers/np2.run
+@@ -0,0 +1,3 @@
++#!/bin/sh
++
++exec ${test_source_directory}/runtest.sh
+diff --git a/testsuite/tests/runtime-naked-pointers/np3.ml b/testsuite/tests/runtime-naked-pointers/np3.ml
+new file mode 100644
+index 0000000000..d207279df1
+--- /dev/null
++++ b/testsuite/tests/runtime-naked-pointers/np3.ml
+@@ -0,0 +1,15 @@
++(* TEST
++   modules = "cstubs.c np.ml"
++   * naked_pointers
++   ** bytecode
++   ** native
++*)
++
++open Np
++
++(* Out-of-heap object with non-black header is OK in naked pointers mode only *)
++(* Note that the header size can be wrong as it should not be used by the GC *)
++
++let x = do_gc [ make_block 10000n White 10n;
++                make_block 1n Blue 0n;
++                make_block (-1n) Gray 5n ]
+diff --git a/testsuite/tests/runtime-naked-pointers/np3.run b/testsuite/tests/runtime-naked-pointers/np3.run
+new file mode 100755
+index 0000000000..c03f6f688d
+--- /dev/null
++++ b/testsuite/tests/runtime-naked-pointers/np3.run
+@@ -0,0 +1,3 @@
++#!/bin/sh
++
++exec ${test_source_directory}/runtest.sh
+diff --git a/testsuite/tests/runtime-naked-pointers/np4.ml b/testsuite/tests/runtime-naked-pointers/np4.ml
+new file mode 100644
+index 0000000000..98966ddffc
+--- /dev/null
++++ b/testsuite/tests/runtime-naked-pointers/np4.ml
+@@ -0,0 +1,13 @@
++(* TEST
++   modules = "cstubs.c np.ml"
++   * naked_pointers
++   ** bytecode
++   ** native
++*)
++
++open Np
++
++(* Null pointers and bad pointers outside the heap are OK
++   in naked pointers mode only *)
++
++let x = do_gc [ make_raw_pointer 0n; make_raw_pointer 42n ]
+diff --git a/testsuite/tests/runtime-naked-pointers/np4.run b/testsuite/tests/runtime-naked-pointers/np4.run
+new file mode 100755
+index 0000000000..c03f6f688d
+--- /dev/null
++++ b/testsuite/tests/runtime-naked-pointers/np4.run
+@@ -0,0 +1,3 @@
++#!/bin/sh
++
++exec ${test_source_directory}/runtest.sh
+diff --git a/testsuite/tests/runtime-naked-pointers/runtest.sh b/testsuite/tests/runtime-naked-pointers/runtest.sh
+new file mode 100755
+index 0000000000..f5d4df561c
+--- /dev/null
++++ b/testsuite/tests/runtime-naked-pointers/runtest.sh
+@@ -0,0 +1,10 @@
++#!/bin/sh
++
++if grep -q "#define NAKED_POINTERS_CHECKER" ${ocamlsrcdir}/runtime/caml/m.h \
++&& (echo ${program} | grep -q '\.opt')
++then
++  (${program} > ${output}) 2>&1 | grep -q '^Out-of-heap '
++  exit $?
++else
++  exec ${program} > ${output}
++fi
+diff --git a/testsuite/tests/shapes/comp_units.ml b/testsuite/tests/shapes/comp_units.ml
+index c3417b55b1..8c81ea5042 100644
+--- a/testsuite/tests/shapes/comp_units.ml
++++ b/testsuite/tests/shapes/comp_units.ml
+@@ -25,7 +25,7 @@ module Mproj = Unit
+ module F (X : sig type t end) = X
+ [%%expect{|
+ {
+- ("F", module) -> Abs<.4>(X/282, X/282<.3>);
++ ("F", module) -> Abs<.4>(X/277, X/277<.3>);
+  }
+ module F : functor (X : sig type t end) -> sig type t = X.t end
+ |}]
+diff --git a/testsuite/tests/shapes/functors.ml b/testsuite/tests/shapes/functors.ml
+index 0fe6ef7e3e..e0b32367fb 100644
+--- a/testsuite/tests/shapes/functors.ml
++++ b/testsuite/tests/shapes/functors.ml
+@@ -17,7 +17,7 @@ module type S = sig type t val x : t end
+ module Falias (X : S) = X
+ [%%expect{|
+ {
+- ("Falias", module) -> Abs<.4>(X/284, X/284<.3>);
++ ("Falias", module) -> Abs<.4>(X/279, X/279<.3>);
+  }
+ module Falias : functor (X : S) -> sig type t = X.t val x : t end
+ |}]
+@@ -29,10 +29,10 @@ end
+ {
+  ("Finclude", module) ->
+      Abs<.6>
+-        (X/288,
++        (X/283,
+          {
+-          ("t", type) -> X/288<.5> . "t"[type];
+-          ("x", value) -> X/288<.5> . "x"[value];
++          ("t", type) -> X/283<.5> . "t"[type];
++          ("x", value) -> X/283<.5> . "x"[value];
+           });
+  }
+ module Finclude : functor (X : S) -> sig type t = X.t val x : t end
+@@ -45,7 +45,7 @@ end
+ [%%expect{|
+ {
+  ("Fredef", module) ->
+-     Abs<.10>(X/295, {
++     Abs<.10>(X/290, {
+                       ("t", type) -> <.8>;
+                       ("x", value) -> <.9>;
+                       });
+@@ -225,9 +225,9 @@ module Big_to_small1 : B2S = functor (X : Big) -> X
+ {
+  ("Big_to_small1", module) ->
+      Abs<.40>
+-        (shape-var/391,
++        (shape-var/386,
+          {<<internal>>
+-          ("t", type) -> shape-var/391<<internal>> . "t"[type];
++          ("t", type) -> shape-var/386<<internal>> . "t"[type];
+           });
+  }
+ module Big_to_small1 : B2S
+@@ -238,9 +238,9 @@ module Big_to_small2 : B2S = functor (X : Big) -> struct include X end
+ {
+  ("Big_to_small2", module) ->
+      Abs<.42>
+-        (shape-var/397,
++        (shape-var/392,
+          {
+-          ("t", type) -> (shape-var/397<<internal>> . "t"[type])<.41>;
++          ("t", type) -> (shape-var/392<<internal>> . "t"[type])<.41>;
+           });
+  }
+ module Big_to_small2 : B2S
+diff --git a/testsuite/tests/shapes/open_arg.ml b/testsuite/tests/shapes/open_arg.ml
+index cc58238222..84123baca2 100644
+--- a/testsuite/tests/shapes/open_arg.ml
++++ b/testsuite/tests/shapes/open_arg.ml
+@@ -22,7 +22,7 @@ end = struct end
+ 
+ [%%expect{|
+ {
+- ("Make", module) -> Abs<.3>(I/284, {
++ ("Make", module) -> Abs<.3>(I/279, {
+                                      });
+  }
+ module Make : functor (I : sig end) -> sig end
+diff --git a/testsuite/tests/shapes/recmodules.ml b/testsuite/tests/shapes/recmodules.ml
+index 93a3fabacf..305a80a97d 100644
+--- a/testsuite/tests/shapes/recmodules.ml
++++ b/testsuite/tests/shapes/recmodules.ml
+@@ -44,10 +44,10 @@ end = B
+ [%%expect{|
+ {
+  ("A", module) -> {<.11>
+-                   ("t", type) -> A/307<.11> . "t"[type];
++                   ("t", type) -> A/302<.11> . "t"[type];
+                    };
+  ("B", module) -> {<.12>
+-                   ("t", type) -> B/308<.12> . "t"[type];
++                   ("t", type) -> B/303<.12> . "t"[type];
+                    };
+  }
+ module rec A : sig type t = Leaf of B.t end
+@@ -86,13 +86,13 @@ end = Set.Make(A)
+  ("ASet", module) ->
+      {
+       ("compare", value) ->
+-          CU Stdlib . "Set"[module] . "Make"[module](A/329<.19>) .
++          CU Stdlib . "Set"[module] . "Make"[module](A/324<.19>) .
+           "compare"[value];
+       ("elt", type) ->
+-          CU Stdlib . "Set"[module] . "Make"[module](A/329<.19>) .
++          CU Stdlib . "Set"[module] . "Make"[module](A/324<.19>) .
+           "elt"[type];
+       ("t", type) ->
+-          CU Stdlib . "Set"[module] . "Make"[module](A/329<.19>) . "t"[type];
++          CU Stdlib . "Set"[module] . "Make"[module](A/324<.19>) . "t"[type];
+       };
+  }
+ module rec A :
+diff --git a/testsuite/tests/shapes/rotor_example.ml b/testsuite/tests/shapes/rotor_example.ml
+index 465c63afbf..b78757d0e3 100644
+--- a/testsuite/tests/shapes/rotor_example.ml
++++ b/testsuite/tests/shapes/rotor_example.ml
+@@ -26,8 +26,8 @@ end
+ {
+  ("Pair", module) ->
+      Abs<.9>
+-        (X/284,
+-         Abs(Y/285, {
++        (X/279,
++         Abs(Y/280, {
+                      ("t", type) -> <.5>;
+                      ("to_string", value) -> <.6>;
+                      }));
+diff --git a/testsuite/tests/statmemprof/alloc_counts.ml b/testsuite/tests/statmemprof/alloc_counts.ml
+index de0d1e9e49..f8cbb5658d 100644
+--- a/testsuite/tests/statmemprof/alloc_counts.ml
++++ b/testsuite/tests/statmemprof/alloc_counts.ml
+@@ -1,7 +1,4 @@
+-(* TEST
+-* skip
+-reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
+-*)
++(* TEST *)
+ module MP = Gc.Memprof
+ 
+ let allocs_by_memprof f =
+diff --git a/testsuite/tests/statmemprof/arrays_in_major.ml b/testsuite/tests/statmemprof/arrays_in_major.ml
+index eb627324ba..78907a18e3 100644
+--- a/testsuite/tests/statmemprof/arrays_in_major.ml
++++ b/testsuite/tests/statmemprof/arrays_in_major.ml
+@@ -1,7 +1,5 @@
+ (* TEST
+    flags = "-g"
+-   * skip
+-   reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
+ *)
+ 
+ open Gc.Memprof
+diff --git a/testsuite/tests/statmemprof/arrays_in_major.reference b/testsuite/tests/statmemprof/arrays_in_major.reference
+new file mode 100644
+index 0000000000..1f34ad8ec8
+--- /dev/null
++++ b/testsuite/tests/statmemprof/arrays_in_major.reference
+@@ -0,0 +1,11 @@
++check_nosample
++check_counts_full_major
++check_counts_full_major
++check_no_nested
++check_distrib 300 3000 3 0.000010
++check_distrib 300 3000 1 0.000100
++check_distrib 300 3000 1 0.010000
++check_distrib 300 3000 1 0.900000
++check_distrib 300 300 100000 0.100000
++check_distrib 300000 300000 30 0.100000
++OK !
+diff --git a/testsuite/tests/statmemprof/arrays_in_minor.ml b/testsuite/tests/statmemprof/arrays_in_minor.ml
+index 4359642d0e..432f8b1d09 100644
+--- a/testsuite/tests/statmemprof/arrays_in_minor.ml
++++ b/testsuite/tests/statmemprof/arrays_in_minor.ml
+@@ -1,7 +1,5 @@
+ (* TEST
+    flags = "-g"
+-   * skip
+-   reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
+ *)
+ 
+ open Gc.Memprof
+diff --git a/testsuite/tests/statmemprof/arrays_in_minor.reference b/testsuite/tests/statmemprof/arrays_in_minor.reference
+new file mode 100644
+index 0000000000..1dad91939c
+--- /dev/null
++++ b/testsuite/tests/statmemprof/arrays_in_minor.reference
+@@ -0,0 +1,11 @@
++check_nosample
++check_counts_full_major
++check_counts_full_major
++check_no_nested
++check_distrib 1 250 1000 0.000010
++check_distrib 1 250 1000 0.000100
++check_distrib 1 250 1000 0.010000
++check_distrib 1 250 1000 0.900000
++check_distrib 1 1 10000000 0.010000
++check_distrib 250 250 100000 0.100000
++OK !
+diff --git a/testsuite/tests/statmemprof/blocking_in_callback.ml b/testsuite/tests/statmemprof/blocking_in_callback.ml
+index e1e40f1fb6..00f49cfc74 100644
+--- a/testsuite/tests/statmemprof/blocking_in_callback.ml
++++ b/testsuite/tests/statmemprof/blocking_in_callback.ml
+@@ -1,8 +1,6 @@
+ (* TEST
+ * hassysthreads
+ include systhreads
+-* skip
+-reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
+ ** bytecode
+ ** native
+ *)
+diff --git a/testsuite/tests/statmemprof/callstacks.ml b/testsuite/tests/statmemprof/callstacks.ml
+index e864a50019..ec5a4199f0 100644
+--- a/testsuite/tests/statmemprof/callstacks.ml
++++ b/testsuite/tests/statmemprof/callstacks.ml
+@@ -3,15 +3,11 @@
+ 
+    * flat-float-array
+      reference = "${test_source_directory}/callstacks.flat-float-array.reference"
+-   * skip
+-   reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
+    ** native
+    ** bytecode
+ 
+    * no-flat-float-array
+      reference = "${test_source_directory}/callstacks.no-flat-float-array.reference"
+-   * skip
+-   reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
+    ** native
+    ** bytecode
+ *)
+diff --git a/testsuite/tests/statmemprof/comballoc.ml b/testsuite/tests/statmemprof/comballoc.ml
+index 60ca4a0123..22b2547101 100644
+--- a/testsuite/tests/statmemprof/comballoc.ml
++++ b/testsuite/tests/statmemprof/comballoc.ml
+@@ -1,10 +1,8 @@
+ (* TEST
+    flags = "-g"
+-   * skip
+-   reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
+-   ** bytecode
++   * bytecode
+      reference = "${test_source_directory}/comballoc.byte.reference"
+-   ** native
++   * native
+      reference = "${test_source_directory}/comballoc.opt.reference"
+ *)
+ 
+diff --git a/testsuite/tests/statmemprof/custom.ml b/testsuite/tests/statmemprof/custom.ml
+index 41cf902ec8..f0ddfa7eed 100644
+--- a/testsuite/tests/statmemprof/custom.ml
++++ b/testsuite/tests/statmemprof/custom.ml
+@@ -1,7 +1,4 @@
+-(* TEST
+-* skip
+-reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
+-*)
++(* TEST *)
+ 
+ open Gc.Memprof
+ 
+diff --git a/testsuite/tests/statmemprof/exception_callback.ml b/testsuite/tests/statmemprof/exception_callback.ml
+index f9f02f690f..e1589372ab 100644
+--- a/testsuite/tests/statmemprof/exception_callback.ml
++++ b/testsuite/tests/statmemprof/exception_callback.ml
+@@ -1,7 +1,5 @@
+ (* TEST
+    exit_status = "2"
+-   * skip
+-   reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
+ *)
+ 
+ open Gc.Memprof
+diff --git a/testsuite/tests/statmemprof/exception_callback_minor.ml b/testsuite/tests/statmemprof/exception_callback_minor.ml
+index 0bb37782be..f514123276 100644
+--- a/testsuite/tests/statmemprof/exception_callback_minor.ml
++++ b/testsuite/tests/statmemprof/exception_callback_minor.ml
+@@ -1,7 +1,5 @@
+ (* TEST
+    exit_status = "2"
+-   * skip
+-   reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
+ *)
+ 
+ open Gc.Memprof
+diff --git a/testsuite/tests/statmemprof/intern.ml b/testsuite/tests/statmemprof/intern.ml
+index bebcc3c8ff..bce6f89c5c 100644
+--- a/testsuite/tests/statmemprof/intern.ml
++++ b/testsuite/tests/statmemprof/intern.ml
+@@ -1,7 +1,5 @@
+ (* TEST
+    flags = "-g"
+-   * skip
+-   reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
+ *)
+ 
+ open Gc.Memprof
+diff --git a/testsuite/tests/statmemprof/intern.reference b/testsuite/tests/statmemprof/intern.reference
+new file mode 100644
+index 0000000000..d83e8d6d50
+--- /dev/null
++++ b/testsuite/tests/statmemprof/intern.reference
+@@ -0,0 +1,10 @@
++check_nosample
++check_counts_full_major
++check_counts_full_major
++check_no_nested
++check_distrib 2 3000 3 0.000010
++check_distrib 2 3000 1 0.000100
++check_distrib 2 2000 1 0.010000
++check_distrib 2 2000 1 0.900000
++check_distrib 300000 300000 20 0.100000
++OK !
+diff --git a/testsuite/tests/statmemprof/lists_in_minor.ml b/testsuite/tests/statmemprof/lists_in_minor.ml
+index d08716c71b..ebd434857e 100644
+--- a/testsuite/tests/statmemprof/lists_in_minor.ml
++++ b/testsuite/tests/statmemprof/lists_in_minor.ml
+@@ -1,7 +1,5 @@
+ (* TEST
+    flags = "-g"
+-   * skip
+-   reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
+ *)
+ 
+ open Gc.Memprof
+diff --git a/testsuite/tests/statmemprof/lists_in_minor.reference b/testsuite/tests/statmemprof/lists_in_minor.reference
+new file mode 100644
+index 0000000000..11cfe0ca12
+--- /dev/null
++++ b/testsuite/tests/statmemprof/lists_in_minor.reference
+@@ -0,0 +1,8 @@
++check_distrib 10 1000000 0.010000
++check_distrib 1000000 10 0.000010
++check_distrib 1000000 10 0.000100
++check_distrib 1000000 10 0.001000
++check_distrib 1000000 10 0.010000
++check_distrib 100000 10 0.100000
++check_distrib 100000 10 0.900000
++OK !
+diff --git a/testsuite/tests/statmemprof/minor_no_postpone.ml b/testsuite/tests/statmemprof/minor_no_postpone.ml
+index 21c8bfb244..fcb94cf81d 100644
+--- a/testsuite/tests/statmemprof/minor_no_postpone.ml
++++ b/testsuite/tests/statmemprof/minor_no_postpone.ml
+@@ -1,7 +1,5 @@
+ (* TEST
+    modules = "minor_no_postpone_stub.c"
+-   * skip
+-   reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
+ *)
+ 
+ open Gc.Memprof
+diff --git a/testsuite/tests/statmemprof/moved_while_blocking.ml b/testsuite/tests/statmemprof/moved_while_blocking.ml
+index bb8dfc9848..8efc172aea 100644
+--- a/testsuite/tests/statmemprof/moved_while_blocking.ml
++++ b/testsuite/tests/statmemprof/moved_while_blocking.ml
+@@ -1,8 +1,6 @@
+ (* TEST
+ * hassysthreads
+ include systhreads
+-* skip
+-reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
+ ** bytecode
+ ** native
+ *)
+diff --git a/testsuite/tests/statmemprof/thread_exit_in_callback.ml b/testsuite/tests/statmemprof/thread_exit_in_callback.ml
+index 28e2aabb8b..753f7726f5 100644
+--- a/testsuite/tests/statmemprof/thread_exit_in_callback.ml
++++ b/testsuite/tests/statmemprof/thread_exit_in_callback.ml
+@@ -1,8 +1,6 @@
+ (* TEST
+ * hassysthreads
+ include systhreads
+-* skip
+-reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
+ ** bytecode
+ ** native
+ *)
+diff --git a/testsuite/tests/tool-debugger/basic/debuggee.ml b/testsuite/tests/tool-debugger/basic/debuggee.ml
+index 8604edf239..91ad3c21dc 100644
+--- a/testsuite/tests/tool-debugger/basic/debuggee.ml
++++ b/testsuite/tests/tool-debugger/basic/debuggee.ml
+@@ -2,15 +2,13 @@
+ set foo = "bar"
+ flags += " -g "
+ ocamldebug_script = "${test_source_directory}/input_script"
+-* skip
+-reason = "ocamldebug is broken (#34)"
+-** debugger
+-*** shared-libraries
+-**** setup-ocamlc.byte-build-env
+-***** ocamlc.byte
+-****** check-ocamlc.byte-output
+-******* ocamldebug
+-******** check-program-output
++* debugger
++** shared-libraries
++*** setup-ocamlc.byte-build-env
++**** ocamlc.byte
++***** check-ocamlc.byte-output
++****** ocamldebug
++******* check-program-output
+ *)
+ 
+ print_endline Sys.argv.(1);;
+diff --git a/testsuite/tests/tool-debugger/dynlink/host.ml b/testsuite/tests/tool-debugger/dynlink/host.ml
+index c445c8acd3..f46ef8a022 100644
+--- a/testsuite/tests/tool-debugger/dynlink/host.ml
++++ b/testsuite/tests/tool-debugger/dynlink/host.ml
+@@ -7,29 +7,27 @@ libraries = ""
+ flags += " -g "
+ ocamldebug_script = "${test_source_directory}/input_script"
+ 
+-* skip
+-reason = "ocamldebug is broken (#34)"
+-** debugger
+-*** shared-libraries
+-**** setup-ocamlc.byte-build-env
+-***** ocamlc.byte
++* debugger
++** shared-libraries
++*** setup-ocamlc.byte-build-env
++**** ocamlc.byte
+ module = "host.ml"
+-****** ocamlc.byte
++***** ocamlc.byte
+ module = "plugin.ml"
+-******* ocamlc.byte
++****** ocamlc.byte
+ module = ""
+ all_modules = "host.cmo"
+ program = "${test_build_directory}/host.byte"
+ libraries = "dynlink"
+ 
+-******** run
++******* run
+ output = "host.output"
+-********* check-program-output
++******** check-program-output
+ reference = "${test_source_directory}/host.reference"
+ 
+-********* ocamldebug
++******** ocamldebug
+ output = "host.debug.output"
+-********** check-program-output
++********* check-program-output
+ reference = "${test_source_directory}/host.debug.reference"
+ 
+ *)
+diff --git a/testsuite/tests/tool-debugger/find-artifacts/debuggee.ml b/testsuite/tests/tool-debugger/find-artifacts/debuggee.ml
+index 7c6f00c70f..70aee3ff04 100644
+--- a/testsuite/tests/tool-debugger/find-artifacts/debuggee.ml
++++ b/testsuite/tests/tool-debugger/find-artifacts/debuggee.ml
+@@ -1,27 +1,25 @@
+ (* TEST
+ ocamldebug_script = "${test_source_directory}/input_script"
+-* skip
+-reason = "ocamldebug is broken (#34)"
+-** debugger
+-*** shared-libraries
+-**** setup-ocamlc.byte-build-env
+-***** script
++* debugger
++** shared-libraries
++*** setup-ocamlc.byte-build-env
++**** script
+ script = "mkdir out"
+-****** ocamlc.byte
++***** ocamlc.byte
+ flags = "-g -c"
+ all_modules = "${test_source_directory}/in/blah.ml"
+ program = "out/blah.cmo"
+-******* ocamlc.byte
++****** ocamlc.byte
+ program = "out/foo.cmo"
+ flags = "-I out -g -c"
+ all_modules = "${test_source_directory}/in/foo.ml"
+-******** ocamlc.byte
++******* ocamlc.byte
+ all_modules = "out/blah.cmo out/foo.cmo"
+ flags = " -g "
+ program = "debuggee.exe"
+-********* check-ocamlc.byte-output
+-********** ocamldebug
+-*********** check-program-output
++******** check-ocamlc.byte-output
++********* ocamldebug
++********** check-program-output
+ *)
+ 
+ (* This file only contains the specification of how to run the test *)
+diff --git a/testsuite/tests/tool-debugger/module_named_main/main.ml b/testsuite/tests/tool-debugger/module_named_main/main.ml
+index e31c16391e..25eebe7c02 100644
+--- a/testsuite/tests/tool-debugger/module_named_main/main.ml
++++ b/testsuite/tests/tool-debugger/module_named_main/main.ml
+@@ -1,15 +1,13 @@
+ (* TEST
+ flags += " -g "
+ ocamldebug_script = "${test_source_directory}/input_script"
+-* skip
+-reason = "ocamldebug is broken (#34)"
+-** debugger
+-*** shared-libraries
+-**** setup-ocamlc.byte-build-env
+-***** ocamlc.byte
+-****** check-ocamlc.byte-output
+-******* ocamldebug
+-******** check-program-output
++* debugger
++** shared-libraries
++*** setup-ocamlc.byte-build-env
++**** ocamlc.byte
++***** check-ocamlc.byte-output
++****** ocamldebug
++******* check-program-output
+ *)
+ 
+ module Submodule = struct
+diff --git a/testsuite/tests/tool-debugger/no_debug_event/noev.ml b/testsuite/tests/tool-debugger/no_debug_event/noev.ml
+index f06c14a117..4eb334ea84 100644
+--- a/testsuite/tests/tool-debugger/no_debug_event/noev.ml
++++ b/testsuite/tests/tool-debugger/no_debug_event/noev.ml
+@@ -1,30 +1,28 @@
+ (* TEST
+ readonly_files = "a.ml b.ml"
+ ocamldebug_script = "${test_source_directory}/input_script"
+-* skip
+-reason = "ocamldebug is broken (#34)"
+-** debugger
+-*** shared-libraries
+-**** setup-ocamlc.byte-build-env
+-***** ocamlc.byte
++* debugger
++** shared-libraries
++*** setup-ocamlc.byte-build-env
++**** ocamlc.byte
+ module = "a.ml"
+ flags = "-g -for-pack foo"
+-****** ocamlc.byte
++***** ocamlc.byte
+ module = ""
+ all_modules = "a.cmo"
+ program = "foo.cmo"
+ flags = "-g -pack"
+-******* ocamlc.byte
++****** ocamlc.byte
+ module = "b.ml"
+ flags = " -g "
+-******** ocamlc.byte
++******* ocamlc.byte
+ module = ""
+ flags = " -g "
+ all_modules = "foo.cmo b.cmo"
+ program = "${test_build_directory}/noev.exe"
+-********* check-ocamlc.byte-output
+-********** ocamldebug
+-*********** check-program-output
++******** check-ocamlc.byte-output
++********* ocamldebug
++********** check-program-output
+ *)
+ 
+ (* This file only contains the specification of how to run the test *)
+diff --git a/testsuite/tests/tool-debugger/printer/debuggee.ml b/testsuite/tests/tool-debugger/printer/debuggee.ml
+index b2d6e6e7c5..f22a4bd50f 100644
+--- a/testsuite/tests/tool-debugger/printer/debuggee.ml
++++ b/testsuite/tests/tool-debugger/printer/debuggee.ml
+@@ -3,17 +3,15 @@ flags += " -g "
+ ocamldebug_script = "${test_source_directory}/input_script"
+ readonly_files = "printer.ml"
+ include debugger
+-* skip
+-reason = "ocamldebug is broken (#34)"
+-** debugger
+-*** shared-libraries
+-**** setup-ocamlc.byte-build-env
+-***** ocamlc.byte
++* debugger
++** shared-libraries
++*** setup-ocamlc.byte-build-env
++**** ocamlc.byte
+ module = "printer.ml"
+-***** ocamlc.byte
+-****** check-ocamlc.byte-output
+-******* ocamldebug
+-******** check-program-output
++**** ocamlc.byte
++***** check-ocamlc.byte-output
++****** ocamldebug
++******* check-program-output
+ *)
+ 
+ let f x =
+diff --git a/testsuite/tests/typing-sigsubst/sigsubst.ml b/testsuite/tests/typing-sigsubst/sigsubst.ml
+index 0068e25ae5..5636e9abe2 100644
+--- a/testsuite/tests/typing-sigsubst/sigsubst.ml
++++ b/testsuite/tests/typing-sigsubst/sigsubst.ml
+@@ -24,11 +24,11 @@ end
+ Line 3, characters 2-36:
+ 3 |   include Comparable with type t = t
+       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+-Error: Illegal shadowing of included type t/289 by t/294
++Error: Illegal shadowing of included type t/284 by t/289
+        Line 2, characters 2-19:
+-         Type t/289 came from this include
++         Type t/284 came from this include
+        Line 3, characters 2-23:
+-         The value print has no valid type if t/289 is shadowed
++         The value print has no valid type if t/284 is shadowed
+ |}]
+ 
+ module type Sunderscore = sig
+diff --git a/testsuite/tests/unwind/unwind_test.reference b/testsuite/tests/unwind/unwind_test.reference
+index b3804d00e5..827cc4affc 100644
+--- a/testsuite/tests/unwind/unwind_test.reference
++++ b/testsuite/tests/unwind/unwind_test.reference
+@@ -1,5 +1,4 @@
+ ml_perform_stack_walk
+-caml_c_call
+ Mylib.baz
+ Driver.entry
+ caml_program
+diff --git a/testsuite/tests/weak-ephe-final/ephetest_par.ml b/testsuite/tests/weak-ephe-final/ephetest_par.ml
+index 744c4e844d..621d7292ff 100644
+--- a/testsuite/tests/weak-ephe-final/ephetest_par.ml
++++ b/testsuite/tests/weak-ephe-final/ephetest_par.ml
+@@ -1,4 +1,7 @@
+-(* TEST *)
++(* TEST
++   * skip
++   reason = "OCaml 5 only"
++ *)
+ 
+ (* Due to GCs running at non-deterministic places, the output from these tests
+  * are unreliable except the bad value checks and as a check for catastrophic
+diff --git a/testsuite/tests/weak-ephe-final/finaliser2.ml b/testsuite/tests/weak-ephe-final/finaliser2.ml
+index c12d2cfd6b..2035bee588 100644
+--- a/testsuite/tests/weak-ephe-final/finaliser2.ml
++++ b/testsuite/tests/weak-ephe-final/finaliser2.ml
+@@ -1,4 +1,7 @@
+-(* TEST *)
++(* TEST
++   * skip
++   reason = "OCaml 5 only"
++*)
+ 
+ let test1 =
+   let r' = ref 0 in
+diff --git a/testsuite/tests/weak-ephe-final/finaliser_handover.ml b/testsuite/tests/weak-ephe-final/finaliser_handover.ml
+index fa2d2efc43..752a7eeabf 100644
+--- a/testsuite/tests/weak-ephe-final/finaliser_handover.ml
++++ b/testsuite/tests/weak-ephe-final/finaliser_handover.ml
+@@ -1,4 +1,7 @@
+-(* TEST *)
++(* TEST
++   * skip
++   reason = "OCaml 5 only"
++*)
+ 
+ (* ocaml-multicore issues 528 and 468 *)
+ 
+diff --git a/testsuite/tests/weak-ephe-final/weaklifetime_par.ml b/testsuite/tests/weak-ephe-final/weaklifetime_par.ml
+index dede2971e3..6028ef1f0c 100644
+--- a/testsuite/tests/weak-ephe-final/weaklifetime_par.ml
++++ b/testsuite/tests/weak-ephe-final/weaklifetime_par.ml
+@@ -1,4 +1,6 @@
+ (* TEST
++   * skip
++   reason = "OCaml 5 only"
+ *)
+ 
+ let size = 1000;;
diff --git a/diff-against-trunk-system.diff b/diff-against-trunk-system.diff
new file mode 100644
index 0000000000..1d77c91d56
--- /dev/null
+++ b/diff-against-trunk-system.diff
@@ -0,0 +1,3472 @@
+diff --git a/.Diff-of-diff.diff b/.Diff-of-diff.diff
+new file mode 100644
+index 0000000000..e69de29bb2
+diff --git a/Changes b/Changes
+index e35148f24d..af5bbe3e0e 100644
+--- a/Changes
++++ b/Changes
+@@ -462,6 +462,10 @@ OCaml 4.14.0
+   toplevel, as in the bytecode toplevel.
+   (David Allsopp, report by Nathan Rebours, review by Gabriel Scherer)
+ 
++- #10853: `Obj.reachable_words` could crash if called after a marshaling
++  operation in `NO_SHARING` mode.
++  (Xavier Leroy, report by Anil Madhavapeddy, review by Alain Frisch)
++
+ 
+ OCaml 4.13 maintenance branch
+ -----------------------------
+diff --git a/Makefile.config.in b/Makefile.config.in
+index 63bdc810a4..fb7ab00998 100644
+--- a/Makefile.config.in
++++ b/Makefile.config.in
+@@ -255,7 +255,7 @@ FLAT_FLOAT_ARRAY=@flat_float_array@
+ FUNCTION_SECTIONS=@function_sections@
+ AWK=@AWK@
+ STDLIB_MANPAGES=@stdlib_manpages@
+-NAKED_POINTERS=false
++NAKED_POINTERS=@naked_pointers@
+ 
+ ### Native command to build ocamlrun.exe
+ 
+diff --git a/VERSION b/VERSION
+index d9d76e3115..4ef434f979 100644
+--- a/VERSION
++++ b/VERSION
+@@ -1,4 +1,4 @@
+-5.00.0+dev0-2021-11-05
++5.0.0+jst-backport
+ 
+ # Starting with OCaml 4.14, although the version string that appears above is
+ # still correct and this file can thus still be used to figure it out,
+diff --git a/api_docgen/Makefile.docfiles b/api_docgen/Makefile.docfiles
+index 09c24557b5..14a3b18322 100644
+--- a/api_docgen/Makefile.docfiles
++++ b/api_docgen/Makefile.docfiles
+@@ -35,8 +35,8 @@ str_MLIS := str.mli
+ unix_MLIS := unix.mli unixLabels.mli
+ dynlink_MLIS := dynlink.mli
+ thread_MLIS := \
+-  thread.mli event.mli \
+-  threadUnix.mli
++  thread.mli condition.mli mutex.mli event.mli \
++  threadUnix.mli semaphore.mli
+ 
+ STDLIB=$(filter-out stdlib__Pervasives, $(STDLIB_MODULES))
+ 
+diff --git a/asmcomp/amd64/emit.mlp b/asmcomp/amd64/emit.mlp
+index ef768b11d8..e7dec0460a 100644
+--- a/asmcomp/amd64/emit.mlp
++++ b/asmcomp/amd64/emit.mlp
+@@ -63,6 +63,7 @@ let cfi_endproc () =
+ let cfi_adjust_cfa_offset n =
+   if Config.asm_cfi_supported then D.cfi_adjust_cfa_offset n
+ 
++(* BACKPORT
+ let cfi_remember_state () =
+   if Config.asm_cfi_supported then D.cfi_remember_state ()
+ 
+@@ -71,13 +72,16 @@ let cfi_restore_state () =
+ 
+ let cfi_def_cfa_register reg =
+   if Config.asm_cfi_supported then D.cfi_def_cfa_register reg
++*)
+ 
+ let emit_debug_info dbg =
+   emit_debug_info_gen dbg D.file D.loc
+ 
+ let fp = Config.with_frame_pointers
+ 
++(* BACKPORT
+ let stack_threshold_size = Config.stack_threshold * 8 (* bytes *)
++*)
+ 
+ let frame_size env =                     (* includes return address *)
+   if env.f.fun_frame_required then begin
+@@ -536,8 +540,9 @@ let emit_instr env fallthrough i =
+           end
+         end
+       end
+-  | Lop(Iextcall { func; alloc; stack_ofs }) ->
++  | Lop(Iextcall { func; alloc; stack_ofs = _ }) ->
+       add_used_symbol func;
++(* BACKPORT
+       let base_stack_size =
+         if Arch.win64 then
+           32 (* Windows x64 rcx+rdx+r8+r9 shadow stack *)
+@@ -549,11 +554,26 @@ let emit_instr env fallthrough i =
+         load_symbol_addr func rax;
+         emit_call "caml_c_call_stack_args";
+         record_frame env i.live (Dbg_other i.dbg);
+-      end else if alloc then begin
++      end else*) if alloc then begin
+         load_symbol_addr func rax;
+         emit_call "caml_c_call";
+         record_frame env i.live (Dbg_other i.dbg);
++(* BACKPORT BEGIN *)
++        if system <> S_win64 then begin
++
++          (* In amd64.S, "caml_c_call" tail-calls the C function (in order to
++             produce nicer backtraces), so we need to restore r15 manually after
++             it returns (note that this increases code size).
++
++             In amd64nt.asm (used for Win64), "caml_c_call" invokes the C
++             function via a regular call, and restores r15 itself, thus avoiding
++             the code size increase. *)
++
++          I.mov (domain_field Domainstate.Domain_young_ptr) r15
++        end
++(* BACKPORT END *)
+       end else begin
++(* BACKPORT
+         I.mov rsp rbp;
+         cfi_remember_state ();
+         cfi_def_cfa_register "rbp";
+@@ -561,10 +581,12 @@ let emit_instr env fallthrough i =
+            will not unwind through this unless we were to tag this
+            calling frame with cfi_signal_frame in it's definition. *)
+         I.mov (domain_field Domainstate.Domain_c_stack) rsp;
+-
++*)
+         emit_call func;
++(* BACKPORT
+         I.mov rbp rsp;
+         cfi_restore_state ();
++*)
+       end
+   | Lop(Istackoffset n) ->
+       if n < 0
+@@ -741,7 +763,10 @@ let emit_instr env fallthrough i =
+   | Lop(Ispecific(Izextend32)) ->
+       I.mov (arg32 i 0) (res32 i 0)
+   | Lop (Idls_get) ->
++      assert false
++(* BACKPORT
+       I.mov (domain_field Domainstate.Domain_dls_root) (res i 0)
++*)
+   | Lreloadretaddr ->
+       ()
+   | Lreturn ->
+@@ -842,12 +867,24 @@ let emit_instr env fallthrough i =
+       load_label_addr lbl_handler r11;
+       I.push r11;
+       cfi_adjust_cfa_offset 8;
++(* BACKPORT BEGIN
+       I.push (domain_field Domainstate.Domain_exn_handler);
++*)
++      I.push (domain_field Domainstate.Domain_exception_pointer);
++(* BACKPORT END *)
+       cfi_adjust_cfa_offset 8;
++(* BACKPORT BEGIN
+       I.mov rsp (domain_field Domainstate.Domain_exn_handler);
++*)
++      I.mov rsp (domain_field Domainstate.Domain_exception_pointer);
++(* BACKPORT END *)
+       env.stack_offset <- env.stack_offset + 16;
+   | Lpoptrap ->
++(* BACKPORT BEGIN
+       I.pop (domain_field Domainstate.Domain_exn_handler);
++*)
++      I.pop (domain_field Domainstate.Domain_exception_pointer);
++(* BACKPORT END *)
+       cfi_adjust_cfa_offset (-8);
+       I.add (int 8) rsp;
+       cfi_adjust_cfa_offset (-8);
+@@ -855,14 +892,26 @@ let emit_instr env fallthrough i =
+   | Lraise k ->
+       begin match k with
+       | Lambda.Raise_regular ->
++(* BACKPORT BEGIN *)
++          I.mov (int 0) (domain_field Domainstate.Domain_backtrace_pos);
++(* BACKPORT END *)
+           emit_call "caml_raise_exn";
+           record_frame env Reg.Set.empty (Dbg_raise i.dbg)
+       | Lambda.Raise_reraise ->
++(* BACKPORT BEGIN
+           emit_call "caml_reraise_exn";
++*)
++          emit_call "caml_raise_exn";
++(* BACKPORT END *)
+           record_frame env Reg.Set.empty (Dbg_raise i.dbg)
+       | Lambda.Raise_notrace ->
++(* BACKPORT BEGIN
+           I.mov (domain_field Domainstate.Domain_exn_handler) rsp;
+           I.pop (domain_field Domainstate.Domain_exn_handler);
++*)
++          I.mov (domain_field Domainstate.Domain_exception_pointer) rsp;
++          I.pop (domain_field Domainstate.Domain_exception_pointer);
++(* BACKPORT END *)
+           I.pop r11;
+           I.jmp r11
+       end
+@@ -876,6 +925,7 @@ let rec emit_all env fallthrough i =
+ 
+ let all_functions = ref []
+ 
++(* BACKPORT
+ type preproc_fun_result =
+   { max_stack_size : int;
+     contains_nontail_calls : bool }
+@@ -899,6 +949,7 @@ let preproc_fun env fun_body _fun_name =
+   let fs = frame_size env in
+   let r = {max_stack_size = fs; contains_nontail_calls = false} in
+   proc_instr r fs fun_body
++*)
+ 
+ (* Emission of a function declaration *)
+ 
+@@ -918,6 +969,7 @@ let fundecl fundecl =
+   D.label (emit_symbol fundecl.fun_name);
+   emit_debug_info fundecl.fun_dbg;
+   cfi_startproc ();
++(* BACKPORT
+   if !Clflags.runtime_variant = "d" then
+     emit_call "caml_assert_stack_invariants";
+   let { max_stack_size; contains_nontail_calls} =
+@@ -933,9 +985,11 @@ let fundecl fundecl =
+     def_label ret;
+     handle_overflow := Some (overflow, ret)
+   end;
++*)
+   emit_all env true fundecl.fun_body;
+   List.iter emit_call_gc env.call_gc_sites;
+   emit_call_bound_errors env;
++(* BACKPORT
+   begin match !handle_overflow with
+   | None -> ()
+   | Some (overflow,ret) -> begin
+@@ -950,6 +1004,7 @@ let fundecl fundecl =
+       I.jmp (label ret)
+     end
+   end;
++*)
+   if fundecl.fun_frame_required then begin
+     let n = (frame_size env) - 8 - (if fp then 8 else 0) in
+     if n <> 0
+diff --git a/asmcomp/amd64/proc.ml b/asmcomp/amd64/proc.ml
+index 64b05a95c8..dbeaff0cbe 100644
+--- a/asmcomp/amd64/proc.ml
++++ b/asmcomp/amd64/proc.ml
+@@ -297,12 +297,20 @@ let destroyed_at_c_call =
+   if win64 then
+     (* Win64: rbx, rsi, rdi, r12-r15, xmm6-xmm15 preserved *)
+     Array.of_list(List.map phys_reg
++(* BACKPORT BEGIN
+       [0;4;5;6;7;10;11;12;
++*)
++      [0;4;5;6;7;10;11;
++(* BACKPORT END *)
+        100;101;102;103;104;105])
+   else
+     (* Unix: rbx, r12-r15 preserved *)
+     Array.of_list(List.map phys_reg
++(* BACKPORT BEGIN
+       [0;2;3;4;5;6;7;10;11;12;
++*)
++      [0;2;3;4;5;6;7;10;11;
++(* BACKPORT END *)
+        100;101;102;103;104;105;106;107;
+        108;109;110;111;112;113;114;115])
+ 
+diff --git a/asmcomp/cmm_helpers.ml b/asmcomp/cmm_helpers.ml
+index 4e0b391338..9823a80f19 100644
+--- a/asmcomp/cmm_helpers.ml
++++ b/asmcomp/cmm_helpers.ml
+@@ -2200,8 +2200,13 @@ let assignment_kind
+     (init: Lambda.initialization_or_assignment) =
+   match init, ptr with
+   | Assignment, Pointer -> Caml_modify
++(* BACKPORT BEGIN
+   | Heap_initialization, Pointer
+   | Root_initialization, Pointer -> Caml_initialize
++*)
++  | Heap_initialization, Pointer -> Caml_initialize
++  | Root_initialization, Pointer -> Simple
++(* BACKPORT END *)
+   | Assignment, Immediate
+   | Heap_initialization, Immediate
+   | Root_initialization, Immediate -> Simple
+diff --git a/boot/ocamlc b/boot/ocamlc
+index d431dbd1f4..804880e707 100755
+Binary files a/boot/ocamlc and b/boot/ocamlc differ
+diff --git a/boot/ocamllex b/boot/ocamllex
+index b35488cadc..9c4fe66628 100755
+Binary files a/boot/ocamllex and b/boot/ocamllex differ
+diff --git a/build-aux/ocaml_version.m4 b/build-aux/ocaml_version.m4
+index 681f116bbb..0a59107ea8 100644
+--- a/build-aux/ocaml_version.m4
++++ b/build-aux/ocaml_version.m4
+@@ -32,11 +32,11 @@ m4_define([OCAML__DEVELOPMENT_VERSION], [true])
+ # including the patchlevel, are mandatory.
+ 
+ m4_define([OCAML__VERSION_MAJOR], [5])
+-m4_define([OCAML__VERSION_MINOR], [00])
++m4_define([OCAML__VERSION_MINOR], [0])
+ m4_define([OCAML__VERSION_PATCHLEVEL], [0])
+ # Note that the OCAML__VERSION_EXTRA string defined below is always empty
+ # for officially-released versions of OCaml.
+-m4_define([OCAML__VERSION_EXTRA], [dev0-2021-11-05])
++m4_define([OCAML__VERSION_EXTRA], [jst-backport])
+ 
+ # The OCAML__VERSION_EXTRA_PREFIX macro defined below should be a
+ # single character:
+diff --git a/bytecomp/emitcode.ml b/bytecomp/emitcode.ml
+index ea423e50b7..bd961633a9 100644
+--- a/bytecomp/emitcode.ml
++++ b/bytecomp/emitcode.ml
+@@ -300,10 +300,14 @@ let emit_instr = function
+   | Kgetpubmet tag -> out opGETPUBMET; out_int tag; out_int 0
+   | Kgetdynmet -> out opGETDYNMET
+   | Kevent ev -> record_event ev
++(* BACKPORT BEGIN
+   | Kperform -> out opPERFORM
+   | Kresume -> out opRESUME
+   | Kresumeterm n -> out opRESUMETERM; out_int n
+   | Kreperformterm n -> out opREPERFORMTERM; out_int n
++*)
++  | Kperform | Kresume | Kresumeterm _ | Kreperformterm _ -> assert false
++(* BACKPORT END *)
+   | Kstop -> out opSTOP
+ 
+ (* Emission of a list of instructions. Include some peephole optimization. *)
+diff --git a/configure b/configure
+index 4eaf314bc8..eb31fbb79a 100755
+Binary files a/configure and b/configure differ
+diff --git a/configure.ac b/configure.ac
+index b1a8b29e75..5ed9f2531e 100644
+--- a/configure.ac
++++ b/configure.ac
+@@ -169,6 +169,8 @@ AC_SUBST([flexlink_flags])
+ AC_SUBST([PACKLD])
+ AC_SUBST([stdlib_manpages])
+ AC_SUBST([compute_deps])
++AC_SUBST([naked_pointers])
++AC_SUBST([naked_pointers_checker])
+ AC_SUBST([force_instrumented_runtime])
+ 
+ ## Generated files
+@@ -300,9 +302,16 @@ AC_ARG_ENABLE([frame-pointers],
+   [AS_HELP_STRING([--enable-frame-pointers],
+     [use frame pointers in runtime and generated code])])
+ 
+-AC_ARG_ENABLE([naked-pointers], [],
+-  [AC_MSG_ERROR([Naked pointers are not allowed in OCaml Multicore.])],
+-  [AC_DEFINE([NO_NAKED_POINTERS])])
++dnl AC_ARG_ENABLE([naked-pointers], [],
++dnl   [AC_MSG_ERROR([Naked pointers are not allowed in OCaml Multicore.])],
++dnl   [AC_DEFINE([NO_NAKED_POINTERS])])
++AC_ARG_ENABLE([naked-pointers],
++  [AS_HELP_STRING([--disable-naked-pointers],
++    [do not allow naked pointers])])
++
++AC_ARG_ENABLE([naked-pointers-checker],
++  [AS_HELP_STRING([--enable-naked-pointers-checker],
++    [enable the naked pointers checker])])
+ 
+ AC_ARG_ENABLE([spacetime], [],
+   [AC_MSG_ERROR([spacetime profiling was deleted in OCaml 4.12.])],
+@@ -1812,7 +1821,8 @@ AS_CASE([$enable_systhreads,$enable_unix_lib],
+     [*-*-mingw32|*-pc-windows],
+       [systhread_support=true
+       otherlibraries="$otherlibraries systhreads"
+-      PTHREAD_LIBS="-lpthread"
++dnl      PTHREAD_LIBS="-lpthread"
++      PTHREAD_LIBS=''
+       AC_MSG_NOTICE([the Win32 threads library is supported])],
+     [AX_PTHREAD(
+       [systhread_support=true
+@@ -1854,6 +1864,30 @@ AS_IF([test x"$enable_frame_pointers" = "xyes"],
+   [AC_MSG_NOTICE([not using frame pointers])
+   frame_pointers=false])
+ 
++## No naked pointers
++
++AS_IF([test x"$enable_naked_pointers" = "xno" ],
++  [naked_pointers=false
++   AC_DEFINE([NO_NAKED_POINTERS])],
++  [naked_pointers=true])
++
++AS_IF([test x"$enable_naked_pointers_checker" = "xyes" ],
++  [AS_IF([test x"$enable_naked_pointers" = "xno" ],
++         [AC_MSG_ERROR(m4_normalize([
++               --enable-naked-pointers-checker and --disable-naked-pointers
++               are incompatible]))])
++   AS_CASE(["$arch","$system"],
++    [amd64,linux|amd64,macosx \
++    |amd64,openbsd|amd64,win64 \
++    |amd64,freebsd|amd64,solaris \
++    |arm64,linux|arm64,macosx],
++      [naked_pointers_checker=true
++      AC_DEFINE([NAKED_POINTERS_CHECKER])],
++    [*],
++      [AC_MSG_ERROR([naked pointers checker not supported on this platform])]
++  )],
++  [naked_pointers_checker=false])
++
+ ## Check for mmap support for huge pages and contiguous heap
+ OCAML_MMAP_SUPPORTS_HUGE_PAGES
+ 
+@@ -1963,8 +1997,10 @@ AC_CHECK_LIB(execinfo, backtrace, cclibs="$cclibs -lexecinfo",[])
+ 
+ AS_CASE([$host],
+   [*-*-mingw32],
+-    [bytecclibs="-lws2_32 -lversion -lpthread -lgcc_eh -lDbgHelp"
+-    nativecclibs="-lws2_32 -lversion -lpthread -lgcc_eh -lDbgHelp"],
++dnl    [bytecclibs="-lws2_32 -lversion -lpthread -lgcc_eh -lDbgHelp"
++dnl    nativecclibs="-lws2_32 -lversion -lpthread -lgcc_eh -lDbgHelp"],
++    [bytecclibs="-lws2_32 -lversion -lgcc_eh -lDbgHelp"
++    nativecclibs="-lws2_32 -lversion -lgcc_eh -lDbgHelp"],
+   [*-pc-windows],
+     [bytecclibs="advapi32.lib ws2_32.lib version.lib"
+     nativecclibs="advapi32.lib ws2_32.lib version.lib"],
+diff --git a/diff-against-4.14-runtime.diff b/diff-against-4.14-runtime.diff
+new file mode 100644
+index 0000000000..9db6af5522
+--- /dev/null
++++ b/diff-against-4.14-runtime.diff
+@@ -0,0 +1,573 @@
++diff --git a/runtime/caml/alloc.h b/runtime/caml/alloc.h
++index 13f0fac2fb..816da799bb 100644
++--- a/runtime/caml/alloc.h
+++++ b/runtime/caml/alloc.h
++@@ -17,9 +17,6 @@
++ #define CAML_ALLOC_H
++ 
++ 
++-#ifndef CAML_NAME_SPACE
++-#include "compatibility.h"
++-#endif
++ #include "misc.h"
++ #include "mlvalues.h"
++ 
++diff --git a/runtime/caml/bigarray.h b/runtime/caml/bigarray.h
++index fc1fb14570..1664ae3f6e 100644
++--- a/runtime/caml/bigarray.h
+++++ b/runtime/caml/bigarray.h
++@@ -16,9 +16,6 @@
++ #ifndef CAML_BIGARRAY_H
++ #define CAML_BIGARRAY_H
++ 
++-#ifndef CAML_NAME_SPACE
++-#include "compatibility.h"
++-#endif
++ #include "config.h"
++ #include "mlvalues.h"
++ 
++diff --git a/runtime/caml/callback.h b/runtime/caml/callback.h
++index eef3342ec7..5c45995b8a 100644
++--- a/runtime/caml/callback.h
+++++ b/runtime/caml/callback.h
++@@ -18,9 +18,6 @@
++ #ifndef CAML_CALLBACK_H
++ #define CAML_CALLBACK_H
++ 
++-#ifndef CAML_NAME_SPACE
++-#include "compatibility.h"
++-#endif
++ #include "mlvalues.h"
++ 
++ #ifdef __cplusplus
++diff --git a/runtime/caml/compatibility.h b/runtime/caml/compatibility.h
++deleted file mode 100644
++index 410f975cf7..0000000000
++--- a/runtime/caml/compatibility.h
+++++ /dev/null
++@@ -1,373 +0,0 @@
++-/**************************************************************************/
++-/*                                                                        */
++-/*                                 OCaml                                  */
++-/*                                                                        */
++-/*           Damien Doligez, projet Moscova, INRIA Rocquencourt           */
++-/*                                                                        */
++-/*   Copyright 2003 Institut National de Recherche en Informatique et     */
++-/*     en Automatique.                                                    */
++-/*                                                                        */
++-/*   All rights reserved.  This file is distributed under the terms of    */
++-/*   the GNU Lesser General Public License version 2.1, with the          */
++-/*   special exception on linking described in the file LICENSE.          */
++-/*                                                                        */
++-/**************************************************************************/
++-
++-/* definitions for compatibility with old identifiers */
++-
++-#ifndef CAML_COMPATIBILITY_H
++-#define CAML_COMPATIBILITY_H
++-
++-/* internal global variables renamed between 4.02.1 and 4.03.0 */
++-#define caml_stat_top_heap_size Bsize_wsize(caml_stat_top_heap_wsz)
++-#define caml_stat_heap_size Bsize_wsize(caml_stat_heap_wsz)
++-
++-#ifndef CAML_NAME_SPACE
++-
++-/*
++-   #define --> CAMLextern  (defined with CAMLexport or CAMLprim)
++-   (rien)  --> CAMLprim
++-   g       --> global C identifier
++-   x       --> special case
++-
++-   SP* signals the special cases:
++-   - when the identifier was not simply prefixed with [caml_]
++-   - when the [caml_] version was already used for something else, and
++-     was renamed out of the way (watch out for [caml_alloc] and
++-     [caml_array_bound_error] in *.s)
++-*/
++-
++-/* a faire:
++-   - ui_*   (reverifier que win32.c n'en depend pas)
++-*/
++-
++-
++-/* **** alloc.c */
++-#define alloc CAML_DEPRECATED("alloc", "caml_alloc") caml_alloc /*SP*/
++-#define alloc_small CAML_DEPRECATED("alloc_small", "caml_alloc_small") caml_alloc_small
++-#define alloc_tuple CAML_DEPRECATED("alloc_tuple", "caml_alloc_tuple") caml_alloc_tuple
++-#define alloc_string CAML_DEPRECATED("alloc_string", "caml_alloc_string") caml_alloc_string
++-#define alloc_final CAML_DEPRECATED("alloc_final", "caml_alloc_final") caml_alloc_final
++-#define copy_string CAML_DEPRECATED("copy_string", "caml_copy_string") caml_copy_string
++-#define alloc_array CAML_DEPRECATED("alloc_array", "caml_alloc_array") caml_alloc_array
++-#define copy_string_array CAML_DEPRECATED("copy_string_array", "caml_copy_string_array") caml_copy_string_array
++-#define convert_flag_list CAML_DEPRECATED("convert_flag_list", "caml_convert_flag_list") caml_convert_flag_list
++-
++-/* **** array.c */
++-
++-/* **** backtrace.c */
++-#define backtrace_active CAML_DEPRECATED("backtrace_active", "caml_backtrace_active") caml_backtrace_active
++-#define backtrace_pos CAML_DEPRECATED("backtrace_pos", "caml_backtrace_pos") caml_backtrace_pos
++-#define backtrace_buffer CAML_DEPRECATED("backtrace_buffer", "caml_backtrace_buffer") caml_backtrace_buffer
++-#define backtrace_last_exn CAML_DEPRECATED("backtrace_last_exn", "caml_backtrace_last_exn") caml_backtrace_last_exn
++-#define print_exception_backtrace CAML_DEPRECATED("print_exception_backtrace", "caml_print_exception_backtrace") caml_print_exception_backtrace
++-
++-/* **** callback.c */
++-#define callback_depth CAML_DEPRECATED("callback_depth", "caml_callback_depth") caml_callback_depth
++-#define callbackN_exn CAML_DEPRECATED("callbackN_exn", "caml_callbackN_exn") caml_callbackN_exn
++-#define callback_exn CAML_DEPRECATED("callback_exn", "caml_callback_exn") caml_callback_exn
++-#define callback2_exn CAML_DEPRECATED("callback2_exn", "caml_callback2_exn") caml_callback2_exn
++-#define callback3_exn CAML_DEPRECATED("callback3_exn", "caml_callback3_exn") caml_callback3_exn
++-#define callback CAML_DEPRECATED("callback", "caml_callback") caml_callback
++-#define callback2 CAML_DEPRECATED("callback2", "caml_callback2") caml_callback2
++-#define callback3 CAML_DEPRECATED("callback3", "caml_callback3") caml_callback3
++-#define callbackN CAML_DEPRECATED("callbackN", "caml_callbackN") caml_callbackN
++-
++-/* **** compact.c */
++-
++-/* **** compare.c */
++-#define compare_unordered CAML_DEPRECATED("compare_unordered", "caml_compare_unordered") caml_compare_unordered
++-
++-/* **** custom.c */
++-#define alloc_custom CAML_DEPRECATED("alloc_custom", "caml_alloc_custom") caml_alloc_custom
++-#define register_custom_operations CAML_DEPRECATED("register_custom_operations", "caml_register_custom_operations") caml_register_custom_operations
++-
++-/* **** debugger.c */
++-
++-/* **** dynlink.c */
++-
++-/* **** extern.c */
++-#define output_val CAML_DEPRECATED("output_val", "caml_output_val") caml_output_val
++-#define output_value_to_malloc CAML_DEPRECATED("output_value_to_malloc", "caml_output_value_to_malloc") caml_output_value_to_malloc
++-#define output_value_to_block CAML_DEPRECATED("output_value_to_block", "caml_output_value_to_block") caml_output_value_to_block
++-#define serialize_int_1 CAML_DEPRECATED("serialize_int_1", "caml_serialize_int_1") caml_serialize_int_1
++-#define serialize_int_2 CAML_DEPRECATED("serialize_int_2", "caml_serialize_int_2") caml_serialize_int_2
++-#define serialize_int_4 CAML_DEPRECATED("serialize_int_4", "caml_serialize_int_4") caml_serialize_int_4
++-#define serialize_int_8 CAML_DEPRECATED("serialize_int_8", "caml_serialize_int_8") caml_serialize_int_8
++-#define serialize_float_4 CAML_DEPRECATED("serialize_float_4", "caml_serialize_float_4") caml_serialize_float_4
++-#define serialize_float_8 CAML_DEPRECATED("serialize_float_8", "caml_serialize_float_8") caml_serialize_float_8
++-#define serialize_block_1 CAML_DEPRECATED("serialize_block_1", "caml_serialize_block_1") caml_serialize_block_1
++-#define serialize_block_2 CAML_DEPRECATED("serialize_block_2", "caml_serialize_block_2") caml_serialize_block_2
++-#define serialize_block_4 CAML_DEPRECATED("serialize_block_4", "caml_serialize_block_4") caml_serialize_block_4
++-#define serialize_block_8 CAML_DEPRECATED("serialize_block_8", "caml_serialize_block_8") caml_serialize_block_8
++-#define serialize_block_float_8 CAML_DEPRECATED("serialize_block_float_8", "caml_serialize_block_float_8") caml_serialize_block_float_8
++-
++-/* **** fail.c */
++-#define external_raise CAML_DEPRECATED("external_raise", "caml_external_raise") caml_external_raise
++-#define mlraise CAML_DEPRECATED("mlraise", "caml_raise") caml_raise /*SP*/
++-#define raise_constant CAML_DEPRECATED("raise_constant", "caml_raise_constant") caml_raise_constant
++-#define raise_with_arg CAML_DEPRECATED("raise_with_arg", "caml_raise_with_arg") caml_raise_with_arg
++-#define raise_with_string CAML_DEPRECATED("raise_with_string", "caml_raise_with_string") caml_raise_with_string
++-#define failwith CAML_DEPRECATED("failwith", "caml_failwith") caml_failwith
++-#define invalid_argument CAML_DEPRECATED("invalid_argument", "caml_invalid_argument") caml_invalid_argument
++-#define array_bound_error CAML_DEPRECATED("array_bound_error", "caml_array_bound_error") caml_array_bound_error /*SP*/
++-#define raise_out_of_memory CAML_DEPRECATED("raise_out_of_memory", "caml_raise_out_of_memory") caml_raise_out_of_memory
++-#define raise_stack_overflow CAML_DEPRECATED("raise_stack_overflow", "caml_raise_stack_overflow") caml_raise_stack_overflow
++-#define raise_sys_error CAML_DEPRECATED("raise_sys_error", "caml_raise_sys_error") caml_raise_sys_error
++-#define raise_end_of_file CAML_DEPRECATED("raise_end_of_file", "caml_raise_end_of_file") caml_raise_end_of_file
++-#define raise_zero_divide CAML_DEPRECATED("raise_zero_divide", "caml_raise_zero_divide") caml_raise_zero_divide
++-#define raise_not_found CAML_DEPRECATED("raise_not_found", "caml_raise_not_found") caml_raise_not_found
++-#define raise_sys_blocked_io CAML_DEPRECATED("raise_sys_blocked_io", "caml_raise_sys_blocked_io") caml_raise_sys_blocked_io
++-/* **** runtime/fail_nat.c */
++-/* **** runtime/<arch>.s */
++-
++-/* **** finalise.c */
++-
++-/* **** fix_code.c */
++-
++-/* **** floats.c */
++-/*#define Double_val caml_Double_val             done in mlvalues.h as needed */
++-/*#define Store_double_val caml_Store_double_val done in mlvalues.h as needed */
++-#define copy_double CAML_DEPRECATED("copy_double", "caml_copy_double") caml_copy_double
++-
++-/* **** freelist.c */
++-
++-/* **** gc_ctrl.c */
++-
++-/* **** globroots.c */
++-#define register_global_root CAML_DEPRECATED("register_global_root", "caml_register_global_root") caml_register_global_root
++-#define remove_global_root CAML_DEPRECATED("remove_global_root", "caml_remove_global_root") caml_remove_global_root
++-
++-/* **** hash.c */
++-#define hash_variant CAML_DEPRECATED("hash_variant", "caml_hash_variant") caml_hash_variant
++-
++-/* **** instrtrace.c */
++-
++-/* **** intern.c */
++-#define input_val CAML_DEPRECATED("input_val", "caml_input_val") caml_input_val
++-#define input_val_from_string CAML_DEPRECATED("input_val_from_string", "caml_input_val_from_string") caml_input_val_from_string
++-#define input_value_from_malloc CAML_DEPRECATED("input_value_from_malloc", "caml_input_value_from_malloc") caml_input_value_from_malloc
++-#define input_value_from_block CAML_DEPRECATED("input_value_from_block", "caml_input_value_from_block") caml_input_value_from_block
++-#define deserialize_uint_1 CAML_DEPRECATED("deserialize_uint_1", "caml_deserialize_uint_1") caml_deserialize_uint_1
++-#define deserialize_sint_1 CAML_DEPRECATED("deserialize_sint_1", "caml_deserialize_sint_1") caml_deserialize_sint_1
++-#define deserialize_uint_2 CAML_DEPRECATED("deserialize_uint_2", "caml_deserialize_uint_2") caml_deserialize_uint_2
++-#define deserialize_sint_2 CAML_DEPRECATED("deserialize_sint_2", "caml_deserialize_sint_2") caml_deserialize_sint_2
++-#define deserialize_uint_4 CAML_DEPRECATED("deserialize_uint_4", "caml_deserialize_uint_4") caml_deserialize_uint_4
++-#define deserialize_sint_4 CAML_DEPRECATED("deserialize_sint_4", "caml_deserialize_sint_4") caml_deserialize_sint_4
++-#define deserialize_uint_8 CAML_DEPRECATED("deserialize_uint_8", "caml_deserialize_uint_8") caml_deserialize_uint_8
++-#define deserialize_sint_8 CAML_DEPRECATED("deserialize_sint_8", "caml_deserialize_sint_8") caml_deserialize_sint_8
++-#define deserialize_float_4 CAML_DEPRECATED("deserialize_float_4", "caml_deserialize_float_4") caml_deserialize_float_4
++-#define deserialize_float_8 CAML_DEPRECATED("deserialize_float_8", "caml_deserialize_float_8") caml_deserialize_float_8
++-#define deserialize_block_1 CAML_DEPRECATED("deserialize_block_1", "caml_deserialize_block_1") caml_deserialize_block_1
++-#define deserialize_block_2 CAML_DEPRECATED("deserialize_block_2", "caml_deserialize_block_2") caml_deserialize_block_2
++-#define deserialize_block_4 CAML_DEPRECATED("deserialize_block_4", "caml_deserialize_block_4") caml_deserialize_block_4
++-#define deserialize_block_8 CAML_DEPRECATED("deserialize_block_8", "caml_deserialize_block_8") caml_deserialize_block_8
++-#define deserialize_block_float_8 CAML_DEPRECATED("deserialize_block_float_8", "caml_deserialize_block_float_8") caml_deserialize_block_float_8
++-#define deserialize_error CAML_DEPRECATED("deserialize_error", "caml_deserialize_error") caml_deserialize_error
++-
++-/* **** interp.c */
++-
++-/* **** ints.c */
++-#define int32_ops CAML_DEPRECATED("int32_ops", "caml_int32_ops") caml_int32_ops
++-#define copy_int32 CAML_DEPRECATED("copy_int32", "caml_copy_int32") caml_copy_int32
++-/*#define Int64_val caml_Int64_val   *** done in mlvalues.h as needed */
++-#define int64_ops CAML_DEPRECATED("int64_ops", "caml_int64_ops") caml_int64_ops
++-#define copy_int64 CAML_DEPRECATED("copy_int64", "caml_copy_int64") caml_copy_int64
++-#define nativeint_ops CAML_DEPRECATED("nativeint_ops", "caml_nativeint_ops") caml_nativeint_ops
++-#define copy_nativeint CAML_DEPRECATED("copy_nativeint", "caml_copy_nativeint") caml_copy_nativeint
++-
++-/* **** io.c */
++-#define channel_mutex_free CAML_DEPRECATED("channel_mutex_free", "caml_channel_mutex_free") caml_channel_mutex_free
++-#define channel_mutex_lock CAML_DEPRECATED("channel_mutex_lock", "caml_channel_mutex_lock") caml_channel_mutex_lock
++-#define channel_mutex_unlock CAML_DEPRECATED("channel_mutex_unlock", "caml_channel_mutex_unlock") caml_channel_mutex_unlock
++-#define channel_mutex_unlock_exn CAML_DEPRECATED("channel_mutex_unlock_exn", "caml_channel_mutex_unlock_exn") caml_channel_mutex_unlock_exn
++-#define all_opened_channels CAML_DEPRECATED("all_opened_channels", "caml_all_opened_channels") caml_all_opened_channels
++-#define open_descriptor_in CAML_DEPRECATED("open_descriptor_in", "caml_open_descriptor_in") caml_open_descriptor_in /*SP*/
++-#define open_descriptor_out CAML_DEPRECATED("open_descriptor_out", "caml_open_descriptor_out") caml_open_descriptor_out /*SP*/
++-#define close_channel CAML_DEPRECATED("close_channel", "caml_close_channel") caml_close_channel /*SP*/
++-#define channel_size CAML_DEPRECATED("channel_size", "caml_channel_size") caml_channel_size /*SP*/
++-#define channel_binary_mode CAML_DEPRECATED("channel_binary_mode", "caml_channel_binary_mode") caml_channel_binary_mode
++-#define flush_partial CAML_DEPRECATED("flush_partial", "caml_flush_partial") caml_flush_partial /*SP*/
++-#define flush CAML_DEPRECATED("flush", "caml_flush") caml_flush /*SP*/
++-#define putword CAML_DEPRECATED("putword", "caml_putword") caml_putword
++-#define putblock CAML_DEPRECATED("putblock", "caml_putblock") caml_putblock
++-#define really_putblock CAML_DEPRECATED("really_putblock", "caml_really_putblock") caml_really_putblock
++-#define seek_out CAML_DEPRECATED("seek_out", "caml_seek_out") caml_seek_out /*SP*/
++-#define pos_out CAML_DEPRECATED("pos_out", "caml_pos_out") caml_pos_out /*SP*/
++-#define do_read CAML_DEPRECATED("do_read", "caml_do_read") caml_do_read
++-#define refill CAML_DEPRECATED("refill", "caml_refill") caml_refill
++-#define getword CAML_DEPRECATED("getword", "caml_getword") caml_getword
++-#define getblock CAML_DEPRECATED("getblock", "caml_getblock") caml_getblock
++-#define really_getblock CAML_DEPRECATED("really_getblock", "caml_really_getblock") caml_really_getblock
++-#define seek_in CAML_DEPRECATED("seek_in", "caml_seek_in") caml_seek_in /*SP*/
++-#define pos_in CAML_DEPRECATED("pos_in", "caml_pos_in") caml_pos_in /*SP*/
++-#define input_scan_line CAML_DEPRECATED("input_scan_line", "caml_input_scan_line") caml_input_scan_line /*SP*/
++-#define finalize_channel CAML_DEPRECATED("finalize_channel", "caml_finalize_channel") caml_finalize_channel
++-#define alloc_channel CAML_DEPRECATED("alloc_channel", "caml_alloc_channel") caml_alloc_channel
++-/*#define Val_file_offset caml_Val_file_offset   *** done in io.h as needed */
++-/*#define File_offset_val caml_File_offset_val   *** done in io.h as needed */
++-
++-/* **** lexing.c */
++-
++-/* **** main.c */
++-/* *** no change */
++-
++-/* **** major_gc.c */
++-#define heap_start CAML_DEPRECATED("heap_start", "caml_heap_start") caml_heap_start
++-#define page_table CAML_DEPRECATED("page_table", "caml_page_table") caml_page_table
++-
++-/* **** md5.c */
++-#define md5_string CAML_DEPRECATED("md5_string", "caml_md5_string") caml_md5_string
++-#define md5_chan CAML_DEPRECATED("md5_chan", "caml_md5_chan") caml_md5_chan
++-#define MD5Init CAML_DEPRECATED("MD5Init", "caml_MD5Init") caml_MD5Init
++-#define MD5Update CAML_DEPRECATED("MD5Update", "caml_MD5Update") caml_MD5Update
++-#define MD5Final CAML_DEPRECATED("MD5Final", "caml_MD5Final") caml_MD5Final
++-#define MD5Transform CAML_DEPRECATED("MD5Transform", "caml_MD5Transform") caml_MD5Transform
++-
++-/* **** memory.c */
++-#define alloc_shr CAML_DEPRECATED("alloc_shr", "caml_alloc_shr") caml_alloc_shr
++-#define initialize CAML_DEPRECATED("initialize", "caml_initialize") caml_initialize
++-#define modify CAML_DEPRECATED("modify", "caml_modify") caml_modify
++-#define stat_alloc CAML_DEPRECATED("stat_alloc", "caml_stat_alloc") caml_stat_alloc
++-#define stat_free CAML_DEPRECATED("stat_free", "caml_stat_free") caml_stat_free
++-#define stat_resize CAML_DEPRECATED("stat_resize", "caml_stat_resize") caml_stat_resize
++-
++-/* **** meta.c */
++-
++-/* **** minor_gc.c */
++-#define young_start CAML_DEPRECATED("young_start", "caml_young_start") caml_young_start
++-#define young_end CAML_DEPRECATED("young_end", "caml_young_end") caml_young_end
++-#define young_ptr CAML_DEPRECATED("young_ptr", "caml_young_ptr") caml_young_ptr
++-#define young_limit CAML_DEPRECATED("young_limit", "caml_young_limit") caml_young_limit
++-#define ref_table CAML_DEPRECATED("ref_table", "caml_ref_table") caml_ref_table
++-#define minor_collection CAML_DEPRECATED("minor_collection", "caml_minor_collection") caml_minor_collection
++-#define check_urgent_gc CAML_DEPRECATED("check_urgent_gc", "caml_check_urgent_gc") caml_check_urgent_gc
++-
++-/* **** misc.c */
++-
++-/* **** obj.c */
++-
++-/* **** parsing.c */
++-
++-/* **** prims.c */
++-
++-/* **** printexc.c */
++-#define format_caml_exception CAML_DEPRECATED("format_caml_exception", "caml_format_exception") caml_format_exception /*SP*/
++-
++-/* **** roots.c */
++-#define local_roots CAML_DEPRECATED("local_roots", "caml_local_roots") caml_local_roots
++-#define scan_roots_hook CAML_DEPRECATED("scan_roots_hook", "caml_scan_roots_hook") caml_scan_roots_hook
++-#define do_local_roots CAML_DEPRECATED("do_local_roots", "caml_do_local_roots") caml_do_local_roots
++-
++-/* **** signals.c */
++-#define pending_signals CAML_DEPRECATED("pending_signals", "caml_pending_signals") caml_pending_signals
++-#define something_to_do CAML_DEPRECATED("something_to_do", "caml_something_to_do") caml_something_to_do
++-#define enter_blocking_section_hook CAML_DEPRECATED("enter_blocking_section_hook", "caml_enter_blocking_section_hook") caml_enter_blocking_section_hook
++-#define leave_blocking_section_hook CAML_DEPRECATED("leave_blocking_section_hook", "caml_leave_blocking_section_hook") caml_leave_blocking_section_hook
++-#define enter_blocking_section CAML_DEPRECATED("enter_blocking_section", "caml_enter_blocking_section") caml_enter_blocking_section
++-#define leave_blocking_section CAML_DEPRECATED("leave_blocking_section", "caml_leave_blocking_section") caml_leave_blocking_section
++-#define convert_signal_number CAML_DEPRECATED("convert_signal_number", "caml_convert_signal_number") caml_convert_signal_number
++-
++-/* **** runtime/signals.c */
++-#define garbage_collection CAML_DEPRECATED("garbage_collection", "caml_garbage_collection") caml_garbage_collection
++-
++-/* **** stacks.c */
++-#define stack_low CAML_DEPRECATED("stack_low", "caml_stack_low") caml_stack_low
++-#define stack_high CAML_DEPRECATED("stack_high", "caml_stack_high") caml_stack_high
++-#define stack_threshold CAML_DEPRECATED("stack_threshold", "caml_stack_threshold") caml_stack_threshold
++-#define extern_sp CAML_DEPRECATED("extern_sp", "caml_extern_sp") caml_extern_sp
++-#define trapsp CAML_DEPRECATED("trapsp", "caml_trapsp") caml_trapsp
++-#define trap_barrier CAML_DEPRECATED("trap_barrier", "caml_trap_barrier") caml_trap_barrier
++-
++-/* **** startup.c */
++-#define atom_table CAML_DEPRECATED("atom_table", "caml_atom_table") caml_atom_table
++-/* **** runtime/startup_nat.c */
++-#define static_data_start CAML_DEPRECATED("static_data_start", "caml_static_data_start") caml_static_data_start
++-#define static_data_end CAML_DEPRECATED("static_data_end", "caml_static_data_end") caml_static_data_end
++-
++-/* **** str.c */
++-#define string_length CAML_DEPRECATED("string_length", "caml_string_length") caml_string_length
++-
++-/* **** sys.c */
++-#define sys_error CAML_DEPRECATED("sys_error", "caml_sys_error") caml_sys_error
++-
++-/* **** terminfo.c */
++-
++-/* **** unix.c  &  win32.c */
++-#define search_exe_in_path CAML_DEPRECATED("search_exe_in_path", "caml_search_exe_in_path") caml_search_exe_in_path
++-
++-/* **** weak.c */
++-
++-/* **** asmcomp/asmlink.ml */
++-
++-/* **** asmcomp/cmmgen.ml */
++-
++-/* **** asmcomp/asmlink.ml, asmcomp/cmmgen.ml, asmcomp/compilenv.ml */
++-
++-/* ************************************************************* */
++-
++-/* **** otherlibs/bigarray */
++-#define int8 CAML_DEPRECATED("int8", "caml_ba_int8") caml_ba_int8
++-#define uint8 CAML_DEPRECATED("uint8", "caml_ba_uint8") caml_ba_uint8
++-#define int16 CAML_DEPRECATED("int16", "caml_ba_int16") caml_ba_int16
++-#define uint16 CAML_DEPRECATED("uint16", "caml_ba_uint16") caml_ba_uint16
++-#define MAX_NUM_DIMS CAML_DEPRECATED("MAX_NUM_DIMS", "CAML_BA_MAX_NUM_DIMS") CAML_BA_MAX_NUM_DIMS
++-#define caml_bigarray_kind CAML_DEPRECATED("caml_bigarray_kind", "caml_ba_kind") caml_ba_kind
++-#define BIGARRAY_FLOAT32 CAML_DEPRECATED("BIGARRAY_FLOAT32", "CAML_BA_FLOAT32") CAML_BA_FLOAT32
++-#define BIGARRAY_FLOAT64 CAML_DEPRECATED("BIGARRAY_FLOAT64", "CAML_BA_FLOAT64") CAML_BA_FLOAT64
++-#define BIGARRAY_SINT8 CAML_DEPRECATED("BIGARRAY_SINT8", "CAML_BA_SINT8") CAML_BA_SINT8
++-#define BIGARRAY_UINT8 CAML_DEPRECATED("BIGARRAY_UINT8", "CAML_BA_UINT8") CAML_BA_UINT8
++-#define BIGARRAY_SINT16 CAML_DEPRECATED("BIGARRAY_SINT16", "CAML_BA_SINT16") CAML_BA_SINT16
++-#define BIGARRAY_UINT16 CAML_DEPRECATED("BIGARRAY_UINT16", "CAML_BA_UINT16") CAML_BA_UINT16
++-#define BIGARRAY_INT32 CAML_DEPRECATED("BIGARRAY_INT32", "CAML_BA_INT32") CAML_BA_INT32
++-#define BIGARRAY_INT64 CAML_DEPRECATED("BIGARRAY_INT64", "CAML_BA_INT64") CAML_BA_INT64
++-#define BIGARRAY_CAML_INT CAML_DEPRECATED("BIGARRAY_CAML_INT", "CAML_BA_CAML_INT") CAML_BA_CAML_INT
++-#define BIGARRAY_NATIVE_INT CAML_DEPRECATED("BIGARRAY_NATIVE_INT", "CAML_BA_NATIVE_INT") CAML_BA_NATIVE_INT
++-#define BIGARRAY_COMPLEX32 CAML_DEPRECATED("BIGARRAY_COMPLEX32", "CAML_BA_COMPLEX32") CAML_BA_COMPLEX32
++-#define BIGARRAY_COMPLEX64 CAML_DEPRECATED("BIGARRAY_COMPLEX64", "CAML_BA_COMPLEX64") CAML_BA_COMPLEX64
++-#define BIGARRAY_KIND_MASK CAML_DEPRECATED("BIGARRAY_KIND_MASK", "CAML_BA_KIND_MASK") CAML_BA_KIND_MASK
++-#define caml_bigarray_layout CAML_DEPRECATED("caml_bigarray_layout", "caml_ba_layout") caml_ba_layout
++-#define BIGARRAY_C_LAYOUT CAML_DEPRECATED("BIGARRAY_C_LAYOUT", "CAML_BA_C_LAYOUT") CAML_BA_C_LAYOUT
++-#define BIGARRAY_FORTRAN_LAYOUT CAML_DEPRECATED("BIGARRAY_FORTRAN_LAYOUT", "CAML_BA_FORTRAN_LAYOUT") CAML_BA_FORTRAN_LAYOUT
++-#define BIGARRAY_LAYOUT_MASK CAML_DEPRECATED("BIGARRAY_LAYOUT_MASK", "CAML_BA_LAYOUT_MASK") CAML_BA_LAYOUT_MASK
++-#define caml_bigarray_managed CAML_DEPRECATED("caml_bigarray_managed", "caml_ba_managed") caml_ba_managed
++-#define BIGARRAY_EXTERNAL CAML_DEPRECATED("BIGARRAY_EXTERNAL", "CAML_BA_EXTERNAL") CAML_BA_EXTERNAL
++-#define BIGARRAY_MANAGED CAML_DEPRECATED("BIGARRAY_MANAGED", "CAML_BA_MANAGED") CAML_BA_MANAGED
++-#define BIGARRAY_MAPPED_FILE CAML_DEPRECATED("BIGARRAY_MAPPED_FILE", "CAML_BA_MAPPED_FILE") CAML_BA_MAPPED_FILE
++-#define BIGARRAY_MANAGED_MASK CAML_DEPRECATED("BIGARRAY_MANAGED_MASK", "CAML_BA_MANAGED_MASK") CAML_BA_MANAGED_MASK
++-#define caml_bigarray_proxy CAML_DEPRECATED("caml_bigarray_proxy", "caml_ba_proxy") caml_ba_proxy
++-#define caml_bigarray CAML_DEPRECATED("caml_bigarray", "caml_ba_array") caml_ba_array
++-#define Bigarray_val CAML_DEPRECATED("Bigarray_val", "Caml_ba_array_val") Caml_ba_array_val
++-#define Data_bigarray_val CAML_DEPRECATED("Data_bigarray_val", "Caml_ba_data_val") Caml_ba_data_val
++-#define alloc_bigarray CAML_DEPRECATED("alloc_bigarray", "caml_ba_alloc") caml_ba_alloc
++-#define alloc_bigarray_dims CAML_DEPRECATED("alloc_bigarray_dims", "caml_ba_alloc_dims") caml_ba_alloc_dims
++-#define bigarray_map_file CAML_DEPRECATED("bigarray_map_file", "caml_ba_map_file") caml_ba_map_file
++-#define bigarray_unmap_file CAML_DEPRECATED("bigarray_unmap_file", "caml_ba_unmap_file") caml_ba_unmap_file
++-#define bigarray_element_size CAML_DEPRECATED("bigarray_element_size", "caml_ba_element_size") caml_ba_element_size
++-#define bigarray_byte_size CAML_DEPRECATED("bigarray_byte_size", "caml_ba_byte_size") caml_ba_byte_size
++-#define bigarray_deserialize CAML_DEPRECATED("bigarray_deserialize", "caml_ba_deserialize") caml_ba_deserialize
++-#define MAX_BIGARRAY_MEMORY CAML_DEPRECATED("MAX_BIGARRAY_MEMORY", "CAML_BA_MAX_MEMORY") CAML_BA_MAX_MEMORY
++-#define bigarray_create CAML_DEPRECATED("bigarray_create", "caml_ba_create") caml_ba_create
++-#define bigarray_get_N CAML_DEPRECATED("bigarray_get_N", "caml_ba_get_N") caml_ba_get_N
++-#define bigarray_get_1 CAML_DEPRECATED("bigarray_get_1", "caml_ba_get_1") caml_ba_get_1
++-#define bigarray_get_2 CAML_DEPRECATED("bigarray_get_2", "caml_ba_get_2") caml_ba_get_2
++-#define bigarray_get_3 CAML_DEPRECATED("bigarray_get_3", "caml_ba_get_3") caml_ba_get_3
++-#define bigarray_get_generic CAML_DEPRECATED("bigarray_get_generic", "caml_ba_get_generic") caml_ba_get_generic
++-#define bigarray_set_1 CAML_DEPRECATED("bigarray_set_1", "caml_ba_set_1") caml_ba_set_1
++-#define bigarray_set_2 CAML_DEPRECATED("bigarray_set_2", "caml_ba_set_2") caml_ba_set_2
++-#define bigarray_set_3 CAML_DEPRECATED("bigarray_set_3", "caml_ba_set_3") caml_ba_set_3
++-#define bigarray_set_N CAML_DEPRECATED("bigarray_set_N", "caml_ba_set_N") caml_ba_set_N
++-#define bigarray_set_generic CAML_DEPRECATED("bigarray_set_generic", "caml_ba_set_generic") caml_ba_set_generic
++-#define bigarray_num_dims CAML_DEPRECATED("bigarray_num_dims", "caml_ba_num_dims") caml_ba_num_dims
++-#define bigarray_dim CAML_DEPRECATED("bigarray_dim", "caml_ba_dim") caml_ba_dim
++-#define bigarray_kind CAML_DEPRECATED("bigarray_kind", "caml_ba_kind") caml_ba_kind
++-#define bigarray_layout CAML_DEPRECATED("bigarray_layout", "caml_ba_layout") caml_ba_layout
++-#define bigarray_slice CAML_DEPRECATED("bigarray_slice", "caml_ba_slice") caml_ba_slice
++-#define bigarray_sub CAML_DEPRECATED("bigarray_sub", "caml_ba_sub") caml_ba_sub
++-#define bigarray_blit CAML_DEPRECATED("bigarray_blit", "caml_ba_blit") caml_ba_blit
++-#define bigarray_fill CAML_DEPRECATED("bigarray_fill", "caml_ba_fill") caml_ba_fill
++-#define bigarray_reshape CAML_DEPRECATED("bigarray_reshape", "caml_ba_reshape") caml_ba_reshape
++-#define bigarray_init CAML_DEPRECATED("bigarray_init", "caml_ba_init") caml_ba_init
++-
++-#endif /* CAML_NAME_SPACE */
++-#endif /* CAML_COMPATIBILITY_H */
++diff --git a/runtime/caml/config.h b/runtime/caml/config.h
++index 471a6bc6f4..70eef5c61d 100644
++--- a/runtime/caml/config.h
+++++ b/runtime/caml/config.h
++@@ -41,10 +41,6 @@
++ 
++ #include "s.h"
++ 
++-#ifndef CAML_NAME_SPACE
++-#include "compatibility.h"
++-#endif
++-
++ #ifndef CAML_CONFIG_H_NO_TYPEDEFS
++ 
++ #include <stddef.h>
++diff --git a/runtime/caml/custom.h b/runtime/caml/custom.h
++index 420121f43e..231019aef7 100644
++--- a/runtime/caml/custom.h
+++++ b/runtime/caml/custom.h
++@@ -17,9 +17,6 @@
++ #define CAML_CUSTOM_H
++ 
++ 
++-#ifndef CAML_NAME_SPACE
++-#include "compatibility.h"
++-#endif
++ #include "mlvalues.h"
++ 
++ struct custom_fixed_length {
++diff --git a/runtime/caml/domain_state.h b/runtime/caml/domain_state.h
++index 84e677d041..911895a3aa 100644
++--- a/runtime/caml/domain_state.h
+++++ b/runtime/caml/domain_state.h
++@@ -29,11 +29,7 @@ typedef value extra_params_area[NUM_EXTRA_PARAMS];
++  * via native code, which is why the indices are important */
++ 
++ typedef struct {
++-#ifdef CAML_NAME_SPACE
++ #define DOMAIN_STATE(type, name) CAMLalign(8) type name;
++-#else
++-#define DOMAIN_STATE(type, name) CAMLalign(8) type _##name;
++-#endif
++ #include "domain_state.tbl"
++ #undef DOMAIN_STATE
++ } caml_domain_state;
++@@ -45,11 +41,7 @@ enum {
++ #undef DOMAIN_STATE
++ };
++ 
++-#ifdef CAML_NAME_SPACE
++ #define LAST_DOMAIN_STATE_MEMBER extra_params
++-#else
++-#define LAST_DOMAIN_STATE_MEMBER _extra_params
++-#endif
++ 
++ /* Check that the structure was laid out without padding,
++    since the runtime assumes this in computing offsets */
++@@ -58,10 +50,6 @@ CAML_STATIC_ASSERT(
++     (Domain_state_num_fields - 1) * 8);
++ 
++ CAMLextern caml_domain_state* Caml_state;
++-#ifdef CAML_NAME_SPACE
++ #define Caml_state_field(field) Caml_state->field
++-#else
++-#define Caml_state_field(field) Caml_state->_##field
++-#endif
++ 
++ #endif /* CAML_STATE_H */
++diff --git a/runtime/caml/fail.h b/runtime/caml/fail.h
++index 822c603260..887ef9c227 100644
++--- a/runtime/caml/fail.h
+++++ b/runtime/caml/fail.h
++@@ -20,9 +20,6 @@
++ #include <setjmp.h>
++ #endif /* CAML_INTERNALS */
++ 
++-#ifndef CAML_NAME_SPACE
++-#include "compatibility.h"
++-#endif
++ #include "misc.h"
++ #include "mlvalues.h"
++ 
++diff --git a/runtime/caml/intext.h b/runtime/caml/intext.h
++index a2a3fb8248..b68030aad8 100644
++--- a/runtime/caml/intext.h
+++++ b/runtime/caml/intext.h
++@@ -18,9 +18,6 @@
++ #ifndef CAML_INTEXT_H
++ #define CAML_INTEXT_H
++ 
++-#ifndef CAML_NAME_SPACE
++-#include "compatibility.h"
++-#endif
++ #include "misc.h"
++ #include "mlvalues.h"
++ 
++diff --git a/runtime/caml/memory.h b/runtime/caml/memory.h
++index 1e9cdf6d9b..8837d33d25 100644
++--- a/runtime/caml/memory.h
+++++ b/runtime/caml/memory.h
++@@ -18,9 +18,6 @@
++ #ifndef CAML_MEMORY_H
++ #define CAML_MEMORY_H
++ 
++-#ifndef CAML_NAME_SPACE
++-#include "compatibility.h"
++-#endif
++ #include "config.h"
++ #ifdef CAML_INTERNALS
++ #include "gc.h"
++diff --git a/runtime/caml/misc.h b/runtime/caml/misc.h
++index 5915c30a7b..46bc21511b 100644
++--- a/runtime/caml/misc.h
+++++ b/runtime/caml/misc.h
++@@ -18,9 +18,6 @@
++ #ifndef CAML_MISC_H
++ #define CAML_MISC_H
++ 
++-#ifndef CAML_NAME_SPACE
++-#include "compatibility.h"
++-#endif
++ #include "config.h"
++ 
++ /* Standard definitions */
++diff --git a/runtime/caml/mlvalues.h b/runtime/caml/mlvalues.h
++index 677e44e183..9173ab8c2b 100644
++--- a/runtime/caml/mlvalues.h
+++++ b/runtime/caml/mlvalues.h
++@@ -16,9 +16,6 @@
++ #ifndef CAML_MLVALUES_H
++ #define CAML_MLVALUES_H
++ 
++-#ifndef CAML_NAME_SPACE
++-#include "compatibility.h"
++-#endif
++ #include "config.h"
++ #include "misc.h"
++ 
++diff --git a/runtime/caml/signals.h b/runtime/caml/signals.h
++index c6aeebfc78..3a3b86911c 100644
++--- a/runtime/caml/signals.h
+++++ b/runtime/caml/signals.h
++@@ -20,9 +20,6 @@
++ #include<signal.h>
++ #endif
++ 
++-#ifndef CAML_NAME_SPACE
++-#include "compatibility.h"
++-#endif
++ #include "misc.h"
++ #include "mlvalues.h"
++ 
+diff --git a/diff-against-trunk-support.diff b/diff-against-trunk-support.diff
+new file mode 100644
+index 0000000000..b639107fc5
+--- /dev/null
++++ b/diff-against-trunk-support.diff
+@@ -0,0 +1,2526 @@
++diff --git a/testsuite/tests/asmcomp/polling.c b/testsuite/tests/asmcomp/polling.c
++index 93620c9bcc..4f6bf1dcab 100644
++--- a/testsuite/tests/asmcomp/polling.c
+++++ b/testsuite/tests/asmcomp/polling.c
++@@ -12,7 +12,11 @@ CAMLprim value request_minor_gc(value v) {
++     tests are only run in a single domain, so we're probably
++     good.
++   */
+++#if 0
++   Caml_state->young_limit = (uintnat)Caml_state->young_end;
+++#endif
+++  caml_something_to_do = 1;
+++  Caml_state->young_limit = Caml_state->young_alloc_end;
++ 
++   return Val_unit;
++ }
++diff --git a/testsuite/tests/backtrace/backtrace2.reference b/testsuite/tests/backtrace/backtrace2.reference
++index 20ef708fe0..e75c2e2982 100644
++--- a/testsuite/tests/backtrace/backtrace2.reference
+++++ b/testsuite/tests/backtrace/backtrace2.reference
++@@ -35,7 +35,7 @@ Uncaught exception Invalid_argument("index out of bounds")
++ Raised by primitive operation at Backtrace2.run in file "backtrace2.ml", line 62, characters 14-22
++ test_Not_found
++ Uncaught exception Not_found
++-Raised at Stdlib__Hashtbl.find in file "hashtbl.ml", line 541, characters 13-28
+++Raised at Stdlib__Hashtbl.find in file "hashtbl.ml", line 549, characters 13-28
++ Called from Backtrace2.test_Not_found in file "backtrace2.ml", line 43, characters 9-42
++ Re-raised at Backtrace2.test_Not_found in file "backtrace2.ml", line 43, characters 61-70
++ Called from Backtrace2.run in file "backtrace2.ml", line 62, characters 11-23
++@@ -46,13 +46,13 @@ Called from Backtrace2.test_lazy.aux in file "backtrace2.ml", line 47, character
++ Called from Backtrace2.test_lazy.aux in file "backtrace2.ml", line 47, characters 43-52
++ Called from Backtrace2.test_lazy.aux in file "backtrace2.ml", line 47, characters 43-52
++ Called from Backtrace2.test_lazy.aux in file "backtrace2.ml", line 47, characters 43-52
++-Called from CamlinternalLazy.do_force_block in file "camlinternalLazy.ml", line 49, characters 17-27
++-Re-raised at CamlinternalLazy.do_force_block in file "camlinternalLazy.ml", line 56, characters 4-11
+++Called from CamlinternalLazy.force_lazy_block in file "camlinternalLazy.ml", line 110, characters 17-27
+++Re-raised at CamlinternalLazy.force_lazy_block in file "camlinternalLazy.ml", line 115, characters 4-11
++ Called from Backtrace2.run in file "backtrace2.ml", line 62, characters 11-23
++ Uncaught exception Not_found
++-Raised at Stdlib__Hashtbl.find in file "hashtbl.ml", line 541, characters 13-28
+++Raised at Stdlib__Hashtbl.find in file "hashtbl.ml", line 549, characters 13-28
++ Called from Backtrace2.test_lazy.exception_raised_internally in file "backtrace2.ml", line 50, characters 8-41
++-Re-raised at CamlinternalLazy.do_force_block.(fun) in file "camlinternalLazy.ml", line 54, characters 43-50
++-Called from CamlinternalLazy.do_force_block in file "camlinternalLazy.ml", line 49, characters 17-27
++-Re-raised at CamlinternalLazy.do_force_block in file "camlinternalLazy.ml", line 56, characters 4-11
+++Re-raised at CamlinternalLazy.force_lazy_block.(fun) in file "camlinternalLazy.ml", line 114, characters 56-63
+++Called from CamlinternalLazy.force_lazy_block in file "camlinternalLazy.ml", line 110, characters 17-27
+++Re-raised at CamlinternalLazy.force_lazy_block in file "camlinternalLazy.ml", line 115, characters 4-11
++ Called from Backtrace2.run in file "backtrace2.ml", line 62, characters 11-23
++diff --git a/testsuite/tests/backtrace/backtrace_c_exn.ml b/testsuite/tests/backtrace/backtrace_c_exn.ml
++index 9b0077d509..1680c23f7b 100644
++--- a/testsuite/tests/backtrace/backtrace_c_exn.ml
+++++ b/testsuite/tests/backtrace/backtrace_c_exn.ml
++@@ -2,6 +2,8 @@
++    modules = "backtrace_c_exn_.c"
++    flags = "-g"
++    ocamlrunparam += ",b=1"
+++   * skip
+++   reason = "OCaml 5 only"
++ *)
++ 
++ (* https://github.com/ocaml-multicore/ocaml-multicore/issues/498 *)
++diff --git a/testsuite/tests/backtrace/backtrace_dynlink.reference b/testsuite/tests/backtrace/backtrace_dynlink.reference
++index 12390de624..5ee294030f 100644
++--- a/testsuite/tests/backtrace/backtrace_dynlink.reference
+++++ b/testsuite/tests/backtrace/backtrace_dynlink.reference
++@@ -1,18 +1,22 @@
++ Raised by primitive operation at Backtrace_dynlink_plugin in file "backtrace_dynlink_plugin.ml", line 6, characters 13-38
++ Called from Dynlink.Native.run.(fun) in file "otherlibs/dynlink/native/dynlink.ml", line 85, characters 12-29
++ Called from Stdlib__List.iter in file "list.ml", line 110, characters 12-15
++-Called from Dynlink_common.Make.load.(fun) in file "otherlibs/dynlink/dynlink_common.ml", line 350, characters 13-44
+++Called from Dynlink_common.Make.load.(fun) in file "otherlibs/dynlink/dynlink_common.ml", line 352, characters 13-44
++ Called from Stdlib__List.iter in file "list.ml", line 110, characters 12-15
++-Called from Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 348, characters 8-240
++-Called from Dynlink_common.Make.loadfile in file "otherlibs/dynlink/dynlink_common.ml" (inlined), line 360, characters 26-45
+++Called from Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 350, characters 8-240
+++Called from Dynlink_common.Make.loadfile in file "otherlibs/dynlink/dynlink_common.ml" (inlined), line 362, characters 26-45
++ Called from Backtrace_dynlink in file "backtrace_dynlink.ml", line 35, characters 4-52
++ execution of module initializers in the shared library failed: Failure("SUCCESS")
++-Raised by primitive operation at Dynlink.Native.run.(fun) in file "otherlibs/dynlink/native/dynlink.ml", line 85, characters 12-29
+++Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
+++Called from Backtrace_dynlink_plugin in file "backtrace_dynlink_plugin.ml", line 3, characters 4-22
+++Re-raised at Backtrace_dynlink_plugin in file "backtrace_dynlink_plugin.ml", line 8, characters 5-12
+++Called from Dynlink.Native.run.(fun) in file "otherlibs/dynlink/native/dynlink.ml", line 85, characters 12-29
+++Called from Dynlink.Native.run.(fun) in file "otherlibs/dynlink/native/dynlink.ml", line 85, characters 12-29
++ Re-raised at Dynlink.Native.run.(fun) in file "otherlibs/dynlink/native/dynlink.ml", line 87, characters 10-149
++ Called from Stdlib__List.iter in file "list.ml", line 110, characters 12-15
++-Called from Dynlink_common.Make.load.(fun) in file "otherlibs/dynlink/dynlink_common.ml", line 350, characters 13-44
+++Called from Dynlink_common.Make.load.(fun) in file "otherlibs/dynlink/dynlink_common.ml", line 352, characters 13-44
++ Called from Stdlib__List.iter in file "list.ml", line 110, characters 12-15
++-Called from Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 348, characters 8-240
++-Re-raised at Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 358, characters 8-17
++-Called from Dynlink_common.Make.loadfile in file "otherlibs/dynlink/dynlink_common.ml" (inlined), line 360, characters 26-45
+++Called from Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 350, characters 8-240
+++Re-raised at Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 360, characters 8-17
+++Called from Dynlink_common.Make.loadfile in file "otherlibs/dynlink/dynlink_common.ml" (inlined), line 362, characters 26-45
++ Called from Backtrace_dynlink in file "backtrace_dynlink.ml", line 35, characters 4-52
++diff --git a/testsuite/tests/backtrace/backtrace_effects.ml b/testsuite/tests/backtrace/backtrace_effects.ml
++index 68ffcd420c..d616d54eb9 100644
++--- a/testsuite/tests/backtrace/backtrace_effects.ml
+++++ b/testsuite/tests/backtrace/backtrace_effects.ml
++@@ -2,6 +2,8 @@
++    flags = "-g"
++    ocamlrunparam += ",b=1"
++    exit_status = "2"
+++   * skip
+++   reason = "OCaml 5 only"
++ *)
++ 
++ open EffectHandlers
++diff --git a/testsuite/tests/backtrace/backtrace_effects_nested.ml b/testsuite/tests/backtrace/backtrace_effects_nested.ml
++index c5e41cfd0a..a536c944e9 100644
++--- a/testsuite/tests/backtrace/backtrace_effects_nested.ml
+++++ b/testsuite/tests/backtrace/backtrace_effects_nested.ml
++@@ -1,5 +1,7 @@
++ (* TEST
++    flags = "-g"
+++   * skip
+++   reason = "OCaml 5 only"
++ *)
++ 
++ open EffectHandlers
++diff --git a/testsuite/tests/backtrace/backtrace_systhreads.reference b/testsuite/tests/backtrace/backtrace_systhreads.reference
++index c1b45f1b63..b6e95802e6 100644
++--- a/testsuite/tests/backtrace/backtrace_systhreads.reference
+++++ b/testsuite/tests/backtrace/backtrace_systhreads.reference
++@@ -2,24 +2,24 @@ Thread 2 killed on uncaught exception Failure("0")
++ Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
++ Called from Backtrace_systhreads.thread_func in file "backtrace_systhreads.ml", line 14, characters 6-37
++ Re-raised at Backtrace_systhreads.thread_func in file "backtrace_systhreads.ml", line 18, characters 5-14
++-Called from Thread.create.(fun) in file "thread.ml", line 49, characters 8-14
+++Called from Thread.create.(fun) in file "thread.ml", line 51, characters 8-14
++ Thread 3 killed on uncaught exception Failure("1")
++ Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
++ Called from Backtrace_systhreads.thread_func in file "backtrace_systhreads.ml", line 14, characters 6-37
++ Re-raised at Backtrace_systhreads.thread_func in file "backtrace_systhreads.ml", line 18, characters 5-14
++-Called from Thread.create.(fun) in file "thread.ml", line 49, characters 8-14
+++Called from Thread.create.(fun) in file "thread.ml", line 51, characters 8-14
++ Thread 4 killed on uncaught exception Failure("2")
++ Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
++ Called from Backtrace_systhreads.thread_func in file "backtrace_systhreads.ml", line 14, characters 6-37
++ Re-raised at Backtrace_systhreads.thread_func in file "backtrace_systhreads.ml", line 18, characters 5-14
++-Called from Thread.create.(fun) in file "thread.ml", line 49, characters 8-14
+++Called from Thread.create.(fun) in file "thread.ml", line 51, characters 8-14
++ Thread 5 killed on uncaught exception Failure("3")
++ Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
++ Called from Backtrace_systhreads.thread_func in file "backtrace_systhreads.ml", line 14, characters 6-37
++ Re-raised at Backtrace_systhreads.thread_func in file "backtrace_systhreads.ml", line 18, characters 5-14
++-Called from Thread.create.(fun) in file "thread.ml", line 49, characters 8-14
+++Called from Thread.create.(fun) in file "thread.ml", line 51, characters 8-14
++ Thread 1 killed on uncaught exception Failure("backtrace")
++ Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
++ Called from Backtrace_systhreads.thread_backtrace in file "backtrace_systhreads.ml", line 22, characters 6-27
++ Re-raised at Backtrace_systhreads.thread_backtrace in file "backtrace_systhreads.ml", line 26, characters 5-14
++-Called from Thread.create.(fun) in file "thread.ml", line 49, characters 8-14
+++Called from Thread.create.(fun) in file "thread.ml", line 51, characters 8-14
++diff --git a/testsuite/tests/backtrace/callstack.reference b/testsuite/tests/backtrace/callstack.reference
++index 2243abe4fd..c83ca05156 100644
++--- a/testsuite/tests/backtrace/callstack.reference
+++++ b/testsuite/tests/backtrace/callstack.reference
++@@ -12,4 +12,4 @@ Raised by primitive operation at Callstack.f0 in file "callstack.ml", line 11, c
++ Called from Callstack.f1 in file "callstack.ml", line 12, characters 27-32
++ Called from Callstack.f2 in file "callstack.ml", line 13, characters 27-32
++ Called from Callstack.f3 in file "callstack.ml", line 14, characters 27-32
++-Called from Thread.create.(fun) in file "thread.ml", line 49, characters 8-14
+++Called from Thread.create.(fun) in file "thread.ml", line 51, characters 8-14
++diff --git a/testsuite/tests/backtrace/lazy.reference b/testsuite/tests/backtrace/lazy.reference
++index 5e8f53482f..72b9ef2117 100644
++--- a/testsuite/tests/backtrace/lazy.reference
+++++ b/testsuite/tests/backtrace/lazy.reference
++@@ -1,14 +1,12 @@
++ Uncaught exception Not_found
++ Raised at Lazy.l1 in file "lazy.ml", line 7, characters 28-45
++-Called from CamlinternalLazy.do_force_block in file "camlinternalLazy.ml", line 49, characters 17-27
++-Re-raised at CamlinternalLazy.do_force_block in file "camlinternalLazy.ml", line 56, characters 4-11
++-Called from CamlinternalLazy.force_lazy_block in file "camlinternalLazy.ml" (inlined), line 78, characters 27-67
+++Called from CamlinternalLazy.force_lazy_block in file "camlinternalLazy.ml", line 110, characters 17-27
+++Re-raised at CamlinternalLazy.force_lazy_block in file "camlinternalLazy.ml", line 115, characters 4-11
++ Called from Lazy.test1 in file "lazy.ml", line 10, characters 11-24
++ Called from Lazy.run in file "lazy.ml", line 19, characters 4-11
++ Uncaught exception Not_found
++ Raised at Lazy.l2 in file "lazy.ml", line 12, characters 28-45
++-Called from CamlinternalLazy.do_force_block in file "camlinternalLazy.ml", line 49, characters 17-27
++-Re-raised at CamlinternalLazy.do_force_block in file "camlinternalLazy.ml", line 56, characters 4-11
++-Called from CamlinternalLazy.force_lazy_block in file "camlinternalLazy.ml" (inlined), line 78, characters 27-67
+++Called from CamlinternalLazy.force_lazy_block in file "camlinternalLazy.ml", line 110, characters 17-27
+++Re-raised at CamlinternalLazy.force_lazy_block in file "camlinternalLazy.ml", line 115, characters 4-11
++ Called from Lazy.test2 in file "lazy.ml", line 15, characters 6-15
++ Called from Lazy.run in file "lazy.ml", line 19, characters 4-11
++diff --git a/testsuite/tests/basic/patmatch_for_multiple.ml b/testsuite/tests/basic/patmatch_for_multiple.ml
++index 7b45d08c19..6433f3d9a4 100644
++--- a/testsuite/tests/basic/patmatch_for_multiple.ml
+++++ b/testsuite/tests/basic/patmatch_for_multiple.ml
++@@ -26,15 +26,15 @@ match (3, 2, 1) with
++ | _ -> false
++ ;;
++ [%%expect{|
++-(let (*match*/279 = 3 *match*/280 = 2 *match*/281 = 1)
+++(let (*match*/274 = 3 *match*/275 = 2 *match*/276 = 1)
++   (catch
++     (catch
++-      (catch (if (!= *match*/280 3) (exit 3) (exit 1)) with (3)
++-        (if (!= *match*/279 1) (exit 2) (exit 1)))
+++      (catch (if (!= *match*/275 3) (exit 3) (exit 1)) with (3)
+++        (if (!= *match*/274 1) (exit 2) (exit 1)))
++      with (2) 0)
++    with (1) 1))
++-(let (*match*/279 = 3 *match*/280 = 2 *match*/281 = 1)
++-  (catch (if (!= *match*/280 3) (if (!= *match*/279 1) 0 (exit 1)) (exit 1))
+++(let (*match*/274 = 3 *match*/275 = 2 *match*/276 = 1)
+++  (catch (if (!= *match*/275 3) (if (!= *match*/274 1) 0 (exit 1)) (exit 1))
++    with (1) 1))
++ - : bool = false
++ |}];;
++@@ -47,26 +47,26 @@ match (3, 2, 1) with
++ | _ -> false
++ ;;
++ [%%expect{|
++-(let (*match*/284 = 3 *match*/285 = 2 *match*/286 = 1)
+++(let (*match*/279 = 3 *match*/280 = 2 *match*/281 = 1)
++   (catch
++     (catch
++       (catch
++-        (if (!= *match*/285 3) (exit 6)
++-          (let (x/288 =a (makeblock 0 *match*/284 *match*/285 *match*/286))
++-            (exit 4 x/288)))
+++        (if (!= *match*/280 3) (exit 6)
+++          (let (x/283 =a (makeblock 0 *match*/279 *match*/280 *match*/281))
+++            (exit 4 x/283)))
++        with (6)
++-        (if (!= *match*/284 1) (exit 5)
++-          (let (x/287 =a (makeblock 0 *match*/284 *match*/285 *match*/286))
++-            (exit 4 x/287))))
+++        (if (!= *match*/279 1) (exit 5)
+++          (let (x/282 =a (makeblock 0 *match*/279 *match*/280 *match*/281))
+++            (exit 4 x/282))))
++      with (5) 0)
++-   with (4 x/282) (seq (ignore x/282) 1)))
++-(let (*match*/284 = 3 *match*/285 = 2 *match*/286 = 1)
+++   with (4 x/277) (seq (ignore x/277) 1)))
+++(let (*match*/279 = 3 *match*/280 = 2 *match*/281 = 1)
++   (catch
++-    (if (!= *match*/285 3)
++-      (if (!= *match*/284 1) 0
++-        (exit 4 (makeblock 0 *match*/284 *match*/285 *match*/286)))
++-      (exit 4 (makeblock 0 *match*/284 *match*/285 *match*/286)))
++-   with (4 x/282) (seq (ignore x/282) 1)))
+++    (if (!= *match*/280 3)
+++      (if (!= *match*/279 1) 0
+++        (exit 4 (makeblock 0 *match*/279 *match*/280 *match*/281)))
+++      (exit 4 (makeblock 0 *match*/279 *match*/280 *match*/281)))
+++   with (4 x/277) (seq (ignore x/277) 1)))
++ - : bool = false
++ |}];;
++ 
++@@ -76,8 +76,8 @@ let _ = fun a b ->
++   | ((true, _) as _g)
++   | ((false, _) as _g) -> ()
++ [%%expect{|
++-(function a/289[int] b/290 : int 0)
++-(function a/289[int] b/290 : int 0)
+++(function a/284[int] b/285 : int 0)
+++(function a/284[int] b/285 : int 0)
++ - : bool -> 'a -> unit = <fun>
++ |}];;
++ 
++@@ -96,8 +96,8 @@ let _ = fun a b -> match a, b with
++ | (false, _) as p -> p
++ (* outside, trivial *)
++ [%%expect {|
++-(function a/293[int] b/294 (let (p/295 =a (makeblock 0 a/293 b/294)) p/295))
++-(function a/293[int] b/294 (makeblock 0 a/293 b/294))
+++(function a/288[int] b/289 (let (p/290 =a (makeblock 0 a/288 b/289)) p/290))
+++(function a/288[int] b/289 (makeblock 0 a/288 b/289))
++ - : bool -> 'a -> bool * 'a = <fun>
++ |}]
++ 
++@@ -106,8 +106,8 @@ let _ = fun a b -> match a, b with
++ | ((false, _) as p) -> p
++ (* inside, trivial *)
++ [%%expect{|
++-(function a/297[int] b/298 (let (p/299 =a (makeblock 0 a/297 b/298)) p/299))
++-(function a/297[int] b/298 (makeblock 0 a/297 b/298))
+++(function a/292[int] b/293 (let (p/294 =a (makeblock 0 a/292 b/293)) p/294))
+++(function a/292[int] b/293 (makeblock 0 a/292 b/293))
++ - : bool -> 'a -> bool * 'a = <fun>
++ |}];;
++ 
++@@ -116,11 +116,11 @@ let _ = fun a b -> match a, b with
++ | (false as x, _) as p -> x, p
++ (* outside, simple *)
++ [%%expect {|
++-(function a/303[int] b/304
++-  (let (x/305 =a[int] a/303 p/306 =a (makeblock 0 a/303 b/304))
++-    (makeblock 0 (int,*) x/305 p/306)))
++-(function a/303[int] b/304
++-  (makeblock 0 (int,*) a/303 (makeblock 0 a/303 b/304)))
+++(function a/298[int] b/299
+++  (let (x/300 =a[int] a/298 p/301 =a (makeblock 0 a/298 b/299))
+++    (makeblock 0 (int,*) x/300 p/301)))
+++(function a/298[int] b/299
+++  (makeblock 0 (int,*) a/298 (makeblock 0 a/298 b/299)))
++ - : bool -> 'a -> bool * (bool * 'a) = <fun>
++ |}]
++ 
++@@ -129,11 +129,11 @@ let _ = fun a b -> match a, b with
++ | ((false as x, _) as p) -> x, p
++ (* inside, simple *)
++ [%%expect {|
++-(function a/309[int] b/310
++-  (let (x/311 =a[int] a/309 p/312 =a (makeblock 0 a/309 b/310))
++-    (makeblock 0 (int,*) x/311 p/312)))
++-(function a/309[int] b/310
++-  (makeblock 0 (int,*) a/309 (makeblock 0 a/309 b/310)))
+++(function a/304[int] b/305
+++  (let (x/306 =a[int] a/304 p/307 =a (makeblock 0 a/304 b/305))
+++    (makeblock 0 (int,*) x/306 p/307)))
+++(function a/304[int] b/305
+++  (makeblock 0 (int,*) a/304 (makeblock 0 a/304 b/305)))
++ - : bool -> 'a -> bool * (bool * 'a) = <fun>
++ |}]
++ 
++@@ -142,15 +142,15 @@ let _ = fun a b -> match a, b with
++ | (false, x) as p -> x, p
++ (* outside, complex *)
++ [%%expect{|
++-(function a/319[int] b/320[int]
++-  (if a/319
++-    (let (x/321 =a[int] a/319 p/322 =a (makeblock 0 a/319 b/320))
++-      (makeblock 0 (int,*) x/321 p/322))
++-    (let (x/323 =a b/320 p/324 =a (makeblock 0 a/319 b/320))
++-      (makeblock 0 (int,*) x/323 p/324))))
++-(function a/319[int] b/320[int]
++-  (if a/319 (makeblock 0 (int,*) a/319 (makeblock 0 a/319 b/320))
++-    (makeblock 0 (int,*) b/320 (makeblock 0 a/319 b/320))))
+++(function a/314[int] b/315[int]
+++  (if a/314
+++    (let (x/316 =a[int] a/314 p/317 =a (makeblock 0 a/314 b/315))
+++      (makeblock 0 (int,*) x/316 p/317))
+++    (let (x/318 =a b/315 p/319 =a (makeblock 0 a/314 b/315))
+++      (makeblock 0 (int,*) x/318 p/319))))
+++(function a/314[int] b/315[int]
+++  (if a/314 (makeblock 0 (int,*) a/314 (makeblock 0 a/314 b/315))
+++    (makeblock 0 (int,*) b/315 (makeblock 0 a/314 b/315))))
++ - : bool -> bool -> bool * (bool * bool) = <fun>
++ |}]
++ 
++@@ -160,19 +160,19 @@ let _ = fun a b -> match a, b with
++   -> x, p
++ (* inside, complex *)
++ [%%expect{|
++-(function a/325[int] b/326[int]
+++(function a/320[int] b/321[int]
++   (catch
++-    (if a/325
++-      (let (x/333 =a[int] a/325 p/334 =a (makeblock 0 a/325 b/326))
++-        (exit 10 x/333 p/334))
++-      (let (x/331 =a b/326 p/332 =a (makeblock 0 a/325 b/326))
++-        (exit 10 x/331 p/332)))
++-   with (10 x/327[int] p/328) (makeblock 0 (int,*) x/327 p/328)))
++-(function a/325[int] b/326[int]
+++    (if a/320
+++      (let (x/328 =a[int] a/320 p/329 =a (makeblock 0 a/320 b/321))
+++        (exit 10 x/328 p/329))
+++      (let (x/326 =a b/321 p/327 =a (makeblock 0 a/320 b/321))
+++        (exit 10 x/326 p/327)))
+++   with (10 x/322[int] p/323) (makeblock 0 (int,*) x/322 p/323)))
+++(function a/320[int] b/321[int]
++   (catch
++-    (if a/325 (exit 10 a/325 (makeblock 0 a/325 b/326))
++-      (exit 10 b/326 (makeblock 0 a/325 b/326)))
++-   with (10 x/327[int] p/328) (makeblock 0 (int,*) x/327 p/328)))
+++    (if a/320 (exit 10 a/320 (makeblock 0 a/320 b/321))
+++      (exit 10 b/321 (makeblock 0 a/320 b/321)))
+++   with (10 x/322[int] p/323) (makeblock 0 (int,*) x/322 p/323)))
++ - : bool -> bool -> bool * (bool * bool) = <fun>
++ |}]
++ 
++@@ -185,15 +185,15 @@ let _ = fun a b -> match a, b with
++ | (false as x, _) as p -> x, p
++ (* outside, onecase *)
++ [%%expect {|
++-(function a/335[int] b/336[int]
++-  (if a/335
++-    (let (x/337 =a[int] a/335 _p/338 =a (makeblock 0 a/335 b/336))
++-      (makeblock 0 (int,*) x/337 [0: 1 1]))
++-    (let (x/339 =a[int] a/335 p/340 =a (makeblock 0 a/335 b/336))
++-      (makeblock 0 (int,*) x/339 p/340))))
++-(function a/335[int] b/336[int]
++-  (if a/335 (makeblock 0 (int,*) a/335 [0: 1 1])
++-    (makeblock 0 (int,*) a/335 (makeblock 0 a/335 b/336))))
+++(function a/330[int] b/331[int]
+++  (if a/330
+++    (let (x/332 =a[int] a/330 _p/333 =a (makeblock 0 a/330 b/331))
+++      (makeblock 0 (int,*) x/332 [0: 1 1]))
+++    (let (x/334 =a[int] a/330 p/335 =a (makeblock 0 a/330 b/331))
+++      (makeblock 0 (int,*) x/334 p/335))))
+++(function a/330[int] b/331[int]
+++  (if a/330 (makeblock 0 (int,*) a/330 [0: 1 1])
+++    (makeblock 0 (int,*) a/330 (makeblock 0 a/330 b/331))))
++ - : bool -> bool -> bool * (bool * bool) = <fun>
++ |}]
++ 
++@@ -202,11 +202,11 @@ let _ = fun a b -> match a, b with
++ | ((false as x, _) as p) -> x, p
++ (* inside, onecase *)
++ [%%expect{|
++-(function a/341[int] b/342
++-  (let (x/343 =a[int] a/341 p/344 =a (makeblock 0 a/341 b/342))
++-    (makeblock 0 (int,*) x/343 p/344)))
++-(function a/341[int] b/342
++-  (makeblock 0 (int,*) a/341 (makeblock 0 a/341 b/342)))
+++(function a/336[int] b/337
+++  (let (x/338 =a[int] a/336 p/339 =a (makeblock 0 a/336 b/337))
+++    (makeblock 0 (int,*) x/338 p/339)))
+++(function a/336[int] b/337
+++  (makeblock 0 (int,*) a/336 (makeblock 0 a/336 b/337)))
++ - : bool -> 'a -> bool * (bool * 'a) = <fun>
++ |}]
++ 
++@@ -223,14 +223,14 @@ let _ =fun a b -> match a, b with
++ | (_, _) as p -> p
++ (* outside, tuplist *)
++ [%%expect {|
++-(function a/354[int] b/355
+++(function a/349[int] b/350
++   (catch
++-    (if a/354 (if b/355 (let (p/356 =a (field_imm 0 b/355)) p/356) (exit 12))
+++    (if a/349 (if b/350 (let (p/351 =a (field_imm 0 b/350)) p/351) (exit 12))
++       (exit 12))
++-   with (12) (let (p/357 =a (makeblock 0 a/354 b/355)) p/357)))
++-(function a/354[int] b/355
++-  (catch (if a/354 (if b/355 (field_imm 0 b/355) (exit 12)) (exit 12))
++-   with (12) (makeblock 0 a/354 b/355)))
+++   with (12) (let (p/352 =a (makeblock 0 a/349 b/350)) p/352)))
+++(function a/349[int] b/350
+++  (catch (if a/349 (if b/350 (field_imm 0 b/350) (exit 12)) (exit 12))
+++   with (12) (makeblock 0 a/349 b/350)))
++ - : bool -> bool tuplist -> bool * bool tuplist = <fun>
++ |}]
++ 
++@@ -239,20 +239,20 @@ let _ = fun a b -> match a, b with
++ | ((_, _) as p) -> p
++ (* inside, tuplist *)
++ [%%expect{|
++-(function a/358[int] b/359
+++(function a/353[int] b/354
++   (catch
++     (catch
++-      (if a/358
++-        (if b/359 (let (p/363 =a (field_imm 0 b/359)) (exit 13 p/363))
+++      (if a/353
+++        (if b/354 (let (p/358 =a (field_imm 0 b/354)) (exit 13 p/358))
++           (exit 14))
++         (exit 14))
++-     with (14) (let (p/362 =a (makeblock 0 a/358 b/359)) (exit 13 p/362)))
++-   with (13 p/360) p/360))
++-(function a/358[int] b/359
+++     with (14) (let (p/357 =a (makeblock 0 a/353 b/354)) (exit 13 p/357)))
+++   with (13 p/355) p/355))
+++(function a/353[int] b/354
++   (catch
++     (catch
++-      (if a/358 (if b/359 (exit 13 (field_imm 0 b/359)) (exit 14)) (exit 14))
++-     with (14) (exit 13 (makeblock 0 a/358 b/359)))
++-   with (13 p/360) p/360))
+++      (if a/353 (if b/354 (exit 13 (field_imm 0 b/354)) (exit 14)) (exit 14))
+++     with (14) (exit 13 (makeblock 0 a/353 b/354)))
+++   with (13 p/355) p/355))
++ - : bool -> bool tuplist -> bool * bool tuplist = <fun>
++ |}]
++diff --git a/testsuite/tests/c-api/alloc_async.ml b/testsuite/tests/c-api/alloc_async.ml
++index b8c99a4b07..0ed35acf16 100644
++--- a/testsuite/tests/c-api/alloc_async.ml
+++++ b/testsuite/tests/c-api/alloc_async.ml
++@@ -1,7 +1,5 @@
++ (* TEST
++    modules = "alloc_async_stubs.c"
++-   * skip
++-   reason = "alloc async changes: https://github.com/ocaml/ocaml/pull/8897"
++ *)
++ 
++ external test : int ref -> unit = "stub"
++diff --git a/testsuite/tests/callback/nested_fiber.ml b/testsuite/tests/callback/nested_fiber.ml
++index d7e792729a..cfdcf96d4e 100644
++--- a/testsuite/tests/callback/nested_fiber.ml
+++++ b/testsuite/tests/callback/nested_fiber.ml
++@@ -1,9 +1,11 @@
++ (* TEST
++    include unix
++    modules = "nested_fiber_.c"
++-   * libunix
++-   ** bytecode
++-   ** native
+++   * skip
+++   reason = "OCaml 5 only"
+++   ** libunix
+++   *** bytecode
+++   *** native
++ *)
++ 
++ external caml_to_c : (unit -> 'a) -> 'a = "caml_to_c"
++diff --git a/testsuite/tests/callback/stack_overflow.ml b/testsuite/tests/callback/stack_overflow.ml
++index df0e4f5c4d..a14ee4d09a 100644
++--- a/testsuite/tests/callback/stack_overflow.ml
+++++ b/testsuite/tests/callback/stack_overflow.ml
++@@ -1,9 +1,11 @@
++ (* TEST
++    include unix
++    modules = "stack_overflow_.c"
++-   * libunix
++-   ** bytecode
++-   ** native
+++   * skip
+++   reason = "OCaml 5 only"
+++   ** libunix
+++   *** bytecode
+++   *** native
++ *)
++ 
++ external caml_to_c : (unit -> 'a) -> 'a = "caml_to_c"
++diff --git a/testsuite/tests/callback/test7.ml b/testsuite/tests/callback/test7.ml
++index 00aca09afe..85a7377371 100644
++--- a/testsuite/tests/callback/test7.ml
+++++ b/testsuite/tests/callback/test7.ml
++@@ -1,9 +1,11 @@
++ (* TEST
++    include unix
++    modules = "test7_.c"
++-   * libunix
++-   ** bytecode
++-   ** native
+++   * skip
+++   reason = "OCaml 5 only"
+++   ** libunix
+++   *** bytecode
+++   *** native
++ *)
++ 
++ (* Tests nested calls from C (main C) to OCaml (main OCaml) to C (caml_to_c) to
++diff --git a/testsuite/tests/callback/test_signalhandler.ml b/testsuite/tests/callback/test_signalhandler.ml
++index 9d0ecaac13..1c24a38f9d 100644
++--- a/testsuite/tests/callback/test_signalhandler.ml
+++++ b/testsuite/tests/callback/test_signalhandler.ml
++@@ -1,6 +1,6 @@
++ (* TEST
++    include unix
++-   modules = "test_signalhandler_.c"
+++   modules = "callbackprim.c"
++    * libunix
++    ** bytecode
++    ** native
++@@ -52,17 +52,19 @@ let sighandler signo =
++   (* Thoroughly wipe the minor heap *)
++   ignore (tak (18, 12, 6))
++ 
+++external raise_sigusr1 : unit -> unit = "raise_sigusr1" [@@noalloc]
++ external unix_getpid : unit -> int = "unix_getpid" [@@noalloc]
++ external unix_kill : int -> int -> unit = "unix_kill" [@@noalloc]
++ 
++ let callbacksig () =
++-  let pid = unix_getpid() in
+++  let _pid = unix_getpid() in
++   (* Allocate a block in the minor heap *)
++   let s = String.make 5 'b' in
++   (* Send a signal to self.  We want s to remain in a register and
++      not be spilled on the stack, hence we declare unix_kill
++      [@@noalloc]. *)
++-  unix_kill pid Sys.sigusr1;
+++  (*unix_kill pid Sys.sigusr1;*)
+++  raise_sigusr1 ();
++   (* Allocate some more so that the signal will be tested *)
++   let u = (s, s) in
++   fst u
++diff --git a/testsuite/tests/effects/backtrace.ml b/testsuite/tests/effects/backtrace.ml
++index 9e8813c2a1..f96b5e6650 100644
++--- a/testsuite/tests/effects/backtrace.ml
+++++ b/testsuite/tests/effects/backtrace.ml
++@@ -1,6 +1,8 @@
++ (* TEST
++    flags = "-g"
++    ocamlrunparam += ",b=1"
+++   * skip
+++   reason = "OCaml 5 only"
++ *)
++ 
++ open EffectHandlers
++diff --git a/testsuite/tests/effects/cmphash.ml b/testsuite/tests/effects/cmphash.ml
++index 49f2cd3285..952886d628 100644
++--- a/testsuite/tests/effects/cmphash.ml
+++++ b/testsuite/tests/effects/cmphash.ml
++@@ -1,4 +1,6 @@
++ (* TEST
+++   * skip
+++   reason = "OCaml 5 only"
++  *)
++ 
++ open EffectHandlers
++diff --git a/testsuite/tests/effects/evenodd.ml b/testsuite/tests/effects/evenodd.ml
++index 0a0b735988..450fcea011 100644
++--- a/testsuite/tests/effects/evenodd.ml
+++++ b/testsuite/tests/effects/evenodd.ml
++@@ -1,4 +1,6 @@
++ (* TEST
+++   * skip
+++   reason = "OCaml 5 only"
++  *)
++ 
++ open EffectHandlers
++diff --git a/testsuite/tests/effects/issue479.ml b/testsuite/tests/effects/issue479.ml
++index 8d526f8639..691d2757ae 100644
++--- a/testsuite/tests/effects/issue479.ml
+++++ b/testsuite/tests/effects/issue479.ml
++@@ -1,5 +1,7 @@
++ (* TEST
++-   * toplevel
+++   * skip
+++   reason = "OCaml 5 only"
+++   ** toplevel
++ *)
++ 
++ (* https://github.com/ocaml-multicore/ocaml-multicore/issues/479 *)
++diff --git a/testsuite/tests/effects/overflow.ml b/testsuite/tests/effects/overflow.ml
++index 28325d47e2..7e332f1c5c 100644
++--- a/testsuite/tests/effects/overflow.ml
+++++ b/testsuite/tests/effects/overflow.ml
++@@ -1,4 +1,6 @@
++ (* TEST
+++   * skip
+++   reason = "OCaml 5 only"
++  *)
++ 
++ open EffectHandlers
++diff --git a/testsuite/tests/effects/partial.ml b/testsuite/tests/effects/partial.ml
++index 440ce14d6f..3e10697e68 100644
++--- a/testsuite/tests/effects/partial.ml
+++++ b/testsuite/tests/effects/partial.ml
++@@ -1,4 +1,6 @@
++ (* TEST
+++   * skip
+++   reason = "OCaml 5 only"
++  *)
++ 
++ open EffectHandlers
++diff --git a/testsuite/tests/effects/reperform.ml b/testsuite/tests/effects/reperform.ml
++index 759c1e4804..48ca55ca81 100644
++--- a/testsuite/tests/effects/reperform.ml
+++++ b/testsuite/tests/effects/reperform.ml
++@@ -1,4 +1,6 @@
++ (* TEST
+++   * skip
+++   reason = "OCaml 5 only"
++  *)
++ 
++ open EffectHandlers
++diff --git a/testsuite/tests/effects/sched.ml b/testsuite/tests/effects/sched.ml
++index b78014ecb1..48e72f8b3b 100644
++--- a/testsuite/tests/effects/sched.ml
+++++ b/testsuite/tests/effects/sched.ml
++@@ -1,4 +1,6 @@
++ (* TEST
+++   * skip
+++   reason = "OCaml 5 only"
++  *)
++ 
++ open EffectHandlers
++diff --git a/testsuite/tests/effects/shallow_state.ml b/testsuite/tests/effects/shallow_state.ml
++index 7d74a8e1b8..b7813fc9b0 100644
++--- a/testsuite/tests/effects/shallow_state.ml
+++++ b/testsuite/tests/effects/shallow_state.ml
++@@ -1,4 +1,6 @@
++ (* TEST
+++   * skip
+++   reason = "OCaml 5 only"
++  *)
++ 
++ open EffectHandlers
++diff --git a/testsuite/tests/effects/shallow_state_io.ml b/testsuite/tests/effects/shallow_state_io.ml
++index ecf431db73..e6ebe39ba7 100644
++--- a/testsuite/tests/effects/shallow_state_io.ml
+++++ b/testsuite/tests/effects/shallow_state_io.ml
++@@ -1,4 +1,6 @@
++ (* TEST
+++   * skip
+++   reason = "OCaml 5 only"
++  *)
++ 
++ open EffectHandlers
++diff --git a/testsuite/tests/effects/test1.ml b/testsuite/tests/effects/test1.ml
++index 2654f113dd..30002f6fb3 100644
++--- a/testsuite/tests/effects/test1.ml
+++++ b/testsuite/tests/effects/test1.ml
++@@ -1,4 +1,6 @@
++ (* TEST
+++   * skip
+++   reason = "OCaml 5 only"
++  *)
++ 
++ open EffectHandlers
++diff --git a/testsuite/tests/effects/test10.ml b/testsuite/tests/effects/test10.ml
++index 612692ac9d..984278638c 100644
++--- a/testsuite/tests/effects/test10.ml
+++++ b/testsuite/tests/effects/test10.ml
++@@ -1,4 +1,6 @@
++ (* TEST
+++   * skip
+++   reason = "OCaml 5 only"
++  *)
++ 
++ open EffectHandlers
++diff --git a/testsuite/tests/effects/test11.ml b/testsuite/tests/effects/test11.ml
++index 32b706a580..d01ea66203 100644
++--- a/testsuite/tests/effects/test11.ml
+++++ b/testsuite/tests/effects/test11.ml
++@@ -1,4 +1,6 @@
++ (* TEST
+++   * skip
+++   reason = "OCaml 5 only"
++ *)
++ 
++ (* Tests RESUMETERM with extra_args != 0 in bytecode,
++diff --git a/testsuite/tests/effects/test2.ml b/testsuite/tests/effects/test2.ml
++index c7cd9d51bc..3bb4becf1f 100644
++--- a/testsuite/tests/effects/test2.ml
+++++ b/testsuite/tests/effects/test2.ml
++@@ -1,4 +1,6 @@
++ (* TEST
+++   * skip
+++   reason = "OCaml 5 only"
++  *)
++ 
++ open Printf
++diff --git a/testsuite/tests/effects/test3.ml b/testsuite/tests/effects/test3.ml
++index 9d413920de..99a4008f02 100644
++--- a/testsuite/tests/effects/test3.ml
+++++ b/testsuite/tests/effects/test3.ml
++@@ -1,4 +1,6 @@
++ (* TEST
+++   * skip
+++   reason = "OCaml 5 only"
++  *)
++ 
++ open EffectHandlers
++diff --git a/testsuite/tests/effects/test4.ml b/testsuite/tests/effects/test4.ml
++index 0169bab840..3e50bbe582 100644
++--- a/testsuite/tests/effects/test4.ml
+++++ b/testsuite/tests/effects/test4.ml
++@@ -1,4 +1,6 @@
++ (* TEST
+++   * skip
+++   reason = "OCaml 5 only"
++  *)
++ 
++ open EffectHandlers
++diff --git a/testsuite/tests/effects/test5.ml b/testsuite/tests/effects/test5.ml
++index 4529e4b6df..131985cd54 100644
++--- a/testsuite/tests/effects/test5.ml
+++++ b/testsuite/tests/effects/test5.ml
++@@ -1,4 +1,6 @@
++ (* TEST
+++   * skip
+++   reason = "OCaml 5 only"
++  *)
++ 
++ open EffectHandlers
++diff --git a/testsuite/tests/effects/test6.ml b/testsuite/tests/effects/test6.ml
++index c6c9991a38..286efaa95f 100644
++--- a/testsuite/tests/effects/test6.ml
+++++ b/testsuite/tests/effects/test6.ml
++@@ -1,4 +1,6 @@
++ (* TEST
+++   * skip
+++   reason = "OCaml 5 only"
++  *)
++ 
++ open EffectHandlers
++diff --git a/testsuite/tests/effects/test_lazy.ml b/testsuite/tests/effects/test_lazy.ml
++index 697fddd2d1..68045a4bb1 100644
++--- a/testsuite/tests/effects/test_lazy.ml
+++++ b/testsuite/tests/effects/test_lazy.ml
++@@ -1,4 +1,7 @@
++-(* TEST *)
+++(* TEST
+++   * skip
+++   reason = "OCaml 5 only"
+++*)
++ 
++ open EffectHandlers
++ open EffectHandlers.Deep
++diff --git a/testsuite/tests/effects/used_cont.ml b/testsuite/tests/effects/used_cont.ml
++index e302d72318..a8134975cc 100644
++--- a/testsuite/tests/effects/used_cont.ml
+++++ b/testsuite/tests/effects/used_cont.ml
++@@ -1,4 +1,6 @@
++ (* TEST
+++   * skip
+++   reason = "OCaml 5 only"
++  *)
++ 
++ open EffectHandlers
++diff --git a/testsuite/tests/ephe-c-api/test.ml b/testsuite/tests/ephe-c-api/test.ml
++index ff1646835a..a29cd8516b 100644
++--- a/testsuite/tests/ephe-c-api/test.ml
+++++ b/testsuite/tests/ephe-c-api/test.ml
++@@ -1,7 +1,5 @@
++ (* TEST
++    modules = "stubs.c"
++-   * skip
++-   reason = "port the new Ephemeron C-api to multicore : https://github.com/ocaml/ocaml/pull/676"
++ *)
++ 
++ (* C version of ephetest.ml *)
++diff --git a/testsuite/tests/gc-roots/globroots.ml b/testsuite/tests/gc-roots/globroots.ml
++index b11aff1f67..2e1146adef 100644
++--- a/testsuite/tests/gc-roots/globroots.ml
+++++ b/testsuite/tests/gc-roots/globroots.ml
++@@ -1,5 +1,7 @@
++ (* TEST
++    modules = "globrootsprim.c"
+++   * skip
+++   reason = "OCaml 5 only"
++ *)
++ 
++ module type GLOBREF = sig
++diff --git a/testsuite/tests/gc-roots/globroots_parallel.ml b/testsuite/tests/gc-roots/globroots_parallel.ml
++index 4c3e36d140..fabbaa8ec6 100644
++--- a/testsuite/tests/gc-roots/globroots_parallel.ml
+++++ b/testsuite/tests/gc-roots/globroots_parallel.ml
++@@ -1,6 +1,8 @@
++ (* TEST
++    flags += " -w a "
++    modules = "globrootsprim.c globroots.ml"
+++   * skip
+++   reason = "OCaml 5 only"
++ *)
++ 
++ open Globroots
++diff --git a/testsuite/tests/gc-roots/globroots_parallel_spawn_burn.ml b/testsuite/tests/gc-roots/globroots_parallel_spawn_burn.ml
++index bf392c13b0..cf932d9491 100644
++--- a/testsuite/tests/gc-roots/globroots_parallel_spawn_burn.ml
+++++ b/testsuite/tests/gc-roots/globroots_parallel_spawn_burn.ml
++@@ -1,6 +1,8 @@
++ (* TEST
++    flags += " -w a "
++    modules = "globrootsprim.c globroots.ml"
+++   * skip
+++   reason = "OCaml 5 only"
++ *)
++ 
++ open Globroots
++diff --git a/testsuite/tests/gc-roots/globroots_sequential.ml b/testsuite/tests/gc-roots/globroots_sequential.ml
++index 6bf995bf96..dc732ce6a3 100644
++--- a/testsuite/tests/gc-roots/globroots_sequential.ml
+++++ b/testsuite/tests/gc-roots/globroots_sequential.ml
++@@ -1,6 +1,8 @@
++ (* TEST
++    flags += " -w a "
++    modules = "globrootsprim.c globroots.ml"
+++   * skip
+++   reason = "OCaml 5 only"
++ *)
++ open Globroots
++ 
++diff --git a/testsuite/tests/generalized-open/gpr1506.ml b/testsuite/tests/generalized-open/gpr1506.ml
++index dd55e349af..bd72ed302f 100644
++--- a/testsuite/tests/generalized-open/gpr1506.ml
+++++ b/testsuite/tests/generalized-open/gpr1506.ml
++@@ -103,9 +103,9 @@ include struct open struct type t = T end let x = T end
++ Line 1, characters 15-41:
++ 1 | include struct open struct type t = T end let x = T end
++                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
++-Error: The type t/342 introduced by this open appears in the signature
+++Error: The type t/337 introduced by this open appears in the signature
++        Line 1, characters 46-47:
++-         The value x has no valid type if t/342 is hidden
+++         The value x has no valid type if t/337 is hidden
++ |}];;
++ 
++ module A = struct
++@@ -123,9 +123,9 @@ Lines 3-6, characters 4-7:
++ 4 |       type t = T
++ 5 |       let x = T
++ 6 |     end
++-Error: The type t/347 introduced by this open appears in the signature
+++Error: The type t/342 introduced by this open appears in the signature
++        Line 7, characters 8-9:
++-         The value y has no valid type if t/347 is hidden
+++         The value y has no valid type if t/342 is hidden
++ |}];;
++ 
++ module A = struct
++@@ -142,9 +142,9 @@ Lines 3-5, characters 4-7:
++ 3 | ....open struct
++ 4 |       type t = T
++ 5 |     end
++-Error: The type t/352 introduced by this open appears in the signature
+++Error: The type t/347 introduced by this open appears in the signature
++        Line 6, characters 8-9:
++-         The value y has no valid type if t/352 is hidden
+++         The value y has no valid type if t/347 is hidden
++ |}]
++ 
++ (* It was decided to not allow this anymore. *)
++diff --git a/testsuite/tests/instrumented-runtime/main.ml b/testsuite/tests/instrumented-runtime/main.ml
++index 084ceb03ca..94200ec67f 100644
++--- a/testsuite/tests/instrumented-runtime/main.ml
+++++ b/testsuite/tests/instrumented-runtime/main.ml
++@@ -1,7 +1,5 @@
++ (* TEST
++   * instrumented-runtime
++-  * skip
++-  reason = "instrumented runtime test is not very useful and broken on multicore. (#9413)"
++   ** native
++     flags = "-runtime-variant=i"
++ *)
++diff --git a/testsuite/tests/lazy/lazy2.ml b/testsuite/tests/lazy/lazy2.ml
++index cccbd96d71..35dd7fd85b 100644
++--- a/testsuite/tests/lazy/lazy2.ml
+++++ b/testsuite/tests/lazy/lazy2.ml
++@@ -1,5 +1,7 @@
++ (* TEST
++    ocamlopt_flags += " -O3 "
+++   * skip
+++   reason = "OCaml 5 only"
++ *)
++ 
++ open Domain
++diff --git a/testsuite/tests/lazy/lazy3.ml b/testsuite/tests/lazy/lazy3.ml
++index a22a0893b9..737791b7db 100644
++--- a/testsuite/tests/lazy/lazy3.ml
+++++ b/testsuite/tests/lazy/lazy3.ml
++@@ -1,5 +1,7 @@
++ (* TEST
++    ocamlopt_flags += " -O3 "
+++   * skip
+++   reason = "OCaml 5 only"
++ *)
++ 
++ let f count =
++diff --git a/testsuite/tests/lazy/lazy5.ml b/testsuite/tests/lazy/lazy5.ml
++index 217b84175e..e37b499268 100644
++--- a/testsuite/tests/lazy/lazy5.ml
+++++ b/testsuite/tests/lazy/lazy5.ml
++@@ -1,5 +1,7 @@
++ (* TEST
++    ocamlopt_flags += " -O3 "
+++   * skip
+++   reason = "OCaml 5 only"
++ *)
++ let rec safe_force l =
++   try Lazy.force l with
++diff --git a/testsuite/tests/lazy/lazy6.ml b/testsuite/tests/lazy/lazy6.ml
++index 098848769a..29067f1a41 100644
++--- a/testsuite/tests/lazy/lazy6.ml
+++++ b/testsuite/tests/lazy/lazy6.ml
++@@ -1,5 +1,7 @@
++ (* TEST
++    ocamlopt_flags += " -O3 "
+++   * skip
+++   reason = "OCaml 5 only"
++ *)
++ 
++ let flag1 = Atomic.make false
++diff --git a/testsuite/tests/lazy/lazy7.ml b/testsuite/tests/lazy/lazy7.ml
++index 6c96f32907..d9c9b82127 100644
++--- a/testsuite/tests/lazy/lazy7.ml
+++++ b/testsuite/tests/lazy/lazy7.ml
++@@ -1,5 +1,7 @@
++ (* TEST
++    ocamlopt_flags += " -O3 "
+++   * skip
+++   reason = "OCaml 5 only"
++ *)
++ 
++ let num_domains = 4
++diff --git a/testsuite/tests/lazy/lazy8.ml b/testsuite/tests/lazy/lazy8.ml
++index c9b5781617..ddadf48a1b 100644
++--- a/testsuite/tests/lazy/lazy8.ml
+++++ b/testsuite/tests/lazy/lazy8.ml
++@@ -1,5 +1,7 @@
++ (* TEST
++    ocamlopt_flags += " -O3 "
+++   * skip
+++   reason = "OCaml 5 only"
++ *)
++ 
++ exception E
++diff --git a/testsuite/tests/lazy/minor_major_force.ml b/testsuite/tests/lazy/minor_major_force.ml
++index b18fe44a9b..d7497f986d 100644
++--- a/testsuite/tests/lazy/minor_major_force.ml
+++++ b/testsuite/tests/lazy/minor_major_force.ml
++@@ -1,5 +1,7 @@
++ (* TEST
++    ocamlopt_flags += " -O3 "
+++   * skip
+++   reason = "OCaml 5 only"
++ *)
++ 
++ (*
++diff --git a/testsuite/tests/lf_skiplist/test.ml b/testsuite/tests/lf_skiplist/test.ml
++index f3b11bf411..4dcffc523d 100644
++--- a/testsuite/tests/lf_skiplist/test.ml
+++++ b/testsuite/tests/lf_skiplist/test.ml
++@@ -1,5 +1,7 @@
++ (* TEST
++    modules = "stubs.c"
+++   * skip
+++   reason = "OCaml 5 only"
++ *)
++ 
++ external test_skiplist_serial : unit -> unit = "test_skiplist_serial"
++diff --git a/testsuite/tests/lf_skiplist/test_parallel.ml b/testsuite/tests/lf_skiplist/test_parallel.ml
++index ac02717889..c882a8dac7 100644
++--- a/testsuite/tests/lf_skiplist/test_parallel.ml
+++++ b/testsuite/tests/lf_skiplist/test_parallel.ml
++@@ -1,5 +1,7 @@
++ (* TEST
++    modules = "stubs.c"
+++   * skip
+++   reason = "OCaml 5 only"
++ *)
++ 
++ external init_skiplist : unit -> unit = "init_skiplist"
++diff --git a/testsuite/tests/lib-dynlink-initializers/test10_main.byte.reference b/testsuite/tests/lib-dynlink-initializers/test10_main.byte.reference
++index 8f70ff73cd..04083e8f47 100755
++--- a/testsuite/tests/lib-dynlink-initializers/test10_main.byte.reference
+++++ b/testsuite/tests/lib-dynlink-initializers/test10_main.byte.reference
++@@ -5,8 +5,8 @@ Called from Test10_plugin.f in file "test10_plugin.ml", line 6, characters 2-6
++ Called from Test10_plugin in file "test10_plugin.ml", line 10, characters 2-6
++ Called from Dynlink.Bytecode.run in file "otherlibs/dynlink/dynlink.ml", line 137, characters 16-25
++ Re-raised at Dynlink.Bytecode.run in file "otherlibs/dynlink/dynlink.ml", line 139, characters 6-137
++-Called from Dynlink_common.Make.load.(fun) in file "otherlibs/dynlink/dynlink_common.ml", line 350, characters 13-44
+++Called from Dynlink_common.Make.load.(fun) in file "otherlibs/dynlink/dynlink_common.ml", line 352, characters 13-44
++ Called from Stdlib__List.iter in file "list.ml", line 110, characters 12-15
++-Called from Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 348, characters 8-240
++-Re-raised at Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 358, characters 8-17
+++Called from Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 350, characters 8-240
+++Re-raised at Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 360, characters 8-17
++ Called from Test10_main in file "test10_main.ml", line 51, characters 13-69
++diff --git a/testsuite/tests/lib-dynlink-initializers/test10_main.native.reference b/testsuite/tests/lib-dynlink-initializers/test10_main.native.reference
++index 6496b8870f..fd2a2d84b1 100755
++--- a/testsuite/tests/lib-dynlink-initializers/test10_main.native.reference
+++++ b/testsuite/tests/lib-dynlink-initializers/test10_main.native.reference
++@@ -1,10 +1,14 @@
++ Error: Failure("Plugin error")
++-Raised by primitive operation at Dynlink.Native.run.(fun) in file "otherlibs/dynlink/native/dynlink.ml", line 85, characters 12-29
+++Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
+++Called from Test10_plugin.g in file "test10_plugin.ml", line 2, characters 15-38
+++Called from Test10_plugin in file "test10_plugin.ml", line 10, characters 2-6
+++Called from Dynlink.Native.run.(fun) in file "otherlibs/dynlink/native/dynlink.ml", line 85, characters 12-29
+++Called from Dynlink.Native.run.(fun) in file "otherlibs/dynlink/native/dynlink.ml", line 85, characters 12-29
++ Re-raised at Dynlink.Native.run.(fun) in file "otherlibs/dynlink/native/dynlink.ml", line 87, characters 10-149
++ Called from Stdlib__List.iter in file "list.ml", line 110, characters 12-15
++-Called from Dynlink_common.Make.load.(fun) in file "otherlibs/dynlink/dynlink_common.ml", line 350, characters 13-44
+++Called from Dynlink_common.Make.load.(fun) in file "otherlibs/dynlink/dynlink_common.ml", line 352, characters 13-44
++ Called from Stdlib__List.iter in file "list.ml", line 110, characters 12-15
++-Called from Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 348, characters 8-240
++-Re-raised at Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 358, characters 8-17
++-Called from Dynlink_common.Make.loadfile in file "otherlibs/dynlink/dynlink_common.ml" (inlined), line 360, characters 26-45
+++Called from Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 350, characters 8-240
+++Re-raised at Dynlink_common.Make.load in file "otherlibs/dynlink/dynlink_common.ml", line 360, characters 8-17
+++Called from Dynlink_common.Make.loadfile in file "otherlibs/dynlink/dynlink_common.ml" (inlined), line 362, characters 26-45
++ Called from Test10_main in file "test10_main.ml", line 49, characters 30-87
++diff --git a/testsuite/tests/lib-format/mc_pr586_par.ml b/testsuite/tests/lib-format/mc_pr586_par.ml
++index 456a306ce7..da5c148416 100644
++--- a/testsuite/tests/lib-format/mc_pr586_par.ml
+++++ b/testsuite/tests/lib-format/mc_pr586_par.ml
++@@ -1,4 +1,7 @@
++-(* TEST *)
+++(* TEST
+++   * skip
+++   reason = "OCaml 5 only"
+++*)
++ 
++ let () =
++   let domains = Array.init 7 (fun i ->
++diff --git a/testsuite/tests/lib-format/mc_pr586_par2.ml b/testsuite/tests/lib-format/mc_pr586_par2.ml
++index 0ead3627b5..8a96be1456 100644
++--- a/testsuite/tests/lib-format/mc_pr586_par2.ml
+++++ b/testsuite/tests/lib-format/mc_pr586_par2.ml
++@@ -1,4 +1,7 @@
++-(* TEST *)
+++(* TEST
+++   * skip
+++   reason = "OCaml 5 only"
+++*)
++ 
++ let () =
++   let fmt_key = Format.synchronized_formatter_of_out_channel stdout in
++diff --git a/testsuite/tests/lib-marshal/intext_par.ml b/testsuite/tests/lib-marshal/intext_par.ml
++index 2efb846665..68ad0e1edb 100644
++--- a/testsuite/tests/lib-marshal/intext_par.ml
+++++ b/testsuite/tests/lib-marshal/intext_par.ml
++@@ -1,5 +1,7 @@
++ (* TEST
++    modules = "intextaux_par.c"
+++   * skip
+++   reason = "OCaml 5 only"
++ *)
++ 
++ (* Test for output_value / input_value *)
++diff --git a/testsuite/tests/lib-obj/reachable_words_np.ml b/testsuite/tests/lib-obj/reachable_words_np.ml
++new file mode 100644
++index 0000000000..8a50268d20
++--- /dev/null
+++++ b/testsuite/tests/lib-obj/reachable_words_np.ml
++@@ -0,0 +1,21 @@
+++(* TEST
+++ * naked_pointers
+++ ** bytecode
+++ ** native
+++*)
+++
+++let native =
+++  match Sys.backend_type with
+++  | Sys.Native -> true
+++  | Sys.Bytecode -> false
+++  | Sys.Other s -> print_endline s; assert false
+++
+++let size x = Obj.reachable_words (Obj.repr x)
+++
+++let expect_size s x =
+++  let i = size x in
+++  if i <> s then
+++    Printf.printf "size = %i; expected = %i\n%!" i s
+++
+++let () =
+++  expect_size (if native then 0 else 3) (1, 2)
++diff --git a/testsuite/tests/lib-str/parallel.ml b/testsuite/tests/lib-str/parallel.ml
++index 23f2a5f7de..08055698e7 100644
++--- a/testsuite/tests/lib-str/parallel.ml
+++++ b/testsuite/tests/lib-str/parallel.ml
++@@ -1,8 +1,10 @@
++ (* TEST
++-* hasstr
+++* skip
+++reason = "OCaml 5 only"
+++** hasstr
++ include str
++-** bytecode
++-** native
+++*** bytecode
+++*** native
++ *)
++ 
++ let total = Atomic.make 0
++diff --git a/testsuite/tests/lib-sync/prodcons.ml b/testsuite/tests/lib-sync/prodcons.ml
++index 2e2c09756c..093d8740be 100644
++--- a/testsuite/tests/lib-sync/prodcons.ml
+++++ b/testsuite/tests/lib-sync/prodcons.ml
++@@ -1,4 +1,6 @@
++ (* TEST
+++   * skip
+++   reason = "OCaml 5 only"
++ *)
++ 
++ (* Classic producer-consumer *)
++diff --git a/testsuite/tests/lib-sync/trylock.ml b/testsuite/tests/lib-sync/trylock.ml
++index 314f1142ca..b4719fff04 100644
++--- a/testsuite/tests/lib-sync/trylock.ml
+++++ b/testsuite/tests/lib-sync/trylock.ml
++@@ -1,4 +1,6 @@
++ (* TEST
+++   * skip
+++   reason = "OCaml 5 only"
++ *)
++ 
++ (* Test Mutex.try_lock *)
++diff --git a/testsuite/tests/lib-sync/trylock2.ml b/testsuite/tests/lib-sync/trylock2.ml
++index b31ace08b5..e29ee93f9e 100644
++--- a/testsuite/tests/lib-sync/trylock2.ml
+++++ b/testsuite/tests/lib-sync/trylock2.ml
++@@ -1,4 +1,6 @@
++ (* TEST
+++   * skip
+++   reason = "OCaml 5 only"
++ *)
++ 
++ (* Test Mutex.try_lock *)
++diff --git a/testsuite/tests/lib-systhreads/multicore_lifecycle.ml b/testsuite/tests/lib-systhreads/multicore_lifecycle.ml
++index f481464906..0138046146 100644
++--- a/testsuite/tests/lib-systhreads/multicore_lifecycle.ml
+++++ b/testsuite/tests/lib-systhreads/multicore_lifecycle.ml
++@@ -1,8 +1,10 @@
++ (* TEST
++-* hassysthreads
+++* skip
+++reason = "OCaml 5 only"
+++** hassysthreads
++ include systhreads
++-** bytecode
++-** native
+++*** bytecode
+++*** native
++ *)
++ 
++ let _ =
++diff --git a/testsuite/tests/lib-systhreads/test_c_thread_register.ml b/testsuite/tests/lib-systhreads/test_c_thread_register.ml
++index a8ec98aa9a..784fe6945f 100644
++--- a/testsuite/tests/lib-systhreads/test_c_thread_register.ml
+++++ b/testsuite/tests/lib-systhreads/test_c_thread_register.ml
++@@ -2,9 +2,10 @@
++    modules = "test_c_thread_register_cstubs.c"
++    * hassysthreads
++    include systhreads
++-   ** not-bsd
++-   *** bytecode
++-   *** native
+++   ** not-windows
+++   *** not-bsd
+++   **** bytecode
+++   **** native
++ *)
++ 
++ (* spins a external thread from C and register it to the OCaml runtime *)
++diff --git a/testsuite/tests/lib-threads/uncaught_exception_handler.reference b/testsuite/tests/lib-threads/uncaught_exception_handler.reference
++index 34a8e2d7f6..b18e7dc5bb 100644
++--- a/testsuite/tests/lib-threads/uncaught_exception_handler.reference
+++++ b/testsuite/tests/lib-threads/uncaught_exception_handler.reference
++@@ -1,12 +1,12 @@
++ Thread 1 killed on uncaught exception Uncaught_exception_handler.CallbackExn
++ Raised at Uncaught_exception_handler.fn in file "uncaught_exception_handler.ml", line 28, characters 12-113
++-Called from Thread.create.(fun) in file "thread.ml", line 49, characters 8-14
+++Called from Thread.create.(fun) in file "thread.ml", line 51, characters 8-14
++ [thread 2] caught Uncaught_exception_handler.CallbackExn
++ Raised at Uncaught_exception_handler.fn in file "uncaught_exception_handler.ml", line 28, characters 12-113
++-Called from Thread.create.(fun) in file "thread.ml", line 49, characters 8-14
+++Called from Thread.create.(fun) in file "thread.ml", line 51, characters 8-14
++ Thread 2 killed on uncaught exception Uncaught_exception_handler.CallbackExn
++ Raised at Uncaught_exception_handler.fn in file "uncaught_exception_handler.ml", line 28, characters 12-113
++-Called from Thread.create.(fun) in file "thread.ml", line 49, characters 8-14
+++Called from Thread.create.(fun) in file "thread.ml", line 51, characters 8-14
++ Thread 2 uncaught exception handler raised Uncaught_exception_handler.UncaughtHandlerExn
++ Raised at Uncaught_exception_handler.handler in file "uncaught_exception_handler.ml", line 26, characters 2-26
++-Called from Thread.create.(fun) in file "thread.ml", line 55, characters 10-41
+++Called from Thread.create.(fun) in file "thread.ml", line 57, characters 10-41
++diff --git a/testsuite/tests/lib-unix/common/multicore_fork_domain_alone.ml b/testsuite/tests/lib-unix/common/multicore_fork_domain_alone.ml
++index 9549f256ea..169cf9a260 100644
++--- a/testsuite/tests/lib-unix/common/multicore_fork_domain_alone.ml
+++++ b/testsuite/tests/lib-unix/common/multicore_fork_domain_alone.ml
++@@ -1,9 +1,11 @@
++ (* TEST
++ include unix
++-* hasunix
++-** not-windows
++-*** bytecode
++-*** native
+++* skip
+++reason = "OCaml 5 only"
+++** hasunix
+++*** not-windows
+++**** bytecode
+++**** native
++ *)
++ 
++ (* on Multicore, fork is not allowed is another domain is, and was running. *)
++diff --git a/testsuite/tests/lib-unix/common/multicore_fork_domain_alone2.ml b/testsuite/tests/lib-unix/common/multicore_fork_domain_alone2.ml
++index 929ed5ecf7..61f75dce4a 100644
++--- a/testsuite/tests/lib-unix/common/multicore_fork_domain_alone2.ml
+++++ b/testsuite/tests/lib-unix/common/multicore_fork_domain_alone2.ml
++@@ -1,9 +1,11 @@
++ (* TEST
++ include unix
++-* hasunix
++-** not-windows
++-*** bytecode
++-*** native
+++* skip
+++reason = "OCaml 5 only"
+++** hasunix
+++*** not-windows
+++**** bytecode
+++**** native
++ *)
++ 
++ (* on Multicore, fork is not allowed is another domain is, and was running. *)
++diff --git a/testsuite/tests/parallel/atomics.ml b/testsuite/tests/parallel/atomics.ml
++index 9c1d0a3cf2..b1f5813b4a 100644
++--- a/testsuite/tests/parallel/atomics.ml
+++++ b/testsuite/tests/parallel/atomics.ml
++@@ -1,8 +1,10 @@
++ (* TEST
++-* hasunix
+++* skip
+++reason = "OCaml 5 only"
+++** hasunix
++ include unix
++-** bytecode
++-** native
+++*** bytecode
+++*** native
++ *)
++ 
++ type u = U of unit
++diff --git a/testsuite/tests/parallel/backup_thread.ml b/testsuite/tests/parallel/backup_thread.ml
++index 05b06cc47c..c69f164ce7 100644
++--- a/testsuite/tests/parallel/backup_thread.ml
+++++ b/testsuite/tests/parallel/backup_thread.ml
++@@ -1,8 +1,10 @@
++ (* TEST
++-* hasunix
+++* skip
+++reason = "OCaml 5 only"
+++** hasunix
++ include unix
++-** bytecode
++-** native
+++*** bytecode
+++*** native
++ *)
++ 
++ 
++diff --git a/testsuite/tests/parallel/backup_thread_pipe.ml b/testsuite/tests/parallel/backup_thread_pipe.ml
++index 41fd101c1f..d0c5bb6e35 100644
++--- a/testsuite/tests/parallel/backup_thread_pipe.ml
+++++ b/testsuite/tests/parallel/backup_thread_pipe.ml
++@@ -1,8 +1,10 @@
++ (* TEST
++-* hasunix
+++* skip
+++reason = "OCaml 5 only"
+++** hasunix
++ include unix
++-** bytecode
++-** native
+++*** bytecode
+++*** native
++ *)
++ 
++ 
++diff --git a/testsuite/tests/parallel/constpromote.ml b/testsuite/tests/parallel/constpromote.ml
++index fc9fd65ff6..466c846ed1 100644
++--- a/testsuite/tests/parallel/constpromote.ml
+++++ b/testsuite/tests/parallel/constpromote.ml
++@@ -1,8 +1,10 @@
++ (* TEST
++-* hasunix
+++* skip
+++reason = "OCaml 5 only"
+++** hasunix
++ include unix
++-** bytecode
++-** native
+++*** bytecode
+++*** native
++ *)
++ 
++ (* when run with the bytecode debug runtime, this test
++diff --git a/testsuite/tests/parallel/deadcont.ml b/testsuite/tests/parallel/deadcont.ml
++index 34e59f0e93..6a10ab3938 100644
++--- a/testsuite/tests/parallel/deadcont.ml
+++++ b/testsuite/tests/parallel/deadcont.ml
++@@ -1,8 +1,10 @@
++ (* TEST
++-* hasunix
+++* skip
+++reason = "OCaml 5 only"
+++** hasunix
++ include unix
++-** bytecode
++-** native
+++*** bytecode
+++*** native
++ *)
++ 
++ (*
++diff --git a/testsuite/tests/parallel/domain_dls.ml b/testsuite/tests/parallel/domain_dls.ml
++index db4ebe0c56..82d8f55e5a 100644
++--- a/testsuite/tests/parallel/domain_dls.ml
+++++ b/testsuite/tests/parallel/domain_dls.ml
++@@ -1,8 +1,10 @@
++ (* TEST
++-* hasunix
+++* skip
+++reason = "OCaml 5 only"
+++** hasunix
++ include unix
++-** bytecode
++-** native
+++*** bytecode
+++*** native
++ *)
++ 
++ let check_dls () =
++diff --git a/testsuite/tests/parallel/domain_dls2.ml b/testsuite/tests/parallel/domain_dls2.ml
++index 6c79145ba7..279f178774 100644
++--- a/testsuite/tests/parallel/domain_dls2.ml
+++++ b/testsuite/tests/parallel/domain_dls2.ml
++@@ -1,8 +1,10 @@
++ (* TEST
++-* hasunix
+++* skip
+++reason = "OCaml 5 only"
+++** hasunix
++ include unix
++-** bytecode
++-** native
+++*** bytecode
+++*** native
++ *)
++ 
++ let _ =
++diff --git a/testsuite/tests/parallel/domain_id.ml b/testsuite/tests/parallel/domain_id.ml
++index 023d425346..79a2fe48a8 100644
++--- a/testsuite/tests/parallel/domain_id.ml
+++++ b/testsuite/tests/parallel/domain_id.ml
++@@ -1,8 +1,10 @@
++ (* TEST
++-* hasunix
+++* skip
+++reason = "OCaml 5 only"
+++** hasunix
++ include unix
++-** bytecode
++-** native
+++*** bytecode
+++*** native
++ *)
++ 
++ open Domain
++diff --git a/testsuite/tests/parallel/domain_parallel_spawn_burn.ml b/testsuite/tests/parallel/domain_parallel_spawn_burn.ml
++index 8dd2398ac8..ffb7e2f969 100644
++--- a/testsuite/tests/parallel/domain_parallel_spawn_burn.ml
+++++ b/testsuite/tests/parallel/domain_parallel_spawn_burn.ml
++@@ -1,8 +1,10 @@
++ (* TEST
++-* hasunix
+++* skip
+++reason = "OCaml 5 only"
+++** hasunix
++ include unix
++-** bytecode
++-** native
+++*** bytecode
+++*** native
++ *)
++ 
++ open Domain
++diff --git a/testsuite/tests/parallel/domain_serial_spawn_burn.ml b/testsuite/tests/parallel/domain_serial_spawn_burn.ml
++index 2d1961d9f1..89c3f3d5c5 100644
++--- a/testsuite/tests/parallel/domain_serial_spawn_burn.ml
+++++ b/testsuite/tests/parallel/domain_serial_spawn_burn.ml
++@@ -1,8 +1,10 @@
++ (* TEST
++-* hasunix
+++* skip
+++reason = "OCaml 5 only"
+++** hasunix
++ include unix
++-** bytecode
++-** native
+++*** bytecode
+++*** native
++ *)
++ 
++ open Domain
++diff --git a/testsuite/tests/parallel/fib_threads.ml b/testsuite/tests/parallel/fib_threads.ml
++index f6005729b7..3ab3dde90d 100644
++--- a/testsuite/tests/parallel/fib_threads.ml
+++++ b/testsuite/tests/parallel/fib_threads.ml
++@@ -1,8 +1,10 @@
++ (* TEST
++-* hassysthreads
+++* skip
+++reason = "OCaml 5 only"
+++** hassysthreads
++ include systhreads
++-** bytecode
++-** native
+++*** bytecode
+++*** native
++ *)
++ 
++ 
++diff --git a/testsuite/tests/parallel/join.ml b/testsuite/tests/parallel/join.ml
++index fba31533e3..388d8ef8c3 100644
++--- a/testsuite/tests/parallel/join.ml
+++++ b/testsuite/tests/parallel/join.ml
++@@ -1,8 +1,10 @@
++ (* TEST
++-* hasunix
+++* skip
+++reason = "OCaml 5 only"
+++** hasunix
++ include unix
++-** bytecode
++-** native
+++*** bytecode
+++*** native
++ *)
++ 
++ let main_join n =
++diff --git a/testsuite/tests/parallel/major_gc_wait_backup.ml b/testsuite/tests/parallel/major_gc_wait_backup.ml
++index e418500774..f11190aee3 100644
++--- a/testsuite/tests/parallel/major_gc_wait_backup.ml
+++++ b/testsuite/tests/parallel/major_gc_wait_backup.ml
++@@ -1,8 +1,10 @@
++ (* TEST
++-* hasunix
+++* skip
+++reason = "OCaml 5 only"
+++** hasunix
++ include unix
++-** native
++-** bytecode
+++*** native
+++*** bytecode
++ *)
++ 
++ type 'a tree = Empty | Node of 'a tree * 'a tree
++diff --git a/testsuite/tests/parallel/mctest.ml b/testsuite/tests/parallel/mctest.ml
++index 96f34c941c..6e3bbe9aad 100644
++--- a/testsuite/tests/parallel/mctest.ml
+++++ b/testsuite/tests/parallel/mctest.ml
++@@ -1,8 +1,10 @@
++ (* TEST
++-* hasunix
+++* skip
+++reason = "OCaml 5 only"
+++** hasunix
++ include unix
++-** bytecode
++-** native
+++*** bytecode
+++*** native
++ *)
++ 
++ (*
++diff --git a/testsuite/tests/parallel/multicore_systhreads.ml b/testsuite/tests/parallel/multicore_systhreads.ml
++index 2f0fcf20b0..5ce5ea86ea 100644
++--- a/testsuite/tests/parallel/multicore_systhreads.ml
+++++ b/testsuite/tests/parallel/multicore_systhreads.ml
++@@ -1,8 +1,10 @@
++ (* TEST
++-* hassysthreads
+++* skip
+++reason = "OCaml 5 only"
+++** hassysthreads
++ include systhreads
++-** bytecode
++-** native
+++*** bytecode
+++*** native
++ *)
++ 
++ 
++diff --git a/testsuite/tests/parallel/pingpong.ml b/testsuite/tests/parallel/pingpong.ml
++index 30fb9eee71..6113340ccf 100644
++--- a/testsuite/tests/parallel/pingpong.ml
+++++ b/testsuite/tests/parallel/pingpong.ml
++@@ -1,8 +1,10 @@
++ (* TEST
++-* hasunix
+++* skip
+++reason = "OCaml 5 only"
+++** hasunix
++ include unix
++-** bytecode
++-** native
+++*** bytecode
+++*** native
++ *)
++ 
++ let r = ref (Some 0)
++diff --git a/testsuite/tests/parallel/poll.ml b/testsuite/tests/parallel/poll.ml
++index b6c06be354..5af3ad1082 100644
++--- a/testsuite/tests/parallel/poll.ml
+++++ b/testsuite/tests/parallel/poll.ml
++@@ -1,8 +1,10 @@
++ (* TEST
++-* hasunix
+++* skip
+++reason = "OCaml 5 only"
+++** hasunix
++ include unix
++-** bytecode
++-** native
+++*** bytecode
+++*** native
++ *)
++ 
++ let rec loop () =
++diff --git a/testsuite/tests/parallel/prodcons_domains.ml b/testsuite/tests/parallel/prodcons_domains.ml
++index 67499d342a..e8e9d736f3 100644
++--- a/testsuite/tests/parallel/prodcons_domains.ml
+++++ b/testsuite/tests/parallel/prodcons_domains.ml
++@@ -1,9 +1,11 @@
++ (* TEST
++ 
++-* hassysthreads
+++* skip
+++reason = "OCaml 5 only"
+++** hassysthreads
++ include systhreads
++-** bytecode
++-** native
+++*** bytecode
+++*** native
++ 
++ *)
++ 
++diff --git a/testsuite/tests/parallel/tak.ml b/testsuite/tests/parallel/tak.ml
++index a9b6874c4f..bdc4173266 100644
++--- a/testsuite/tests/parallel/tak.ml
+++++ b/testsuite/tests/parallel/tak.ml
++@@ -1,4 +1,6 @@
++ (* TEST
+++   * skip
+++   reason = "OCaml 5 only"
++ *)
++ 
++ (* filling minor heaps in parallel to trigger
++diff --git a/testsuite/tests/parallel/test_c_thread_register.ml b/testsuite/tests/parallel/test_c_thread_register.ml
++index 352424a377..9e2073c4ef 100644
++--- a/testsuite/tests/parallel/test_c_thread_register.ml
+++++ b/testsuite/tests/parallel/test_c_thread_register.ml
++@@ -1,9 +1,11 @@
++ (* TEST
+++   * skip
+++   reason = "OCaml 5 only"
++    modules = "test_c_thread_register_cstubs.c"
++-   * hassysthreads
+++   ** hassysthreads
++    include systhreads
++-   ** bytecode
++-   ** native
+++   *** bytecode
+++   *** native
++ *)
++ 
++ (* spins a external thread from C and register it to the OCaml runtime *)
++diff --git a/testsuite/tests/regression/pr9326/gc_set.ml b/testsuite/tests/regression/pr9326/gc_set.ml
++index 2570aec28e..e9d7dbcd4c 100644
++--- a/testsuite/tests/regression/pr9326/gc_set.ml
+++++ b/testsuite/tests/regression/pr9326/gc_set.ml
++@@ -4,35 +4,32 @@
++ open Gc
++ 
++ let min_heap_sz = 524288 (* 512k *)
++-let space_overhead = 70
++-let stack_limit = 4194304 (* 4M *)
++-let custom_major_ratio = 40
++-let custom_minor_ratio = 99
++-let custom_minor_max_size = 4096
+++let maj_heap_inc = 4194304 (* 4M *)
++ 
++ let _ =
++   let g1 = Gc.get() in
++   (* Do not use { g1 with ... }, so that the code will break if more fields
++      are added to the Gc.control record type *)
++   Gc.set { minor_heap_size = min_heap_sz;
++-           major_heap_increment = g1.major_heap_increment;
++-           space_overhead = space_overhead;
+++           major_heap_increment = maj_heap_inc;
+++           space_overhead = g1.space_overhead;
++            verbose = g1.verbose;
++            max_overhead = g1.max_overhead;
++-           stack_limit = stack_limit;
+++           stack_limit = g1.stack_limit;
++            allocation_policy = g1.allocation_policy;
++            window_size = g1.window_size;
++-           custom_major_ratio = custom_major_ratio;
++-           custom_minor_ratio = custom_minor_ratio;
++-           custom_minor_max_size = custom_minor_max_size };
+++           custom_major_ratio = g1.custom_major_ratio;
+++           custom_minor_ratio = g1.custom_minor_ratio;
+++           custom_minor_max_size = g1.custom_minor_max_size };
++   let g2 = Gc.get() in
++   assert (g2.minor_heap_size = min_heap_sz);
++-  assert (g2.space_overhead = space_overhead);
+++  assert (g2.major_heap_increment = maj_heap_inc);
+++  assert (g2.space_overhead = g1.space_overhead);
++   assert (g2.verbose = g1.verbose);
++   assert (g2.max_overhead = g1.max_overhead);
++-  assert (g2.stack_limit = stack_limit);
+++  assert (g2.stack_limit = g1.stack_limit);
++   assert (g2.allocation_policy = g1.allocation_policy);
++   assert (g2.window_size = g1.window_size);
++-  assert (g2.custom_major_ratio = custom_major_ratio);
++-  assert (g2.custom_minor_ratio = custom_minor_ratio);
++-  assert (g2.custom_minor_max_size = custom_minor_max_size)
+++  assert (g2.custom_major_ratio = g1.custom_major_ratio);
+++  assert (g2.custom_minor_ratio = g1.custom_minor_ratio);
+++  assert (g2.custom_minor_max_size = g1.custom_minor_max_size)
++diff --git a/testsuite/tests/runtime-naked-pointers/cstubs.c b/testsuite/tests/runtime-naked-pointers/cstubs.c
++new file mode 100644
++index 0000000000..e9315f3aea
++--- /dev/null
+++++ b/testsuite/tests/runtime-naked-pointers/cstubs.c
++@@ -0,0 +1,20 @@
+++#include <string.h>
+++#include "caml/mlvalues.h"
+++#include "caml/gc.h"
+++#include "caml/memory.h"
+++
+++static int colors[4] = { Caml_white, Caml_gray, Caml_blue, Caml_black };
+++
+++value make_block(value header_size, value color, value size)
+++{
+++  intnat sz = Nativeint_val(size);
+++  value * p = caml_stat_alloc((1 + sz) * sizeof(value));
+++  p[0] = Make_header(Nativeint_val(header_size), 0, colors[Int_val(color)]);
+++  memset(p + 1, 0x80, sz * sizeof(value));
+++  return (value) (p + 1);
+++}
+++
+++value make_raw_pointer (value v)
+++{
+++  return (value) Nativeint_val(v);
+++}
++diff --git a/testsuite/tests/runtime-naked-pointers/np.ml b/testsuite/tests/runtime-naked-pointers/np.ml
++new file mode 100644
++index 0000000000..1738934ff0
++--- /dev/null
+++++ b/testsuite/tests/runtime-naked-pointers/np.ml
++@@ -0,0 +1,11 @@
+++type color = White | Gray | Blue | Black
+++
+++external make_block: nativeint -> color -> nativeint -> Obj.t
+++         = "make_block"
+++
+++external make_raw_pointer: nativeint -> Obj.t
+++         = "make_raw_pointer"
+++
+++let do_gc root =
+++  Gc.compact();   (* full major + compaction *)
+++  root
++diff --git a/testsuite/tests/runtime-naked-pointers/np1.ml b/testsuite/tests/runtime-naked-pointers/np1.ml
++new file mode 100644
++index 0000000000..be4c677a23
++--- /dev/null
+++++ b/testsuite/tests/runtime-naked-pointers/np1.ml
++@@ -0,0 +1,12 @@
+++(* TEST
+++   modules = "cstubs.c np.ml"
+++   * bytecode
+++   * native
+++*)
+++
+++open Np
+++
+++(* Out-of-heap object with black header is accepted even in no-naked-pointers
+++   mode.  GC doesn't scan black objects. *)
+++
+++let x = do_gc [ make_block 100n Black 100n ]
++diff --git a/testsuite/tests/runtime-naked-pointers/np2.ml b/testsuite/tests/runtime-naked-pointers/np2.ml
++new file mode 100644
++index 0000000000..f24c813c2b
++--- /dev/null
+++++ b/testsuite/tests/runtime-naked-pointers/np2.ml
++@@ -0,0 +1,13 @@
+++(* TEST
+++   modules = "cstubs.c np.ml"
+++   * bytecode
+++   * native
+++*)
+++
+++open Np
+++
+++(* Out-of-heap object with black header is accepted even in no-naked-pointers
+++   mode.  GC doesn't scan black objects.  However, if the size in the
+++   head is crazily big, the naked pointer detector will warn. *)
+++
+++let x = do_gc [ make_block (-1n) Black 100n ]
++diff --git a/testsuite/tests/runtime-naked-pointers/np2.run b/testsuite/tests/runtime-naked-pointers/np2.run
++new file mode 100755
++index 0000000000..c03f6f688d
++--- /dev/null
+++++ b/testsuite/tests/runtime-naked-pointers/np2.run
++@@ -0,0 +1,3 @@
+++#!/bin/sh
+++
+++exec ${test_source_directory}/runtest.sh
++diff --git a/testsuite/tests/runtime-naked-pointers/np3.ml b/testsuite/tests/runtime-naked-pointers/np3.ml
++new file mode 100644
++index 0000000000..d207279df1
++--- /dev/null
+++++ b/testsuite/tests/runtime-naked-pointers/np3.ml
++@@ -0,0 +1,15 @@
+++(* TEST
+++   modules = "cstubs.c np.ml"
+++   * naked_pointers
+++   ** bytecode
+++   ** native
+++*)
+++
+++open Np
+++
+++(* Out-of-heap object with non-black header is OK in naked pointers mode only *)
+++(* Note that the header size can be wrong as it should not be used by the GC *)
+++
+++let x = do_gc [ make_block 10000n White 10n;
+++                make_block 1n Blue 0n;
+++                make_block (-1n) Gray 5n ]
++diff --git a/testsuite/tests/runtime-naked-pointers/np3.run b/testsuite/tests/runtime-naked-pointers/np3.run
++new file mode 100755
++index 0000000000..c03f6f688d
++--- /dev/null
+++++ b/testsuite/tests/runtime-naked-pointers/np3.run
++@@ -0,0 +1,3 @@
+++#!/bin/sh
+++
+++exec ${test_source_directory}/runtest.sh
++diff --git a/testsuite/tests/runtime-naked-pointers/np4.ml b/testsuite/tests/runtime-naked-pointers/np4.ml
++new file mode 100644
++index 0000000000..98966ddffc
++--- /dev/null
+++++ b/testsuite/tests/runtime-naked-pointers/np4.ml
++@@ -0,0 +1,13 @@
+++(* TEST
+++   modules = "cstubs.c np.ml"
+++   * naked_pointers
+++   ** bytecode
+++   ** native
+++*)
+++
+++open Np
+++
+++(* Null pointers and bad pointers outside the heap are OK
+++   in naked pointers mode only *)
+++
+++let x = do_gc [ make_raw_pointer 0n; make_raw_pointer 42n ]
++diff --git a/testsuite/tests/runtime-naked-pointers/np4.run b/testsuite/tests/runtime-naked-pointers/np4.run
++new file mode 100755
++index 0000000000..c03f6f688d
++--- /dev/null
+++++ b/testsuite/tests/runtime-naked-pointers/np4.run
++@@ -0,0 +1,3 @@
+++#!/bin/sh
+++
+++exec ${test_source_directory}/runtest.sh
++diff --git a/testsuite/tests/runtime-naked-pointers/runtest.sh b/testsuite/tests/runtime-naked-pointers/runtest.sh
++new file mode 100755
++index 0000000000..f5d4df561c
++--- /dev/null
+++++ b/testsuite/tests/runtime-naked-pointers/runtest.sh
++@@ -0,0 +1,10 @@
+++#!/bin/sh
+++
+++if grep -q "#define NAKED_POINTERS_CHECKER" ${ocamlsrcdir}/runtime/caml/m.h \
+++&& (echo ${program} | grep -q '\.opt')
+++then
+++  (${program} > ${output}) 2>&1 | grep -q '^Out-of-heap '
+++  exit $?
+++else
+++  exec ${program} > ${output}
+++fi
++diff --git a/testsuite/tests/shapes/comp_units.ml b/testsuite/tests/shapes/comp_units.ml
++index c3417b55b1..8c81ea5042 100644
++--- a/testsuite/tests/shapes/comp_units.ml
+++++ b/testsuite/tests/shapes/comp_units.ml
++@@ -25,7 +25,7 @@ module Mproj = Unit
++ module F (X : sig type t end) = X
++ [%%expect{|
++ {
++- ("F", module) -> Abs<.4>(X/282, X/282<.3>);
+++ ("F", module) -> Abs<.4>(X/277, X/277<.3>);
++  }
++ module F : functor (X : sig type t end) -> sig type t = X.t end
++ |}]
++diff --git a/testsuite/tests/shapes/functors.ml b/testsuite/tests/shapes/functors.ml
++index 0fe6ef7e3e..e0b32367fb 100644
++--- a/testsuite/tests/shapes/functors.ml
+++++ b/testsuite/tests/shapes/functors.ml
++@@ -17,7 +17,7 @@ module type S = sig type t val x : t end
++ module Falias (X : S) = X
++ [%%expect{|
++ {
++- ("Falias", module) -> Abs<.4>(X/284, X/284<.3>);
+++ ("Falias", module) -> Abs<.4>(X/279, X/279<.3>);
++  }
++ module Falias : functor (X : S) -> sig type t = X.t val x : t end
++ |}]
++@@ -29,10 +29,10 @@ end
++ {
++  ("Finclude", module) ->
++      Abs<.6>
++-        (X/288,
+++        (X/283,
++          {
++-          ("t", type) -> X/288<.5> . "t"[type];
++-          ("x", value) -> X/288<.5> . "x"[value];
+++          ("t", type) -> X/283<.5> . "t"[type];
+++          ("x", value) -> X/283<.5> . "x"[value];
++           });
++  }
++ module Finclude : functor (X : S) -> sig type t = X.t val x : t end
++@@ -45,7 +45,7 @@ end
++ [%%expect{|
++ {
++  ("Fredef", module) ->
++-     Abs<.10>(X/295, {
+++     Abs<.10>(X/290, {
++                       ("t", type) -> <.8>;
++                       ("x", value) -> <.9>;
++                       });
++@@ -225,9 +225,9 @@ module Big_to_small1 : B2S = functor (X : Big) -> X
++ {
++  ("Big_to_small1", module) ->
++      Abs<.40>
++-        (shape-var/391,
+++        (shape-var/386,
++          {<<internal>>
++-          ("t", type) -> shape-var/391<<internal>> . "t"[type];
+++          ("t", type) -> shape-var/386<<internal>> . "t"[type];
++           });
++  }
++ module Big_to_small1 : B2S
++@@ -238,9 +238,9 @@ module Big_to_small2 : B2S = functor (X : Big) -> struct include X end
++ {
++  ("Big_to_small2", module) ->
++      Abs<.42>
++-        (shape-var/397,
+++        (shape-var/392,
++          {
++-          ("t", type) -> (shape-var/397<<internal>> . "t"[type])<.41>;
+++          ("t", type) -> (shape-var/392<<internal>> . "t"[type])<.41>;
++           });
++  }
++ module Big_to_small2 : B2S
++diff --git a/testsuite/tests/shapes/open_arg.ml b/testsuite/tests/shapes/open_arg.ml
++index cc58238222..84123baca2 100644
++--- a/testsuite/tests/shapes/open_arg.ml
+++++ b/testsuite/tests/shapes/open_arg.ml
++@@ -22,7 +22,7 @@ end = struct end
++ 
++ [%%expect{|
++ {
++- ("Make", module) -> Abs<.3>(I/284, {
+++ ("Make", module) -> Abs<.3>(I/279, {
++                                      });
++  }
++ module Make : functor (I : sig end) -> sig end
++diff --git a/testsuite/tests/shapes/recmodules.ml b/testsuite/tests/shapes/recmodules.ml
++index 93a3fabacf..305a80a97d 100644
++--- a/testsuite/tests/shapes/recmodules.ml
+++++ b/testsuite/tests/shapes/recmodules.ml
++@@ -44,10 +44,10 @@ end = B
++ [%%expect{|
++ {
++  ("A", module) -> {<.11>
++-                   ("t", type) -> A/307<.11> . "t"[type];
+++                   ("t", type) -> A/302<.11> . "t"[type];
++                    };
++  ("B", module) -> {<.12>
++-                   ("t", type) -> B/308<.12> . "t"[type];
+++                   ("t", type) -> B/303<.12> . "t"[type];
++                    };
++  }
++ module rec A : sig type t = Leaf of B.t end
++@@ -86,13 +86,13 @@ end = Set.Make(A)
++  ("ASet", module) ->
++      {
++       ("compare", value) ->
++-          CU Stdlib . "Set"[module] . "Make"[module](A/329<.19>) .
+++          CU Stdlib . "Set"[module] . "Make"[module](A/324<.19>) .
++           "compare"[value];
++       ("elt", type) ->
++-          CU Stdlib . "Set"[module] . "Make"[module](A/329<.19>) .
+++          CU Stdlib . "Set"[module] . "Make"[module](A/324<.19>) .
++           "elt"[type];
++       ("t", type) ->
++-          CU Stdlib . "Set"[module] . "Make"[module](A/329<.19>) . "t"[type];
+++          CU Stdlib . "Set"[module] . "Make"[module](A/324<.19>) . "t"[type];
++       };
++  }
++ module rec A :
++diff --git a/testsuite/tests/shapes/rotor_example.ml b/testsuite/tests/shapes/rotor_example.ml
++index 465c63afbf..b78757d0e3 100644
++--- a/testsuite/tests/shapes/rotor_example.ml
+++++ b/testsuite/tests/shapes/rotor_example.ml
++@@ -26,8 +26,8 @@ end
++ {
++  ("Pair", module) ->
++      Abs<.9>
++-        (X/284,
++-         Abs(Y/285, {
+++        (X/279,
+++         Abs(Y/280, {
++                      ("t", type) -> <.5>;
++                      ("to_string", value) -> <.6>;
++                      }));
++diff --git a/testsuite/tests/statmemprof/alloc_counts.ml b/testsuite/tests/statmemprof/alloc_counts.ml
++index de0d1e9e49..f8cbb5658d 100644
++--- a/testsuite/tests/statmemprof/alloc_counts.ml
+++++ b/testsuite/tests/statmemprof/alloc_counts.ml
++@@ -1,7 +1,4 @@
++-(* TEST
++-* skip
++-reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
++-*)
+++(* TEST *)
++ module MP = Gc.Memprof
++ 
++ let allocs_by_memprof f =
++diff --git a/testsuite/tests/statmemprof/arrays_in_major.ml b/testsuite/tests/statmemprof/arrays_in_major.ml
++index eb627324ba..78907a18e3 100644
++--- a/testsuite/tests/statmemprof/arrays_in_major.ml
+++++ b/testsuite/tests/statmemprof/arrays_in_major.ml
++@@ -1,7 +1,5 @@
++ (* TEST
++    flags = "-g"
++-   * skip
++-   reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
++ *)
++ 
++ open Gc.Memprof
++diff --git a/testsuite/tests/statmemprof/arrays_in_major.reference b/testsuite/tests/statmemprof/arrays_in_major.reference
++new file mode 100644
++index 0000000000..1f34ad8ec8
++--- /dev/null
+++++ b/testsuite/tests/statmemprof/arrays_in_major.reference
++@@ -0,0 +1,11 @@
+++check_nosample
+++check_counts_full_major
+++check_counts_full_major
+++check_no_nested
+++check_distrib 300 3000 3 0.000010
+++check_distrib 300 3000 1 0.000100
+++check_distrib 300 3000 1 0.010000
+++check_distrib 300 3000 1 0.900000
+++check_distrib 300 300 100000 0.100000
+++check_distrib 300000 300000 30 0.100000
+++OK !
++diff --git a/testsuite/tests/statmemprof/arrays_in_minor.ml b/testsuite/tests/statmemprof/arrays_in_minor.ml
++index 4359642d0e..432f8b1d09 100644
++--- a/testsuite/tests/statmemprof/arrays_in_minor.ml
+++++ b/testsuite/tests/statmemprof/arrays_in_minor.ml
++@@ -1,7 +1,5 @@
++ (* TEST
++    flags = "-g"
++-   * skip
++-   reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
++ *)
++ 
++ open Gc.Memprof
++diff --git a/testsuite/tests/statmemprof/arrays_in_minor.reference b/testsuite/tests/statmemprof/arrays_in_minor.reference
++new file mode 100644
++index 0000000000..1dad91939c
++--- /dev/null
+++++ b/testsuite/tests/statmemprof/arrays_in_minor.reference
++@@ -0,0 +1,11 @@
+++check_nosample
+++check_counts_full_major
+++check_counts_full_major
+++check_no_nested
+++check_distrib 1 250 1000 0.000010
+++check_distrib 1 250 1000 0.000100
+++check_distrib 1 250 1000 0.010000
+++check_distrib 1 250 1000 0.900000
+++check_distrib 1 1 10000000 0.010000
+++check_distrib 250 250 100000 0.100000
+++OK !
++diff --git a/testsuite/tests/statmemprof/blocking_in_callback.ml b/testsuite/tests/statmemprof/blocking_in_callback.ml
++index e1e40f1fb6..00f49cfc74 100644
++--- a/testsuite/tests/statmemprof/blocking_in_callback.ml
+++++ b/testsuite/tests/statmemprof/blocking_in_callback.ml
++@@ -1,8 +1,6 @@
++ (* TEST
++ * hassysthreads
++ include systhreads
++-* skip
++-reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
++ ** bytecode
++ ** native
++ *)
++diff --git a/testsuite/tests/statmemprof/callstacks.ml b/testsuite/tests/statmemprof/callstacks.ml
++index e864a50019..ec5a4199f0 100644
++--- a/testsuite/tests/statmemprof/callstacks.ml
+++++ b/testsuite/tests/statmemprof/callstacks.ml
++@@ -3,15 +3,11 @@
++ 
++    * flat-float-array
++      reference = "${test_source_directory}/callstacks.flat-float-array.reference"
++-   * skip
++-   reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
++    ** native
++    ** bytecode
++ 
++    * no-flat-float-array
++      reference = "${test_source_directory}/callstacks.no-flat-float-array.reference"
++-   * skip
++-   reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
++    ** native
++    ** bytecode
++ *)
++diff --git a/testsuite/tests/statmemprof/comballoc.ml b/testsuite/tests/statmemprof/comballoc.ml
++index 60ca4a0123..22b2547101 100644
++--- a/testsuite/tests/statmemprof/comballoc.ml
+++++ b/testsuite/tests/statmemprof/comballoc.ml
++@@ -1,10 +1,8 @@
++ (* TEST
++    flags = "-g"
++-   * skip
++-   reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
++-   ** bytecode
+++   * bytecode
++      reference = "${test_source_directory}/comballoc.byte.reference"
++-   ** native
+++   * native
++      reference = "${test_source_directory}/comballoc.opt.reference"
++ *)
++ 
++diff --git a/testsuite/tests/statmemprof/custom.ml b/testsuite/tests/statmemprof/custom.ml
++index 41cf902ec8..f0ddfa7eed 100644
++--- a/testsuite/tests/statmemprof/custom.ml
+++++ b/testsuite/tests/statmemprof/custom.ml
++@@ -1,7 +1,4 @@
++-(* TEST
++-* skip
++-reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
++-*)
+++(* TEST *)
++ 
++ open Gc.Memprof
++ 
++diff --git a/testsuite/tests/statmemprof/exception_callback.ml b/testsuite/tests/statmemprof/exception_callback.ml
++index f9f02f690f..e1589372ab 100644
++--- a/testsuite/tests/statmemprof/exception_callback.ml
+++++ b/testsuite/tests/statmemprof/exception_callback.ml
++@@ -1,7 +1,5 @@
++ (* TEST
++    exit_status = "2"
++-   * skip
++-   reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
++ *)
++ 
++ open Gc.Memprof
++diff --git a/testsuite/tests/statmemprof/exception_callback_minor.ml b/testsuite/tests/statmemprof/exception_callback_minor.ml
++index 0bb37782be..f514123276 100644
++--- a/testsuite/tests/statmemprof/exception_callback_minor.ml
+++++ b/testsuite/tests/statmemprof/exception_callback_minor.ml
++@@ -1,7 +1,5 @@
++ (* TEST
++    exit_status = "2"
++-   * skip
++-   reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
++ *)
++ 
++ open Gc.Memprof
++diff --git a/testsuite/tests/statmemprof/intern.ml b/testsuite/tests/statmemprof/intern.ml
++index bebcc3c8ff..bce6f89c5c 100644
++--- a/testsuite/tests/statmemprof/intern.ml
+++++ b/testsuite/tests/statmemprof/intern.ml
++@@ -1,7 +1,5 @@
++ (* TEST
++    flags = "-g"
++-   * skip
++-   reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
++ *)
++ 
++ open Gc.Memprof
++diff --git a/testsuite/tests/statmemprof/intern.reference b/testsuite/tests/statmemprof/intern.reference
++new file mode 100644
++index 0000000000..d83e8d6d50
++--- /dev/null
+++++ b/testsuite/tests/statmemprof/intern.reference
++@@ -0,0 +1,10 @@
+++check_nosample
+++check_counts_full_major
+++check_counts_full_major
+++check_no_nested
+++check_distrib 2 3000 3 0.000010
+++check_distrib 2 3000 1 0.000100
+++check_distrib 2 2000 1 0.010000
+++check_distrib 2 2000 1 0.900000
+++check_distrib 300000 300000 20 0.100000
+++OK !
++diff --git a/testsuite/tests/statmemprof/lists_in_minor.ml b/testsuite/tests/statmemprof/lists_in_minor.ml
++index d08716c71b..ebd434857e 100644
++--- a/testsuite/tests/statmemprof/lists_in_minor.ml
+++++ b/testsuite/tests/statmemprof/lists_in_minor.ml
++@@ -1,7 +1,5 @@
++ (* TEST
++    flags = "-g"
++-   * skip
++-   reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
++ *)
++ 
++ open Gc.Memprof
++diff --git a/testsuite/tests/statmemprof/lists_in_minor.reference b/testsuite/tests/statmemprof/lists_in_minor.reference
++new file mode 100644
++index 0000000000..11cfe0ca12
++--- /dev/null
+++++ b/testsuite/tests/statmemprof/lists_in_minor.reference
++@@ -0,0 +1,8 @@
+++check_distrib 10 1000000 0.010000
+++check_distrib 1000000 10 0.000010
+++check_distrib 1000000 10 0.000100
+++check_distrib 1000000 10 0.001000
+++check_distrib 1000000 10 0.010000
+++check_distrib 100000 10 0.100000
+++check_distrib 100000 10 0.900000
+++OK !
++diff --git a/testsuite/tests/statmemprof/minor_no_postpone.ml b/testsuite/tests/statmemprof/minor_no_postpone.ml
++index 21c8bfb244..fcb94cf81d 100644
++--- a/testsuite/tests/statmemprof/minor_no_postpone.ml
+++++ b/testsuite/tests/statmemprof/minor_no_postpone.ml
++@@ -1,7 +1,5 @@
++ (* TEST
++    modules = "minor_no_postpone_stub.c"
++-   * skip
++-   reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
++ *)
++ 
++ open Gc.Memprof
++diff --git a/testsuite/tests/statmemprof/moved_while_blocking.ml b/testsuite/tests/statmemprof/moved_while_blocking.ml
++index bb8dfc9848..8efc172aea 100644
++--- a/testsuite/tests/statmemprof/moved_while_blocking.ml
+++++ b/testsuite/tests/statmemprof/moved_while_blocking.ml
++@@ -1,8 +1,6 @@
++ (* TEST
++ * hassysthreads
++ include systhreads
++-* skip
++-reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
++ ** bytecode
++ ** native
++ *)
++diff --git a/testsuite/tests/statmemprof/thread_exit_in_callback.ml b/testsuite/tests/statmemprof/thread_exit_in_callback.ml
++index 28e2aabb8b..753f7726f5 100644
++--- a/testsuite/tests/statmemprof/thread_exit_in_callback.ml
+++++ b/testsuite/tests/statmemprof/thread_exit_in_callback.ml
++@@ -1,8 +1,6 @@
++ (* TEST
++ * hassysthreads
++ include systhreads
++-* skip
++-reason = "port stat-mem-prof : https://github.com/ocaml/ocaml/pull/8634"
++ ** bytecode
++ ** native
++ *)
++diff --git a/testsuite/tests/tool-debugger/basic/debuggee.ml b/testsuite/tests/tool-debugger/basic/debuggee.ml
++index 8604edf239..91ad3c21dc 100644
++--- a/testsuite/tests/tool-debugger/basic/debuggee.ml
+++++ b/testsuite/tests/tool-debugger/basic/debuggee.ml
++@@ -2,15 +2,13 @@
++ set foo = "bar"
++ flags += " -g "
++ ocamldebug_script = "${test_source_directory}/input_script"
++-* skip
++-reason = "ocamldebug is broken (#34)"
++-** debugger
++-*** shared-libraries
++-**** setup-ocamlc.byte-build-env
++-***** ocamlc.byte
++-****** check-ocamlc.byte-output
++-******* ocamldebug
++-******** check-program-output
+++* debugger
+++** shared-libraries
+++*** setup-ocamlc.byte-build-env
+++**** ocamlc.byte
+++***** check-ocamlc.byte-output
+++****** ocamldebug
+++******* check-program-output
++ *)
++ 
++ print_endline Sys.argv.(1);;
++diff --git a/testsuite/tests/tool-debugger/dynlink/host.ml b/testsuite/tests/tool-debugger/dynlink/host.ml
++index c445c8acd3..f46ef8a022 100644
++--- a/testsuite/tests/tool-debugger/dynlink/host.ml
+++++ b/testsuite/tests/tool-debugger/dynlink/host.ml
++@@ -7,29 +7,27 @@ libraries = ""
++ flags += " -g "
++ ocamldebug_script = "${test_source_directory}/input_script"
++ 
++-* skip
++-reason = "ocamldebug is broken (#34)"
++-** debugger
++-*** shared-libraries
++-**** setup-ocamlc.byte-build-env
++-***** ocamlc.byte
+++* debugger
+++** shared-libraries
+++*** setup-ocamlc.byte-build-env
+++**** ocamlc.byte
++ module = "host.ml"
++-****** ocamlc.byte
+++***** ocamlc.byte
++ module = "plugin.ml"
++-******* ocamlc.byte
+++****** ocamlc.byte
++ module = ""
++ all_modules = "host.cmo"
++ program = "${test_build_directory}/host.byte"
++ libraries = "dynlink"
++ 
++-******** run
+++******* run
++ output = "host.output"
++-********* check-program-output
+++******** check-program-output
++ reference = "${test_source_directory}/host.reference"
++ 
++-********* ocamldebug
+++******** ocamldebug
++ output = "host.debug.output"
++-********** check-program-output
+++********* check-program-output
++ reference = "${test_source_directory}/host.debug.reference"
++ 
++ *)
++diff --git a/testsuite/tests/tool-debugger/find-artifacts/debuggee.ml b/testsuite/tests/tool-debugger/find-artifacts/debuggee.ml
++index 7c6f00c70f..70aee3ff04 100644
++--- a/testsuite/tests/tool-debugger/find-artifacts/debuggee.ml
+++++ b/testsuite/tests/tool-debugger/find-artifacts/debuggee.ml
++@@ -1,27 +1,25 @@
++ (* TEST
++ ocamldebug_script = "${test_source_directory}/input_script"
++-* skip
++-reason = "ocamldebug is broken (#34)"
++-** debugger
++-*** shared-libraries
++-**** setup-ocamlc.byte-build-env
++-***** script
+++* debugger
+++** shared-libraries
+++*** setup-ocamlc.byte-build-env
+++**** script
++ script = "mkdir out"
++-****** ocamlc.byte
+++***** ocamlc.byte
++ flags = "-g -c"
++ all_modules = "${test_source_directory}/in/blah.ml"
++ program = "out/blah.cmo"
++-******* ocamlc.byte
+++****** ocamlc.byte
++ program = "out/foo.cmo"
++ flags = "-I out -g -c"
++ all_modules = "${test_source_directory}/in/foo.ml"
++-******** ocamlc.byte
+++******* ocamlc.byte
++ all_modules = "out/blah.cmo out/foo.cmo"
++ flags = " -g "
++ program = "debuggee.exe"
++-********* check-ocamlc.byte-output
++-********** ocamldebug
++-*********** check-program-output
+++******** check-ocamlc.byte-output
+++********* ocamldebug
+++********** check-program-output
++ *)
++ 
++ (* This file only contains the specification of how to run the test *)
++diff --git a/testsuite/tests/tool-debugger/module_named_main/main.ml b/testsuite/tests/tool-debugger/module_named_main/main.ml
++index e31c16391e..25eebe7c02 100644
++--- a/testsuite/tests/tool-debugger/module_named_main/main.ml
+++++ b/testsuite/tests/tool-debugger/module_named_main/main.ml
++@@ -1,15 +1,13 @@
++ (* TEST
++ flags += " -g "
++ ocamldebug_script = "${test_source_directory}/input_script"
++-* skip
++-reason = "ocamldebug is broken (#34)"
++-** debugger
++-*** shared-libraries
++-**** setup-ocamlc.byte-build-env
++-***** ocamlc.byte
++-****** check-ocamlc.byte-output
++-******* ocamldebug
++-******** check-program-output
+++* debugger
+++** shared-libraries
+++*** setup-ocamlc.byte-build-env
+++**** ocamlc.byte
+++***** check-ocamlc.byte-output
+++****** ocamldebug
+++******* check-program-output
++ *)
++ 
++ module Submodule = struct
++diff --git a/testsuite/tests/tool-debugger/no_debug_event/noev.ml b/testsuite/tests/tool-debugger/no_debug_event/noev.ml
++index f06c14a117..4eb334ea84 100644
++--- a/testsuite/tests/tool-debugger/no_debug_event/noev.ml
+++++ b/testsuite/tests/tool-debugger/no_debug_event/noev.ml
++@@ -1,30 +1,28 @@
++ (* TEST
++ readonly_files = "a.ml b.ml"
++ ocamldebug_script = "${test_source_directory}/input_script"
++-* skip
++-reason = "ocamldebug is broken (#34)"
++-** debugger
++-*** shared-libraries
++-**** setup-ocamlc.byte-build-env
++-***** ocamlc.byte
+++* debugger
+++** shared-libraries
+++*** setup-ocamlc.byte-build-env
+++**** ocamlc.byte
++ module = "a.ml"
++ flags = "-g -for-pack foo"
++-****** ocamlc.byte
+++***** ocamlc.byte
++ module = ""
++ all_modules = "a.cmo"
++ program = "foo.cmo"
++ flags = "-g -pack"
++-******* ocamlc.byte
+++****** ocamlc.byte
++ module = "b.ml"
++ flags = " -g "
++-******** ocamlc.byte
+++******* ocamlc.byte
++ module = ""
++ flags = " -g "
++ all_modules = "foo.cmo b.cmo"
++ program = "${test_build_directory}/noev.exe"
++-********* check-ocamlc.byte-output
++-********** ocamldebug
++-*********** check-program-output
+++******** check-ocamlc.byte-output
+++********* ocamldebug
+++********** check-program-output
++ *)
++ 
++ (* This file only contains the specification of how to run the test *)
++diff --git a/testsuite/tests/tool-debugger/printer/debuggee.ml b/testsuite/tests/tool-debugger/printer/debuggee.ml
++index b2d6e6e7c5..f22a4bd50f 100644
++--- a/testsuite/tests/tool-debugger/printer/debuggee.ml
+++++ b/testsuite/tests/tool-debugger/printer/debuggee.ml
++@@ -3,17 +3,15 @@ flags += " -g "
++ ocamldebug_script = "${test_source_directory}/input_script"
++ readonly_files = "printer.ml"
++ include debugger
++-* skip
++-reason = "ocamldebug is broken (#34)"
++-** debugger
++-*** shared-libraries
++-**** setup-ocamlc.byte-build-env
++-***** ocamlc.byte
+++* debugger
+++** shared-libraries
+++*** setup-ocamlc.byte-build-env
+++**** ocamlc.byte
++ module = "printer.ml"
++-***** ocamlc.byte
++-****** check-ocamlc.byte-output
++-******* ocamldebug
++-******** check-program-output
+++**** ocamlc.byte
+++***** check-ocamlc.byte-output
+++****** ocamldebug
+++******* check-program-output
++ *)
++ 
++ let f x =
++diff --git a/testsuite/tests/typing-sigsubst/sigsubst.ml b/testsuite/tests/typing-sigsubst/sigsubst.ml
++index 0068e25ae5..5636e9abe2 100644
++--- a/testsuite/tests/typing-sigsubst/sigsubst.ml
+++++ b/testsuite/tests/typing-sigsubst/sigsubst.ml
++@@ -24,11 +24,11 @@ end
++ Line 3, characters 2-36:
++ 3 |   include Comparable with type t = t
++       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
++-Error: Illegal shadowing of included type t/289 by t/294
+++Error: Illegal shadowing of included type t/284 by t/289
++        Line 2, characters 2-19:
++-         Type t/289 came from this include
+++         Type t/284 came from this include
++        Line 3, characters 2-23:
++-         The value print has no valid type if t/289 is shadowed
+++         The value print has no valid type if t/284 is shadowed
++ |}]
++ 
++ module type Sunderscore
\ No newline at end of file
diff --git a/lambda/matching.ml b/lambda/matching.ml
index 43bccf6e2c..e404f6b040 100644
--- a/lambda/matching.ml
+++ b/lambda/matching.ml
@@ -1877,7 +1877,11 @@ let get_mod_field modname field =
 
 let code_force_lazy_block = get_mod_field "CamlinternalLazy" "force_lazy_block"
 
+(* BACKPORT_BEGIN
 let code_force_lazy = get_mod_field "CamlinternalLazy" "force_gen"
+*)
+let code_force_lazy = get_mod_field "CamlinternalLazy" "force"
+(* BACKPORT END *)
 
 (* inline_lazy_force inlines the beginning of the code of Lazy.force. When
    the value argument is tagged as:
@@ -1893,10 +1897,15 @@ let inline_lazy_force_cond arg loc =
   let idarg = Ident.create_local "lzarg" in
   let varg = Lvar idarg in
   let tag = Ident.create_local "tag" in
+(* BACKPORT BEGIN *)
+  let tag_var = Lvar tag in
+(* BACKPORT END *)
   let force_fun = Lazy.force code_force_lazy_block in
+(* BACKPORT
   let test_tag t =
     Lprim(Pintcomp Ceq, [Lvar tag; Lconst(Const_base(Const_int t))], loc)
   in
+*)
 
   Llet
     ( Strict,
@@ -1909,16 +1918,32 @@ let inline_lazy_force_cond arg loc =
           tag,
           Lprim (Pccall prim_obj_tag, [ varg ], loc),
           Lifthenelse
+(* BACKPORT BEGIN
             ( (* if (tag == Obj.forward_tag) then varg.(0) else ... *)
               test_tag Obj.forward_tag,
               Lprim (Pfield (0, Pointer, Mutable), [ varg ], loc),
+*)
+            ( Lprim
+                ( Pintcomp Ceq,
+                  [ tag_var; Lconst (Const_base (Const_int Obj.forward_tag)) ],
+                  loc ),
+              Lprim (Pfield (0, Pointer, Mutable), [ varg ], loc),
+(* BACKPORT END *)
               Lifthenelse
+(* BACKPORT BEGIN *)
+                ( Lprim
+                    ( Pintcomp Ceq,
+                      [ tag_var; Lconst (Const_base (Const_int Obj.lazy_tag)) ],
+                      loc ),
+(* BACKPORT END *)
+(* BACKPORT
                 (
                   (* ... if tag == Obj.lazy_tag || tag == Obj.forcing_tag then
                          Lazy.force varg
                        else ... *)
                   Lprim (Psequor,
                        [test_tag Obj.lazy_tag; test_tag Obj.forcing_tag], loc),
+*)
                   Lapply
                     { ap_tailcall = Default_tailcall;
                       ap_loc = loc;
@@ -1943,11 +1968,25 @@ let inline_lazy_force_switch arg loc =
         ( Lprim (Pisint, [ varg ], loc),
           varg,
           Lswitch
+(* BACKPORT BEGIN
             ( Lprim (Pccall prim_obj_tag, [ varg ], loc),
               { sw_numblocks = 0;
                 sw_blocks = [];
                 sw_numconsts = 256;
+*)
+            ( varg,
+              { sw_numconsts = 0;
+                sw_consts = [];
+                sw_numblocks = 256;
+(* BACKPORT END *)
                 (* PR#6033 - tag ranges from 0 to 255 *)
+(* BACKPORT BEGIN *)
+                sw_blocks =
+                  [ (Obj.forward_tag,
+                     Lprim (Pfield (0, Pointer, Mutable), [ varg ], loc));
+                    ( Obj.lazy_tag,
+(* BACKPORT END *)
+(* BACKPORT
                 sw_consts =
                   [ (Obj.forward_tag, Lprim (Pfield(0, Pointer, Mutable),
                                              [ varg ], loc));
@@ -1963,6 +2002,7 @@ let inline_lazy_force_switch arg loc =
                         } );
 
                     (Obj.forcing_tag,
+*)
                       Lapply
                         { ap_tailcall = Default_tailcall;
                           ap_loc = loc;
@@ -1986,7 +2026,11 @@ let inline_lazy_force arg loc =
       { ap_tailcall = Default_tailcall;
         ap_loc = loc;
         ap_func = Lazy.force code_force_lazy;
+(* BACKPORT BEGIN
         ap_args = [ Lconst (Const_base (Const_int 0)); arg ];
+*)
+        ap_args = [ arg ];
+(* BACKPORT END *)
         ap_inlined = Default_inline;
         ap_specialised = Default_specialise
       }
diff --git a/manual/src/library/stdlib-blurb.etex b/manual/src/library/stdlib-blurb.etex
index f175b0efa1..6772c5f3bb 100644
--- a/manual/src/library/stdlib-blurb.etex
+++ b/manual/src/library/stdlib-blurb.etex
@@ -130,10 +130,10 @@ be called from C \\
 \stddocitem{Callback}{registering OCaml values with the C runtime}
 \stddocitem{Char}{character operations}
 \stddocitem{Complex}{complex numbers}
-\stddocitem{Condition}{condition variables to synchronize between threads}
-\stddocitem{Domain}{Domain spawn/join and domain local variables}
+%\stddocitem{Condition}{condition variables to synchronize between threads}
+%\stddocitem{Domain}{Domain spawn/join and domain local variables}
 \stddocitem{Digest}{MD5 message digest}
-\stddocitem{EffectHandlers}{deep and shallow effect handlers}
+%\stddocitem{EffectHandlers}{deep and shallow effect handlers}
 \stddocitem{Either}{either values}
 \stddocitem{Ephemeron}{Ephemerons and weak hash table}
 \stddocitem{Filename}{operations on file names}
@@ -154,7 +154,7 @@ be called from C \\
 \stddocitem{Map}{association tables over ordered types}
 \stddocitem{Marshal}{marshaling of data structures}
 \stddocitem{MoreLabels}{include modules \texttt{Hashtbl}, \texttt{Map} and \texttt{Set} with labels}
-\stddocitem{Mutex}{locks for mutual exclusion}
+%\stddocitem{Mutex}{locks for mutual exclusion}
 \stddocitem{Nativeint}{processor-native integers}
 \stddocitem{Oo}{object-oriented extension}
 \stddocitem{Option}{option values}
@@ -168,7 +168,7 @@ be called from C \\
 \stddocitem{Scanf}{formatted input functions}
 \stddocitem{Seq}{functional iterators}
 \stddocitem{Set}{sets over ordered types}
-\stddocitem{Semaphore}{semaphores, another thread synchronization mechanism}
+%\stddocitem{Semaphore}{semaphores, another thread synchronization mechanism}
 \stddocitem{Stack}{last-in first-out stacks}
 \stddocitem{StdLabels}{include modules \texttt{Array}, \texttt{List} and \texttt{String} with labels}
 \stddocitem{Stream}{streams and parsers}
diff --git a/otherlibs/dynlink/dynlink_common.ml b/otherlibs/dynlink/dynlink_common.ml
index 3f5933aeb0..d8374a5b72 100644
--- a/otherlibs/dynlink/dynlink_common.ml
+++ b/otherlibs/dynlink/dynlink_common.ml
@@ -23,9 +23,11 @@ open! Dynlink_compilerlibs
 (* Dynlink is only allowed on the main domain.
    Entrypoints to public functions should check for this. *)
 let is_dynlink_allowed () =
+(* BACKPORT
   if not (Domain.is_main_domain ()) then
     failwith "Dynlink can only be called from the main domain."
   else
+*)
     ()
 
 module String = struct
diff --git a/otherlibs/str/str.ml b/otherlibs/str/str.ml
index 5be37c18fe..759d16f100 100644
--- a/otherlibs/str/str.ml
+++ b/otherlibs/str/str.ml
@@ -595,7 +595,18 @@ external re_search_forward: regexp -> string -> int -> int array
 external re_search_backward: regexp -> string -> int -> int array
      = "re_search_backward"
 
+(* BACKPORT BEGIN
 let last_search_result_key = Domain.DLS.new_key (fun () -> [||])
+*)
+let last_search_result_key = ref [||]
+
+module Domain = struct
+  module DLS = struct
+    let get = (!)
+    let set = (:=)
+  end
+end
+(* BACKPORT END *)
 
 let string_match re s pos =
   let res = re_string_match re s pos in
diff --git a/otherlibs/systhreads/.depend b/otherlibs/systhreads/.depend
index 68f4b2f351..3bd0a0078f 100644
--- a/otherlibs/systhreads/.depend
+++ b/otherlibs/systhreads/.depend
@@ -1,8 +1,34 @@
+condition.cmo : \
+    mutex.cmi \
+    condition.cmi
+condition.cmx : \
+    mutex.cmx \
+    condition.cmi
+condition.cmi : \
+    mutex.cmi
 event.cmo : \
+    mutex.cmi \
+    condition.cmi \
     event.cmi
 event.cmx : \
+    mutex.cmx \
+    condition.cmx \
     event.cmi
 event.cmi :
+mutex.cmo : \
+    mutex.cmi
+mutex.cmx : \
+    mutex.cmi
+mutex.cmi :
+semaphore.cmo : \
+    mutex.cmi \
+    condition.cmi \
+    semaphore.cmi
+semaphore.cmx : \
+    mutex.cmx \
+    condition.cmx \
+    semaphore.cmi
+semaphore.cmi :
 thread.cmo : \
     thread.cmi
 thread.cmx : \
diff --git a/otherlibs/systhreads/Makefile b/otherlibs/systhreads/Makefile
index 4e8a53257f..82279456db 100644
--- a/otherlibs/systhreads/Makefile
+++ b/otherlibs/systhreads/Makefile
@@ -50,12 +50,14 @@ LIBNAME=threads
 BYTECODE_C_OBJS=st_stubs.b.$(O)
 NATIVECODE_C_OBJS=st_stubs.n.$(O)
 
-THREADS_SOURCES = thread.ml event.ml threadUnix.ml
+THREADS_SOURCES = thread.ml mutex.ml condition.ml event.ml threadUnix.ml \
+  semaphore.ml
 
 THREADS_BCOBJS = $(THREADS_SOURCES:.ml=.cmo)
 THREADS_NCOBJS = $(THREADS_SOURCES:.ml=.cmx)
 
-MLIFILES=thread.mli event.mli threadUnix.mli
+MLIFILES=thread.mli mutex.mli condition.mli event.mli threadUnix.mli \
+  semaphore.mli
 
 CMIFILES=$(MLIFILES:.mli=.cmi)
 
diff --git a/otherlibs/systhreads/condition.ml b/otherlibs/systhreads/condition.ml
new file mode 100644
index 0000000000..9a014528ab
--- /dev/null
+++ b/otherlibs/systhreads/condition.ml
@@ -0,0 +1,20 @@
+(**************************************************************************)
+(*                                                                        *)
+(*                                 OCaml                                  *)
+(*                                                                        *)
+(*   Xavier Leroy and Pascal Cuoq, projet Cristal, INRIA Rocquencourt     *)
+(*                                                                        *)
+(*   Copyright 1995 Institut National de Recherche en Informatique et     *)
+(*     en Automatique.                                                    *)
+(*                                                                        *)
+(*   All rights reserved.  This file is distributed under the terms of    *)
+(*   the GNU Lesser General Public License version 2.1, with the          *)
+(*   special exception on linking described in the file LICENSE.          *)
+(*                                                                        *)
+(**************************************************************************)
+
+type t
+external create: unit -> t = "caml_condition_new"
+external wait: t -> Mutex.t -> unit = "caml_condition_wait"
+external signal: t -> unit = "caml_condition_signal"
+external broadcast: t -> unit = "caml_condition_broadcast"
diff --git a/otherlibs/systhreads/condition.mli b/otherlibs/systhreads/condition.mli
new file mode 100644
index 0000000000..36c71fc818
--- /dev/null
+++ b/otherlibs/systhreads/condition.mli
@@ -0,0 +1,53 @@
+(**************************************************************************)
+(*                                                                        *)
+(*                                 OCaml                                  *)
+(*                                                                        *)
+(*          Xavier Leroy and Damien Doligez, INRIA Rocquencourt           *)
+(*                                                                        *)
+(*   Copyright 1996 Institut National de Recherche en Informatique et     *)
+(*     en Automatique.                                                    *)
+(*                                                                        *)
+(*   All rights reserved.  This file is distributed under the terms of    *)
+(*   the GNU Lesser General Public License version 2.1, with the          *)
+(*   special exception on linking described in the file LICENSE.          *)
+(*                                                                        *)
+(**************************************************************************)
+
+(** Condition variables to synchronize between threads.
+
+   Condition variables are used when one thread wants to wait until another
+   thread has finished doing something: the former thread 'waits' on the
+   condition variable, the latter thread 'signals' the condition when it
+   is done. Condition variables should always be protected by a mutex.
+   The typical use is (if [D] is a shared data structure, [m] its mutex,
+   and [c] is a condition variable):
+   {[
+     Mutex.lock m;
+     while (* some predicate P over D is not satisfied *) do
+       Condition.wait c m
+     done;
+     (* Modify D *)
+     if (* the predicate P over D is now satisfied *) then Condition.signal c;
+     Mutex.unlock m
+   ]}
+*)
+
+type t
+(** The type of condition variables. *)
+
+val create : unit -> t
+(** Return a new condition variable. *)
+
+val wait : t -> Mutex.t -> unit
+(** [wait c m] atomically unlocks the mutex [m] and suspends the
+   calling process on the condition variable [c]. The process will
+   restart after the condition variable [c] has been signalled.
+   The mutex [m] is locked again before [wait] returns. *)
+
+val signal : t -> unit
+(** [signal c] restarts one of the processes waiting on the
+   condition variable [c]. *)
+
+val broadcast : t -> unit
+(** [broadcast c] restarts all processes waiting on the
+   condition variable [c]. *)
diff --git a/otherlibs/systhreads/mutex.ml b/otherlibs/systhreads/mutex.ml
new file mode 100644
index 0000000000..836109e761
--- /dev/null
+++ b/otherlibs/systhreads/mutex.ml
@@ -0,0 +1,20 @@
+(**************************************************************************)
+(*                                                                        *)
+(*                                 OCaml                                  *)
+(*                                                                        *)
+(*           Xavier Leroy and Pascal Cuoq, INRIA Rocquencourt             *)
+(*                                                                        *)
+(*   Copyright 1995 Institut National de Recherche en Informatique et     *)
+(*     en Automatique.                                                    *)
+(*                                                                        *)
+(*   All rights reserved.  This file is distributed under the terms of    *)
+(*   the GNU Lesser General Public License version 2.1, with the          *)
+(*   special exception on linking described in the file LICENSE.          *)
+(*                                                                        *)
+(**************************************************************************)
+
+type t
+external create: unit -> t = "caml_mutex_new"
+external lock: t -> unit = "caml_mutex_lock"
+external try_lock: t -> bool = "caml_mutex_try_lock"
+external unlock: t -> unit = "caml_mutex_unlock"
diff --git a/otherlibs/systhreads/mutex.mli b/otherlibs/systhreads/mutex.mli
new file mode 100644
index 0000000000..70a67ce408
--- /dev/null
+++ b/otherlibs/systhreads/mutex.mli
@@ -0,0 +1,60 @@
+(**************************************************************************)
+(*                                                                        *)
+(*                                 OCaml                                  *)
+(*                                                                        *)
+(*          Xavier Leroy and Damien Doligez, INRIA Rocquencourt           *)
+(*                                                                        *)
+(*   Copyright 1996 Institut National de Recherche en Informatique et     *)
+(*     en Automatique.                                                    *)
+(*                                                                        *)
+(*   All rights reserved.  This file is distributed under the terms of    *)
+(*   the GNU Lesser General Public License version 2.1, with the          *)
+(*   special exception on linking described in the file LICENSE.          *)
+(*                                                                        *)
+(**************************************************************************)
+
+(** Locks for mutual exclusion.
+
+   Mutexes (mutual-exclusion locks) are used to implement critical sections
+   and protect shared mutable data structures against concurrent accesses.
+   The typical use is (if [m] is the mutex associated with the data structure
+   [D]):
+   {[
+     Mutex.lock m;
+     (* Critical section that operates over D *);
+     Mutex.unlock m
+   ]}
+*)
+
+type t
+(** The type of mutexes. *)
+
+val create : unit -> t
+(** Return a new mutex. *)
+
+val lock : t -> unit
+(** Lock the given mutex. Only one thread can have the mutex locked
+   at any time. A thread that attempts to lock a mutex already locked
+   by another thread will suspend until the other thread unlocks
+   the mutex.
+
+   @raise Sys_error if the mutex is already locked by the thread calling
+   {!Mutex.lock}.
+
+   @before 4.12 {!Sys_error} was not raised for recursive locking
+   (platform-dependent behaviour) *)
+
+val try_lock : t -> bool
+(** Same as {!Mutex.lock}, but does not suspend the calling thread if
+   the mutex is already locked: just return [false] immediately
+   in that case. If the mutex is unlocked, lock it and
+   return [true]. *)
+
+val unlock : t -> unit
+(** Unlock the given mutex. Other threads suspended trying to lock
+   the mutex will restart.  The mutex must have been previously locked
+   by the thread that calls {!Mutex.unlock}.
+   @raise Sys_error if the mutex is unlocked or was locked by another thread.
+
+   @before 4.12 {!Sys_error} was not raised when unlocking an unlocked mutex
+   or when unlocking a mutex from a different thread. *)
diff --git a/otherlibs/systhreads/semaphore.ml b/otherlibs/systhreads/semaphore.ml
new file mode 100644
index 0000000000..e4fa4181a0
--- /dev/null
+++ b/otherlibs/systhreads/semaphore.ml
@@ -0,0 +1,86 @@
+(**************************************************************************)
+(*                                                                        *)
+(*                                 OCaml                                  *)
+(*                                                                        *)
+(*          Xavier Leroy, Collège de France and INRIA Paris               *)
+(*                                                                        *)
+(*   Copyright 2020 Institut National de Recherche en Informatique et     *)
+(*     en Automatique.                                                    *)
+(*                                                                        *)
+(*   All rights reserved.  This file is distributed under the terms of    *)
+(*   the GNU Lesser General Public License version 2.1, with the          *)
+(*   special exception on linking described in the file LICENSE.          *)
+(*                                                                        *)
+(**************************************************************************)
+
+(** Semaphores *)
+
+type sem = {
+  mut: Mutex.t;                         (* protects [v] *)
+  mutable v: int;                       (* the current value *)
+  nonzero: Condition.t                  (* signaled when [v > 0] *)
+}
+
+module Counting = struct
+
+type t = sem
+
+let make v =
+  if v < 0 then invalid_arg "Semaphore.Counting.init: wrong initial value";
+  { mut = Mutex.create(); v; nonzero = Condition.create() }
+
+let release s =
+  Mutex.lock s.mut;
+  if s.v < max_int then begin
+    s.v <- s.v + 1;
+    Condition.signal s.nonzero;
+    Mutex.unlock s.mut
+  end else begin
+    Mutex.unlock s.mut;
+    raise (Sys_error "Semaphore.Counting.release: overflow")
+  end
+
+let acquire s =
+  Mutex.lock s.mut;
+  while s.v = 0 do Condition.wait s.nonzero s.mut done;
+  s.v <- s.v - 1;
+  Mutex.unlock s.mut
+
+let try_acquire s =
+  Mutex.lock s.mut;
+  let ret = if s.v = 0 then false else (s.v <- s.v - 1; true) in
+  Mutex.unlock s.mut;
+  ret
+
+let get_value s = s.v
+
+end
+
+module Binary = struct
+
+type t = sem
+
+let make b =
+  { mut = Mutex.create();
+    v = if b then 1 else 0;
+    nonzero = Condition.create() }
+
+let release s =
+  Mutex.lock s.mut;
+  s.v <- 1;
+  Condition.signal s.nonzero;
+  Mutex.unlock s.mut
+
+let acquire s =
+  Mutex.lock s.mut;
+  while s.v = 0 do Condition.wait s.nonzero s.mut done;
+  s.v <- 0;
+  Mutex.unlock s.mut
+
+let try_acquire s =
+  Mutex.lock s.mut;
+  let ret = if s.v = 0 then false else (s.v <- 0; true) in
+  Mutex.unlock s.mut;
+  ret
+
+end
diff --git a/otherlibs/systhreads/semaphore.mli b/otherlibs/systhreads/semaphore.mli
new file mode 100644
index 0000000000..3a62747829
--- /dev/null
+++ b/otherlibs/systhreads/semaphore.mli
@@ -0,0 +1,140 @@
+(**************************************************************************)
+(*                                                                        *)
+(*                                 OCaml                                  *)
+(*                                                                        *)
+(*          Xavier Leroy, Collège de France and INRIA Paris               *)
+(*                                                                        *)
+(*   Copyright 2020 Institut National de Recherche en Informatique et     *)
+(*     en Automatique.                                                    *)
+(*                                                                        *)
+(*   All rights reserved.  This file is distributed under the terms of    *)
+(*   the GNU Lesser General Public License version 2.1, with the          *)
+(*   special exception on linking described in the file LICENSE.          *)
+(*                                                                        *)
+(**************************************************************************)
+
+(** Semaphores
+
+  A semaphore is a thread synchronization device that can be used to
+  control access to a shared resource.
+
+  Two flavors of semaphores are provided: counting semaphores and
+  binary semaphores.
+
+  @since 4.12 *)
+
+(** {2 Counting semaphores} *)
+
+(**
+  A counting semaphore is a counter that can be accessed concurrently
+  by several threads.  The typical use is to synchronize producers and
+  consumers of a resource by counting how many units of the resource
+  are available.
+
+  The two basic operations on semaphores are:
+- "release" (also called "V", "post", "up", and "signal"), which
+  increments the value of the counter.  This corresponds to producing
+  one more unit of the shared resource and making it available to others.
+- "acquire" (also called "P", "wait", "down", and "pend"), which
+  waits until the counter is greater than zero and decrements it.
+  This corresponds to consuming one unit of the shared resource.
+
+  @since 4.12 *)
+
+module Counting : sig
+
+type t
+(** The type of counting semaphores. *)
+
+val make : int -> t
+(** [make n] returns a new counting semaphore, with initial value [n].
+    The initial value [n] must be nonnegative.
+
+    @raise Invalid_argument if [n < 0]
+*)
+
+val release : t -> unit
+(** [release s] increments the value of semaphore [s].
+    If other threads are waiting on [s], one of them is restarted.
+    If the current value of [s] is equal to [max_int], the value of
+    the semaphore is unchanged and a [Sys_error] exception is raised
+    to signal overflow.
+
+    @raise Sys_error if the value of the semaphore would overflow [max_int]
+*)
+
+val acquire : t -> unit
+(** [acquire s] blocks the calling thread until the value of semaphore [s]
+    is not zero, then atomically decrements the value of [s] and returns.
+*)
+
+val try_acquire : t -> bool
+(** [try_acquire s] immediately returns [false] if the value of semaphore [s]
+    is zero.  Otherwise, the value of [s] is atomically decremented
+    and [try_acquire s] returns [true].
+*)
+
+val get_value : t -> int
+(** [get_value s] returns the current value of semaphore [s].
+    The current value can be modified at any time by concurrent
+    {!release} and {!acquire} operations.  Hence, the [get_value]
+    operation is racy, and its result should only be used for debugging
+    or informational messages.
+*)
+
+end
+
+(** {2 Binary semaphores} *)
+
+(** Binary semaphores are a variant of counting semaphores
+    where semaphores can only take two values, 0 and 1.
+
+    A binary semaphore can be used to control access to a single
+    shared resource, with value 1 meaning "resource is available" and
+    value 0 meaning "resource is unavailable".
+
+    The "release" operation of a binary semaphore sets its value to 1,
+    and "acquire" waits until the value is 1 and sets it to 0.
+
+    A binary semaphore can be used instead of a mutex (see module
+    {!Mutex}) when the mutex discipline (of unlocking the mutex from the
+    thread that locked it) is too restrictive.  The "acquire" operation
+    corresponds to locking the mutex, and the "release" operation to
+    unlocking it, but "release" can be performed in a thread different
+    than the one that performed the "acquire".  Likewise, it is safe
+    to release a binary semaphore that is already available.
+
+    @since 4.12
+*)
+
+module Binary : sig
+
+type t
+(** The type of binary semaphores. *)
+
+val make : bool -> t
+(** [make b] returns a new binary semaphore.
+    If [b] is [true], the initial value of the semaphore is 1, meaning
+    "available".  If [b] is [false], the initial value of the
+    semaphore is 0, meaning "unavailable".
+*)
+
+val release : t -> unit
+(** [release s] sets the value of semaphore [s] to 1, putting it in the
+    "available" state.  If other threads are waiting on [s], one of them is
+    restarted.
+*)
+
+val acquire : t -> unit
+(** [acquire s] blocks the calling thread until the semaphore [s]
+    has value 1 (is available), then atomically sets it to 0
+    and returns.
+*)
+
+val try_acquire : t -> bool
+(** [try_acquire s] immediately returns [false] if the semaphore [s]
+    has value 0.  If [s] has value 1, its value is atomically set to 0
+    and [try_acquire s] returns [true].
+*)
+
+end
diff --git a/otherlibs/systhreads/thread.ml b/otherlibs/systhreads/thread.ml
index 3e507f63b6..85d7e199c4 100644
--- a/otherlibs/systhreads/thread.ml
+++ b/otherlibs/systhreads/thread.ml
@@ -18,8 +18,10 @@
 type t
 
 external thread_initialize : unit -> unit = "caml_thread_initialize"
+(* BACKPORT
 external thread_initialize_domain : unit -> unit =
             "caml_thread_initialize_domain"
+*)
 external thread_cleanup : unit -> unit = "caml_thread_cleanup"
 external thread_new : (unit -> unit) -> t = "caml_thread_new"
 external thread_uncaught_exception : exn -> unit =
@@ -86,7 +88,9 @@ let preempt_signal =
 
 let () =
   Sys.set_signal preempt_signal (Sys.Signal_handle preempt);
+(* BACKPORT
   Domain.at_startup thread_initialize_domain;
+*)
   thread_initialize ();
   Callback.register "Thread.at_shutdown" (fun () ->
     thread_cleanup();
diff --git a/otherlibs/unix/fork.c b/otherlibs/unix/fork.c
index 6367f61aa8..7f2beca3af 100644
--- a/otherlibs/unix/fork.c
+++ b/otherlibs/unix/fork.c
@@ -25,15 +25,19 @@
 CAMLprim value unix_fork(value unit)
 {
   int ret;
+#if 0 /* BACKPORT */
   if (caml_domain_is_multicore()) {
     caml_failwith
       ("Unix.fork may not be called while other domains were created");
   }
+#endif
 
   CAML_EV_FLUSH();
 
   ret = fork();
+#if 0 /* BACKPORT */
   if (ret == 0) caml_atfork_hook();
+#endif
   if (ret == -1) uerror("fork", Nothing);
 
   CAML_EVENTLOG_DO({
diff --git a/otherlibs/unix/signals.c b/otherlibs/unix/signals.c
index e1b516bd28..9b8f1baa7f 100644
--- a/otherlibs/unix/signals.c
+++ b/otherlibs/unix/signals.c
@@ -49,9 +49,16 @@ static value encode_sigset(sigset_t * set)
   Begin_root(res)
     for (i = 1; i < NSIG; i++)
       if (sigismember(set, i) > 0) {
+/* BACKPORT BEGIN */
+        value newcons = caml_alloc_small(2, 0);
+        Field(newcons, 0) = Val_int(caml_rev_convert_signal_number(i));
+        Field(newcons, 1) = res;
+/* BACKPORT END */
+#if 0 /* BACKPORT */
         value newcons = caml_alloc_2(0,
           Val_int(caml_rev_convert_signal_number(i)),
           res);
+#endif
         res = newcons;
       }
   End_roots();
@@ -69,7 +76,11 @@ CAMLprim value unix_sigprocmask(value vaction, value vset)
   how = sigprocmask_cmd[Int_val(vaction)];
   decode_sigset(vset, &set);
   caml_enter_blocking_section();
+#if 0 /* BACKPORT BEGIN */
   retcode = sigprocmask(how, &set, &oldset);
+#endif
+  retcode = caml_sigmask_hook(how, &set, &oldset);
+/* BACKPORT END */
   caml_leave_blocking_section();
   /* Run any handlers for just-unmasked pending signals */
   caml_process_pending_signals();
@@ -83,7 +94,11 @@ CAMLprim value unix_sigpending(value unit)
   int i;
   if (sigpending(&pending) == -1) uerror("sigpending", Nothing);
   for (i = 1; i < NSIG; i++)
+#if 0 /* BACKPORT BEGIN */
     if(atomic_load_explicit(&caml_pending_signals[i], memory_order_seq_cst))
+#endif
+    if(caml_pending_signals[i])
+/* BACKPORT END */
       sigaddset(&pending, i);
   return encode_sigset(&pending);
 }
diff --git a/otherlibs/unix/unixsupport.h b/otherlibs/unix/unixsupport.h
index fe345466de..e9a1d2a31b 100644
--- a/otherlibs/unix/unixsupport.h
+++ b/otherlibs/unix/unixsupport.h
@@ -57,4 +57,8 @@ extern void unix_clear_cloexec(int fd, char * cmdname, value arg);
 
 #define EXECV_CAST
 
+/* BACKPORT BEGIN */
+#define caml_process_pending_signals caml_process_pending_actions
+/* BACKPORT END */
+
 #endif /* CAML_UNIXSUPPORT_H */
diff --git a/stdlib/.depend b/stdlib/.depend
index 08a3866219..5202bf7793 100644
--- a/stdlib/.depend
+++ b/stdlib/.depend
@@ -193,14 +193,6 @@ stdlib__Complex.cmo : complex.ml \
 stdlib__Complex.cmx : complex.ml \
     stdlib__Complex.cmi
 stdlib__Complex.cmi : complex.mli
-stdlib__Condition.cmo : condition.ml \
-    stdlib__Mutex.cmi \
-    stdlib__Condition.cmi
-stdlib__Condition.cmx : condition.ml \
-    stdlib__Mutex.cmx \
-    stdlib__Condition.cmi
-stdlib__Condition.cmi : condition.mli \
-    stdlib__Mutex.cmi
 stdlib__Digest.cmo : digest.ml \
     stdlib__String.cmi \
     stdlib__Char.cmi \
@@ -212,33 +204,6 @@ stdlib__Digest.cmx : digest.ml \
     stdlib__Bytes.cmx \
     stdlib__Digest.cmi
 stdlib__Digest.cmi : digest.mli
-stdlib__Domain.cmo : domain.ml \
-    stdlib__Sys.cmi \
-    stdlib.cmi \
-    stdlib__Obj.cmi \
-    stdlib__Mutex.cmi \
-    stdlib__Atomic.cmi \
-    stdlib__Array.cmi \
-    stdlib__Domain.cmi
-stdlib__Domain.cmx : domain.ml \
-    stdlib__Sys.cmx \
-    stdlib.cmx \
-    stdlib__Obj.cmx \
-    stdlib__Mutex.cmx \
-    stdlib__Atomic.cmx \
-    stdlib__Array.cmx \
-    stdlib__Domain.cmi
-stdlib__Domain.cmi : domain.mli
-stdlib__EffectHandlers.cmo : effectHandlers.ml \
-    stdlib__Printexc.cmi \
-    stdlib__Obj.cmi \
-    stdlib__EffectHandlers.cmi
-stdlib__EffectHandlers.cmx : effectHandlers.ml \
-    stdlib__Printexc.cmx \
-    stdlib__Obj.cmx \
-    stdlib__EffectHandlers.cmi
-stdlib__EffectHandlers.cmi : effectHandlers.mli \
-    stdlib__Printexc.cmi
 stdlib__Either.cmo : either.ml \
     stdlib__Either.cmi
 stdlib__Either.cmx : either.ml \
@@ -275,7 +240,7 @@ stdlib__Filename.cmo : filename.ml \
     stdlib__Random.cmi \
     stdlib__Printf.cmi \
     stdlib__List.cmi \
-    stdlib__Domain.cmi \
+    stdlib__Lazy.cmi \
     stdlib__Buffer.cmi \
     stdlib__Filename.cmi
 stdlib__Filename.cmx : filename.ml \
@@ -284,7 +249,7 @@ stdlib__Filename.cmx : filename.ml \
     stdlib__Random.cmx \
     stdlib__Printf.cmx \
     stdlib__List.cmx \
-    stdlib__Domain.cmx \
+    stdlib__Lazy.cmx \
     stdlib__Buffer.cmx \
     stdlib__Filename.cmi
 stdlib__Filename.cmi : filename.mli
@@ -311,8 +276,8 @@ stdlib__Format.cmo : format.ml \
     stdlib__Queue.cmi \
     stdlib__List.cmi \
     stdlib__Int.cmi \
+    stdlib__Fun.cmi \
     stdlib__Either.cmi \
-    stdlib__Domain.cmi \
     camlinternalFormatBasics.cmi \
     camlinternalFormat.cmi \
     stdlib__Bytes.cmi \
@@ -326,8 +291,8 @@ stdlib__Format.cmx : format.ml \
     stdlib__Queue.cmx \
     stdlib__List.cmx \
     stdlib__Int.cmx \
+    stdlib__Fun.cmx \
     stdlib__Either.cmx \
-    stdlib__Domain.cmx \
     camlinternalFormatBasics.cmx \
     camlinternalFormat.cmx \
     stdlib__Bytes.cmx \
@@ -337,7 +302,6 @@ stdlib__Format.cmi : format.mli \
     stdlib.cmi \
     stdlib__Seq.cmi \
     stdlib__Either.cmi \
-    stdlib__Domain.cmi \
     stdlib__Buffer.cmi
 stdlib__Fun.cmo : fun.ml \
     stdlib__Printexc.cmi \
@@ -384,8 +348,8 @@ stdlib__Hashtbl.cmo : hashtbl.ml \
     stdlib__Seq.cmi \
     stdlib__Random.cmi \
     stdlib__Obj.cmi \
+    stdlib__Lazy.cmi \
     stdlib__Int.cmi \
-    stdlib__Domain.cmi \
     stdlib__Array.cmi \
     stdlib__Hashtbl.cmi
 stdlib__Hashtbl.cmx : hashtbl.ml \
@@ -394,8 +358,8 @@ stdlib__Hashtbl.cmx : hashtbl.ml \
     stdlib__Seq.cmx \
     stdlib__Random.cmx \
     stdlib__Obj.cmx \
+    stdlib__Lazy.cmx \
     stdlib__Int.cmx \
-    stdlib__Domain.cmx \
     stdlib__Array.cmx \
     stdlib__Hashtbl.cmi
 stdlib__Hashtbl.cmi : hashtbl.mli \
@@ -514,11 +478,6 @@ stdlib__MoreLabels.cmi : moreLabels.mli \
     stdlib__Seq.cmi \
     stdlib__Map.cmi \
     stdlib__Hashtbl.cmi
-stdlib__Mutex.cmo : mutex.ml \
-    stdlib__Mutex.cmi
-stdlib__Mutex.cmx : mutex.ml \
-    stdlib__Mutex.cmi
-stdlib__Mutex.cmi : mutex.mli
 stdlib__Nativeint.cmo : nativeint.ml \
     stdlib__Sys.cmi \
     stdlib.cmi \
@@ -627,7 +586,6 @@ stdlib__Random.cmo : random.ml \
     stdlib__Int64.cmi \
     stdlib__Int32.cmi \
     stdlib__Int.cmi \
-    stdlib__Domain.cmi \
     stdlib__Digest.cmi \
     stdlib__Char.cmi \
     stdlib__Array.cmi \
@@ -639,7 +597,6 @@ stdlib__Random.cmx : random.ml \
     stdlib__Int64.cmx \
     stdlib__Int32.cmx \
     stdlib__Int.cmx \
-    stdlib__Domain.cmx \
     stdlib__Digest.cmx \
     stdlib__Char.cmx \
     stdlib__Array.cmx \
@@ -680,15 +637,6 @@ stdlib__Scanf.cmx : scanf.ml \
     stdlib__Scanf.cmi
 stdlib__Scanf.cmi : scanf.mli \
     stdlib.cmi
-stdlib__Semaphore.cmo : semaphore.ml \
-    stdlib__Mutex.cmi \
-    stdlib__Condition.cmi \
-    stdlib__Semaphore.cmi
-stdlib__Semaphore.cmx : semaphore.ml \
-    stdlib__Mutex.cmx \
-    stdlib__Condition.cmx \
-    stdlib__Semaphore.cmi
-stdlib__Semaphore.cmi : semaphore.mli
 stdlib__Seq.cmo : seq.ml \
     stdlib__Lazy.cmi \
     stdlib__Either.cmi \
diff --git a/stdlib/Makefile b/stdlib/Makefile
index df34bc2d49..06140760ad 100644
--- a/stdlib/Makefile
+++ b/stdlib/Makefile
@@ -260,7 +260,8 @@ STDLIB_NAMESPACE_MODULES = $(subst $(SPACE),|,$(STDLIB_PREFIXED_MODULES))
 
 .PHONY: depend
 depend:
-	$(CAMLDEP) $(DEPFLAGS) $(filter-out stdlib.%,$(wildcard *.mli *.ml)) \
+	$(CAMLDEP) $(DEPFLAGS) $(filter-out stdlib.%,std_exit.ml \
+    $(STDLIB_MODULE_BASENAMES:=.mli) $(STDLIB_MODULE_BASENAMES:=.ml)) \
 	  > .depend.tmp
 	$(CAMLDEP) $(DEPFLAGS) -pp "$(AWK) -f ./remove_module_aliases.awk" \
 	  stdlib.ml stdlib.mli >> .depend.tmp
diff --git a/stdlib/StdlibModules b/stdlib/StdlibModules
index 12c546b068..5aaa2488bf 100644
--- a/stdlib/StdlibModules
+++ b/stdlib/StdlibModules
@@ -40,12 +40,12 @@ STDLIB_MODULE_BASENAMES = \
   seq option result bool char uchar \
   list int bytes string unit marshal array float int32 int64 nativeint \
   lexing parsing set map stack queue stream buffer \
-  atomic mutex condition semaphore domain \
+  atomic \
   camlinternalFormat printf arg \
   printexc fun gc digest random hashtbl weak \
   format scanf callback camlinternalOO oo camlinternalMod genlex ephemeron \
   filename complex arrayLabels listLabels bytesLabels stringLabels moreLabels \
-  stdLabels bigarray in_channel out_channel effectHandlers
+  stdLabels bigarray in_channel out_channel
 
 STDLIB_PREFIXED_MODULES = \
   $(filter-out stdlib camlinternal%, $(STDLIB_MODULE_BASENAMES))
diff --git a/stdlib/camlinternalAtomic.ml b/stdlib/camlinternalAtomic.ml
index 7cb9554751..30f1db7e41 100644
--- a/stdlib/camlinternalAtomic.ml
+++ b/stdlib/camlinternalAtomic.ml
@@ -14,8 +14,11 @@
 (*                                                                        *)
 (**************************************************************************)
 
+(* BACKPORT - REVERTED to 4.14 STATE *)
+
 (* CamlinternalAtomic is a dependency of Stdlib, so it is compiled with
    -nopervasives. *)
+(*
 type !'a t
 
 (* Atomic is a dependency of Stdlib, so it is compiled with
@@ -25,8 +28,50 @@ external get : 'a t -> 'a = "%atomic_load"
 external exchange : 'a t -> 'a -> 'a = "%atomic_exchange"
 external compare_and_set : 'a t -> 'a -> 'a -> bool = "%atomic_cas"
 external fetch_and_add : int t -> int -> int = "%atomic_fetch_add"
+*)
+external ( == ) : 'a -> 'a -> bool = "%eq"
+external ( + ) : int -> int -> int = "%addint"
 external ignore : 'a -> unit = "%ignore"
 
+(* We are not reusing ('a ref) directly to make it easier to reason
+   about atomicity if we wish to: even in a sequential implementation,
+   signals and other asynchronous callbacks might break atomicity. *)
+type 'a t = {mutable v: 'a}
+
+let make v = {v}
+let get r = r.v
+let set r v = r.v <- v
+
+(* The following functions are set to never be inlined: Flambda is
+   allowed to move surrounding code inside the critical section,
+   including allocations. *)
+
+let[@inline never] exchange r v =
+  (* BEGIN ATOMIC *)
+  let cur = r.v in
+  r.v <- v;
+  (* END ATOMIC *)
+  cur
+
+let[@inline never] compare_and_set r seen v =
+  (* BEGIN ATOMIC *)
+  let cur = r.v in
+  if cur == seen then (
+    r.v <- v;
+    (* END ATOMIC *)
+    true
+  ) else
+    false
+
+let[@inline never] fetch_and_add r n =
+  (* BEGIN ATOMIC *)
+  let cur = r.v in
+  r.v <- (cur + n);
+  (* END ATOMIC *)
+  cur
+
+(*
 let set r x = ignore (exchange r x)
+*)
 let incr r = ignore (fetch_and_add r 1)
 let decr r = ignore (fetch_and_add r (-1))
diff --git a/stdlib/camlinternalLazy.ml b/stdlib/camlinternalLazy.ml
index b8764064c5..1948c76412 100644
--- a/stdlib/camlinternalLazy.ml
+++ b/stdlib/camlinternalLazy.ml
@@ -13,12 +13,15 @@
 (*                                                                        *)
 (**************************************************************************)
 
+(* BACKPORT - REVERTED to 4.14 STATE *)
+
 (* Internals of forcing lazy values. *)
 
 type 'a t = 'a lazy_t
 
 exception Undefined
 
+(*
 (* [update_to_forcing blk] tries to update a [blk] with [lazy_tag] to
    [forcing_tag] using compare-and-swap (CAS), taking care to handle concurrent
    marking of the header word by a concurrent GC thread. Returns [0] if the
@@ -94,3 +97,56 @@ let force_gen ~only_val (lzv : 'arg lazy_t) =
   else if t = Obj.forcing_tag then raise Undefined
   else if t <> Obj.lazy_tag then (Obj.obj x : 'arg)
   else force_gen_lazy_block ~only_val lzv
+*)
+let raise_undefined = Obj.repr (fun () -> raise Undefined)
+
+external make_forward : Obj.t -> Obj.t -> unit = "caml_obj_make_forward"
+
+(* Assume [blk] is a block with tag lazy *)
+let force_lazy_block (blk : 'arg lazy_t) =
+  let closure = (Obj.obj (Obj.field (Obj.repr blk) 0) : unit -> 'arg) in
+  Obj.set_field (Obj.repr blk) 0 raise_undefined;
+  try
+    let result = closure () in
+    make_forward (Obj.repr blk) (Obj.repr result);
+    result
+  with e ->
+    Obj.set_field (Obj.repr blk) 0 (Obj.repr (fun () -> raise e));
+    raise e
+
+
+(* Assume [blk] is a block with tag lazy *)
+let force_val_lazy_block (blk : 'arg lazy_t) =
+  let closure = (Obj.obj (Obj.field (Obj.repr blk) 0) : unit -> 'arg) in
+  Obj.set_field (Obj.repr blk) 0 raise_undefined;
+  let result = closure () in
+  make_forward (Obj.repr blk) (Obj.repr result);
+  result
+
+
+(* [force] is not used, since [Lazy.force] is declared as a primitive
+   whose code inlines the tag tests of its argument, except when afl
+   instrumentation is turned on. *)
+
+let force (lzv : 'arg lazy_t) =
+  (* Using [Sys.opaque_identity] prevents two potential problems:
+     - If the value is known to have Forward_tag, then its tag could have
+       changed during GC, so that information must be forgotten (see GPR#713
+       and issue #7301)
+     - If the value is known to be immutable, then if the compiler
+       cannot prove that the last branch is not taken it will issue a
+       warning 59 (modification of an immutable value) *)
+  let lzv = Sys.opaque_identity lzv in
+  let x = Obj.repr lzv in
+  let t = Obj.tag x in
+  if t = Obj.forward_tag then (Obj.obj (Obj.field x 0) : 'arg) else
+  if t <> Obj.lazy_tag then (Obj.obj x : 'arg)
+  else force_lazy_block lzv
+
+
+let force_val (lzv : 'arg lazy_t) =
+  let x = Obj.repr lzv in
+  let t = Obj.tag x in
+  if t = Obj.forward_tag then (Obj.obj (Obj.field x 0) : 'arg) else
+  if t <> Obj.lazy_tag then (Obj.obj x : 'arg)
+  else force_val_lazy_block lzv
diff --git a/stdlib/camlinternalLazy.mli b/stdlib/camlinternalLazy.mli
index ac8b7a8bee..2fd6aa2bf4 100644
--- a/stdlib/camlinternalLazy.mli
+++ b/stdlib/camlinternalLazy.mli
@@ -23,4 +23,13 @@ exception Undefined
 
 val force_lazy_block : 'a lazy_t -> 'a
 
+(* BACKPORT BEGIN *)
+val force_val_lazy_block : 'a lazy_t -> 'a
+
+val force : 'a lazy_t -> 'a
+val force_val : 'a lazy_t -> 'a
+(* BACKPORT END *)
+
+(* BACKPORT
 val force_gen : only_val:bool -> 'a lazy_t -> 'a
+*)
diff --git a/stdlib/filename.ml b/stdlib/filename.ml
index 6a61261c8f..c86d23d854 100644
--- a/stdlib/filename.ml
+++ b/stdlib/filename.ml
@@ -326,10 +326,18 @@ let remove_extension name =
 external open_desc: string -> open_flag list -> int -> int = "caml_sys_open"
 external close_desc: int -> unit = "caml_sys_close"
 
+(* BACKPORT BEGIN
 let prng_key = Domain.DLS.new_key Random.State.make_self_init
+*)
+let prng_key = lazy(Random.State.make_self_init ())
+(* BACKPORT END *)
 
 let temp_file_name temp_dir prefix suffix =
+(* BACKPORT BEGIN
   let random_state = Domain.DLS.get prng_key in
+*)
+  let random_state = Lazy.force prng_key in
+(* BACKPORT END *)
   let rnd = (Random.State.bits random_state) land 0xFFFFFF in
   concat temp_dir (Printf.sprintf "%s%06x%s" prefix rnd suffix)
 
diff --git a/stdlib/format.ml b/stdlib/format.ml
index 31314d3e99..a1c0792536 100644
--- a/stdlib/format.ml
+++ b/stdlib/format.ml
@@ -1023,6 +1023,7 @@ and err_formatter = formatter_of_out_channel Stdlib.stderr
 and str_formatter = formatter_of_buffer stdbuf
 
 (* Initialise domain local state *)
+(* BACKPORT BEGIN
 module DLS = Domain.DLS
 
 let stdbuf_key = DLS.new_key pp_make_buffer
@@ -1067,6 +1068,17 @@ let err_formatter_key = DLS.new_key (fun () ->
   ppf.pp_out_indent <- display_indent ppf;
   ppf)
 let _ = DLS.set err_formatter_key err_formatter
+*)
+
+let std_formatter_key = std_formatter
+let err_formatter_key = err_formatter
+let str_formatter_key = str_formatter
+let stdbuf_key = stdbuf
+
+module DLS = struct
+  let get = Fun.id
+end
+(* BACKPORT END *)
 
 let get_std_formatter () = DLS.get std_formatter_key
 let get_err_formatter () = DLS.get err_formatter_key
@@ -1089,6 +1101,7 @@ let flush_str_formatter () =
   let str_formatter = DLS.get str_formatter_key in
   flush_buffer_formatter stdbuf str_formatter
 
+(* BACKPORT
 let make_synchronized_formatter output flush =
   DLS.new_key (fun () ->
     let buf = Buffer.create pp_buffer_size in
@@ -1102,6 +1115,7 @@ let make_synchronized_formatter output flush =
 
 let synchronized_formatter_of_out_channel oc =
   make_synchronized_formatter (output_substring oc) (fun () -> flush oc)
+*)
 
 (*
   Symbolic pretty-printing
@@ -1479,6 +1493,7 @@ let flush_standard_formatters () =
 
 let () = at_exit flush_standard_formatters
 
+(* BACKPORT
 let () = Domain.at_first_spawn (fun () ->
   flush_standard_formatters ();
 
@@ -1493,6 +1508,7 @@ let () = Domain.at_first_spawn (fun () ->
              out_flush = buffered_out_flush Stdlib.stderr err_buf_key};
 
   Domain.at_exit flush_standard_formatters)
+*)
 
 (*
 
diff --git a/stdlib/format.mli b/stdlib/format.mli
index 09b11cbe28..fbecd2224c 100644
--- a/stdlib/format.mli
+++ b/stdlib/format.mli
@@ -959,6 +959,7 @@ val formatter_of_out_channel : out_channel -> formatter
     to the corresponding output channel [oc].
 *)
 
+(* BACKPORT
 val synchronized_formatter_of_out_channel :
   out_channel -> formatter Domain.DLS.key
 (** [synchronized_formatter_of_out_channel oc] returns the key to the
@@ -969,7 +970,7 @@ val synchronized_formatter_of_out_channel :
     domains will be interleaved with each other at points where the formatter
     is flushed, such as with {!print_flush}.
 *)
-
+*)
 
 val std_formatter : formatter
 (** The initial domain's standard formatter to write to standard output.
@@ -1035,6 +1036,7 @@ val make_formatter :
   returns a formatter to the {!Stdlib.out_channel} [oc].
 *)
 
+(* BACKPORT
 val make_synchronized_formatter :
   (string -> int -> int -> unit) -> (unit -> unit) -> formatter Domain.DLS.key
 (** [make_synchronized_formatter out flush] returns the key to the domain-local
@@ -1045,6 +1047,7 @@ val make_synchronized_formatter :
     domains will be interleaved with each other at points where the formatter
     is flushed, such as with {!print_flush}.
 *)
+*)
 
 val formatter_of_out_functions :
   formatter_out_functions -> formatter
diff --git a/stdlib/hashtbl.ml b/stdlib/hashtbl.ml
index 7006bc4a4b..02a8ed7fc2 100644
--- a/stdlib/hashtbl.ml
+++ b/stdlib/hashtbl.ml
@@ -57,7 +57,11 @@ let randomized = ref randomized_default
 let randomize () = randomized := true
 let is_randomized () = !randomized
 
+(* BACKPORT BEGIN
 let prng_key = Domain.DLS.new_key Random.State.make_self_init
+*)
+let prng = lazy (Random.State.make_self_init())
+(* BACKPORT END *)
 
 (* Functions which appear before the functorial interface must either be
    independent of the hash function or take it as a parameter (see #2202 and
@@ -73,7 +77,11 @@ let rec power_2_above x n =
 let create ?(random = !randomized) initial_size =
   let s = power_2_above 16 initial_size in
   let seed =
+(* BACKPORT BEGIN
     if random then Random.State.bits (Domain.DLS.get prng_key) else 0
+*)
+    if random then Random.State.bits (Lazy.force prng) else 0
+(* BACKPORT END *)
   in
   { initial_size = s; size = 0; seed = seed; data = Array.make s Empty }
 
@@ -619,7 +627,11 @@ let of_seq i =
 let rebuild ?(random = !randomized) h =
   let s = power_2_above 16 (Array.length h.data) in
   let seed =
+(* BACKPORT BEGIN
     if random then Random.State.bits (Domain.DLS.get prng_key)
+*)
+    if random then Random.State.bits (Lazy.force prng)
+(* BACKPORT END *)
     else if Obj.size (Obj.repr h) >= 4 then h.seed
     else 0 in
   let h' = {
diff --git a/stdlib/lazy.ml b/stdlib/lazy.ml
index ebc979b4cb..ee9cabf884 100644
--- a/stdlib/lazy.ml
+++ b/stdlib/lazy.ml
@@ -53,7 +53,11 @@ exception Undefined = CamlinternalLazy.Undefined
 external make_forward : 'a -> 'a lazy_t = "caml_lazy_make_forward"
 external force : 'a t -> 'a = "%lazy_force"
 
+(* BACKPORT BEGIN
 let force_val l = CamlinternalLazy.force_gen ~only_val:true l
+*)
+let force_val = CamlinternalLazy.force_val
+(* BACKPORT END *)
 
 let from_fun (f : unit -> 'arg) =
   let x = Obj.new_block Obj.lazy_tag 1 in
diff --git a/stdlib/obj.ml b/stdlib/obj.ml
index e4477d19ee..cd7ca6321a 100644
--- a/stdlib/obj.ml
+++ b/stdlib/obj.ml
@@ -30,9 +30,11 @@ external size : t -> int = "%obj_size"
 external reachable_words : t -> int = "caml_obj_reachable_words"
 external field : t -> int -> t = "%obj_field"
 external set_field : t -> int -> t -> unit = "%obj_set_field"
+(* BACKPORT
 external compare_and_swap_field : t -> int -> t -> t -> bool
   = "caml_obj_compare_and_swap"
 external is_shared : t -> bool = "caml_obj_is_shared"
+*)
 external floatarray_get : floatarray -> int -> float = "caml_floatarray_get"
 external floatarray_set :
     floatarray -> int -> float -> unit = "caml_floatarray_set"
diff --git a/stdlib/obj.mli b/stdlib/obj.mli
index afb08e5da7..2ba7003115 100644
--- a/stdlib/obj.mli
+++ b/stdlib/obj.mli
@@ -57,9 +57,11 @@ external field : t -> int -> t = "%obj_field"
     be propagated.
 *)
 external set_field : t -> int -> t -> unit = "%obj_set_field"
+(* BACKPORT
 external compare_and_swap_field : t -> int -> t -> t -> bool
   = "caml_obj_compare_and_swap"
 external is_shared : t -> bool = "caml_obj_is_shared"
+*)
 external set_tag : t -> int -> unit = "caml_obj_set_tag"
   [@@ocaml.deprecated "Use with_tag instead."]
 
diff --git a/stdlib/random.ml b/stdlib/random.ml
index 791ef968b9..c4d07c3d74 100644
--- a/stdlib/random.ml
+++ b/stdlib/random.ml
@@ -212,6 +212,7 @@ let mk_default () = {
   State.idx = 0;
 }
 
+(* BACKPORT BEGIN
 let random_key = Domain.DLS.new_key mk_default
 
 let bits () = State.bits (Domain.DLS.get random_key)
@@ -228,12 +229,34 @@ let nativebits () = State.nativebits (Domain.DLS.get random_key)
 
 let full_init seed = State.full_init (Domain.DLS.get random_key) seed
 let init seed = State.full_init (Domain.DLS.get random_key) [| seed |]
+*)
+let default = mk_default ()
+let bits () = State.bits default
+let int bound = State.int default bound
+let full_int bound = State.full_int default bound
+let int32 bound = State.int32 default bound
+let nativeint bound = State.nativeint default bound
+let int64 bound = State.int64 default bound
+let float scale = State.float default scale
+let bool () = State.bool default
+let bits32 () = State.bits32 default
+let bits64 () = State.bits64 default
+let nativebits () = State.nativebits default
+
+let full_init seed = State.full_init default seed
+let init seed = State.full_init default [| seed |]
+(* BACKPORT END *)
 let self_init () = full_init (random_seed())
 
 (* Manipulating the current state. *)
 
+(* BACKPORT BEGIN
 let get_state () = State.copy (Domain.DLS.get random_key)
 let set_state s = State.assign (Domain.DLS.get random_key) s
+*)
+let get_state () = State.copy default
+let set_state s = State.assign default s
+(* BACKPORT END *)
 
 (********************
 
diff --git a/stdlib/stdlib.ml b/stdlib/stdlib.ml
index 1e77c3eca3..7a0e6ff4ef 100644
--- a/stdlib/stdlib.ml
+++ b/stdlib/stdlib.ml
@@ -571,6 +571,13 @@ let exit retcode =
 
 let _ = register_named_value "Pervasives.do_at_exit" do_at_exit
 
+(* BACKPORT BEGIN *)
+external major : unit -> unit = "caml_gc_major"
+external naked_pointers_checked : unit -> bool
+  = "caml_sys_const_naked_pointers_checked"
+let () = if naked_pointers_checked () then at_exit major
+(* BACKPORT END *)
+
 (*MODULE_ALIASES*)
 module Arg            = Arg
 module Array          = Array
@@ -584,10 +591,14 @@ module BytesLabels    = BytesLabels
 module Callback       = Callback
 module Char           = Char
 module Complex        = Complex
+(* BACKPORT
 module Condition      = Condition
+*)
 module Digest         = Digest
+(* BACKPORT
 module Domain         = Domain
 module EffectHandlers = EffectHandlers
+*)
 module Either         = Either
 module Ephemeron      = Ephemeron
 module Filename       = Filename
@@ -608,7 +619,9 @@ module ListLabels     = ListLabels
 module Map            = Map
 module Marshal        = Marshal
 module MoreLabels     = MoreLabels
+(* BACKPORT
 module Mutex          = Mutex
+*)
 module Nativeint      = Nativeint
 module Obj            = Obj
 module Oo             = Oo
@@ -622,7 +635,9 @@ module Queue          = Queue
 module Random         = Random
 module Result         = Result
 module Scanf          = Scanf
+(* BACKPORT
 module Semaphore      = Semaphore
+*)
 module Seq            = Seq
 module Set            = Set
 module Stack          = Stack
diff --git a/stdlib/stdlib.mli b/stdlib/stdlib.mli
index 9e66103744..85b89d141b 100644
--- a/stdlib/stdlib.mli
+++ b/stdlib/stdlib.mli
@@ -1388,10 +1388,14 @@ module BytesLabels    = BytesLabels
 module Callback       = Callback
 module Char           = Char
 module Complex        = Complex
+(* BACKPORT
 module Condition      = Condition
+*)
 module Digest         = Digest
+(* BACKPORT
 module Domain         = Domain
 module EffectHandlers = EffectHandlers
+*)
 module Either         = Either
 module Ephemeron      = Ephemeron
 module Filename       = Filename
@@ -1413,7 +1417,9 @@ module ListLabels     = ListLabels
 module Map            = Map
 module Marshal        = Marshal
 module MoreLabels     = MoreLabels
+(* BACKPORT
 module Mutex          = Mutex
+*)
 module Nativeint      = Nativeint
 module Obj            = Obj
 module Oo             = Oo
@@ -1431,7 +1437,9 @@ module Queue          = Queue
 module Random         = Random
 module Result         = Result
 module Scanf          = Scanf
+(* BACKPORT
 module Semaphore      = Semaphore
+*)
 module Seq            = Seq
 module Set            = Set
 module Stack          = Stack
diff --git a/tools/dumpobj.ml b/tools/dumpobj.ml
index 7c7ee74fbf..f2878b7bb3 100644
--- a/tools/dumpobj.ml
+++ b/tools/dumpobj.ml
@@ -395,10 +395,12 @@ let op_shapes = [
   opUGEINT, Nothing;
   opBULTINT, Uint_Disp;
   opBUGEINT, Uint_Disp;
+(* BACKPORT
   opPERFORM, Nothing;
   opRESUME, Nothing;
   opRESUMETERM, Uint;
   opREPERFORMTERM, Uint;
+*)
   opSTOP, Nothing;
   opEVENT, Nothing;
   opBREAK, Nothing;
diff --git a/utils/config.mlp b/utils/config.mlp
index 7f927f1fe6..8ea002b166 100644
--- a/utils/config.mlp
+++ b/utils/config.mlp
@@ -122,7 +122,11 @@ let max_tag = 243
 let lazy_tag = 246
 
 let max_young_wosize = 256
+(* BACKPORT BEGIN
 let stack_threshold = 16 (* see runtime/caml/config.h *)
+*)
+let stack_threshold = 256 (* see runtime/caml/config.h *)
+(* BACKPORT END *)
 let stack_safety_margin = 60
 
 let architecture = "%%ARCH%%"
diff --git a/utils/domainstate.ml.c b/utils/domainstate.ml.c
index 6dbae1d07a..1eee2142ad 100644
--- a/utils/domainstate.ml.c
+++ b/utils/domainstate.ml.c
@@ -16,7 +16,9 @@
 
 #define CAML_CONFIG_H_NO_TYPEDEFS
 #include "config.h"
+/* BACKPORT
 let stack_ctx_words = Stack_ctx_words
+*/
 
 type t =
 #define DOMAIN_STATE(type, name) | Domain_##name
diff --git a/utils/domainstate.mli.c b/utils/domainstate.mli.c
index 66a4750d4c..c4a77ff976 100644
--- a/utils/domainstate.mli.c
+++ b/utils/domainstate.mli.c
@@ -14,7 +14,9 @@
 /*                                                                        */
 /**************************************************************************/
 
+/* BACKPORT
 val stack_ctx_words : int
+*/
 
 type t =
 #define DOMAIN_STATE(type, name) | Domain_##name
