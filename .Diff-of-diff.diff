--- a	2023-09-28 18:43:50.808065710 +0100
+++ b	2023-09-28 18:43:50.816066041 +0100
@@ -24,7 +24,7 @@
  camlinternalFormat.cmo : \
      stdlib__Sys.cmi \
      stdlib__String.cmi \
-@@ -670,12 +663,12 @@ stdlib__Semaphore.cmi : semaphore.mli
+@@ -616,12 +609,12 @@ stdlib__Scanf.cmi : scanf.mli \
  stdlib__Seq.cmo : seq.ml \
      stdlib__Lazy.cmi \
      stdlib__Either.cmi \
@@ -39,7 +39,7 @@
      stdlib__Seq.cmi
  stdlib__Seq.cmi : seq.mli \
      stdlib__Either.cmi
-@@ -775,11 +768,9 @@ stdlib__Weak.cmi : weak.mli \
+@@ -721,11 +714,9 @@ stdlib__Weak.cmi : weak.mli \
      stdlib__Hashtbl.cmi
  stdlib.cmo : \
      camlinternalFormatBasics.cmi \
@@ -77,7 +77,7 @@
 diff --git a/stdlib/StdlibModules b/stdlib/StdlibModules
 --- a/stdlib/StdlibModules
 +++ b/stdlib/StdlibModules
-@@ -34,13 +34,12 @@
+@@ -34,13 +34,11 @@
  # Basenames of the source files for the standard library (i.e. unprefixed and
  # with lowercase first letters). These must be listed in dependency order.
  STDLIB_MODULE_BASENAMES = \
@@ -89,8 +89,7 @@
    seq option result bool char uchar \
    list int bytes string unit marshal array float int32 int64 nativeint \
    lexing parsing set map stack queue buffer \
--  atomic mutex condition semaphore domain \
-+  mutex condition semaphore domain \
+-  atomic \
    camlinternalFormat printf arg \
    printexc fun gc digest bigarray random hashtbl weak \
    format scanf callback camlinternalOO oo camlinternalMod ephemeron \
@@ -165,7 +164,7 @@
 deleted file mode 100644
 --- a/stdlib/camlinternalAtomic.ml
 +++ /dev/null
-@@ -1,32 +0,0 @@
+@@ -1,77 +0,0 @@
 -(**************************************************************************)
 -(*                                                                        *)
 -(*                                 OCaml                                  *)
@@ -182,8 +181,11 @@
 -(*                                                                        *)
 -(**************************************************************************)
 -
+-(* BACKPORT - REVERTED to 4.14 STATE *)
+-
 -(* CamlinternalAtomic is a dependency of Stdlib, so it is compiled with
 -   -nopervasives. *)
+-(*
 -type !'a t
 -
 -(* Atomic is a dependency of Stdlib, so it is compiled with
@@ -193,9 +195,51 @@
 -external exchange : 'a t -> 'a -> 'a = "%atomic_exchange"
 -external compare_and_set : 'a t -> 'a -> 'a -> bool = "%atomic_cas"
 -external fetch_and_add : int t -> int -> int = "%atomic_fetch_add"
+-*)
+-external ( == ) : 'a -> 'a -> bool = "%eq"
+-external ( + ) : int -> int -> int = "%addint"
 -external ignore : 'a -> unit = "%ignore"
 -
+-(* We are not reusing ('a ref) directly to make it easier to reason
+-   about atomicity if we wish to: even in a sequential implementation,
+-   signals and other asynchronous callbacks might break atomicity. *)
+-type 'a t = {mutable v: 'a}
+-
+-let make v = {v}
+-let get r = r.v
+-let set r v = r.v <- v
+-
+-(* The following functions are set to never be inlined: Flambda is
+-   allowed to move surrounding code inside the critical section,
+-   including allocations. *)
+-
+-let[@inline never] exchange r v =
+-  (* BEGIN ATOMIC *)
+-  let cur = r.v in
+-  r.v <- v;
+-  (* END ATOMIC *)
+-  cur
+-
+-let[@inline never] compare_and_set r seen v =
+-  (* BEGIN ATOMIC *)
+-  let cur = r.v in
+-  if cur == seen then (
+-    r.v <- v;
+-    (* END ATOMIC *)
+-    true
+-  ) else
+-    false
+-
+-let[@inline never] fetch_and_add r n =
+-  (* BEGIN ATOMIC *)
+-  let cur = r.v in
+-  r.v <- (cur + n);
+-  (* END ATOMIC *)
+-  cur
+-
+-(*
 -let set r x = ignore (exchange r x)
+-*)
 -let incr r = ignore (fetch_and_add r 1)
 -let decr r = ignore (fetch_and_add r (-1))
 diff --git a/stdlib/camlinternalAtomic.mli b/stdlib/camlinternalAtomic.mli
