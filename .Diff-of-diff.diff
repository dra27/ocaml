--- a	2023-09-28 18:44:54.046625206 +0100
+++ b	2023-09-28 18:44:54.066625999 +0100
@@ -14,10 +14,10 @@
 diff --git a/asmcomp/amd64/emit.mlp b/asmcomp/amd64/emit.mlp
 --- a/asmcomp/amd64/emit.mlp
 +++ b/asmcomp/amd64/emit.mlp
-@@ -553,16 +553,16 @@ let emit_instr env fallthrough i =
-         emit_call "caml_c_call";
-         record_frame env i.live (Dbg_other i.dbg);
+@@ -573,9 +573,9 @@ let emit_instr env fallthrough i =
+ (* BACKPORT END *)
        end else begin
+ (* BACKPORT
 -        I.mov rsp rbp;
 +        I.mov rsp rbx;
          cfi_remember_state ();
@@ -26,15 +26,16 @@
          (* NB: gdb has asserts on contiguous stacks that mean it
             will not unwind through this unless we were to tag this
             calling frame with cfi_signal_frame in it's definition. *)
-         I.mov (domain_field Domainstate.Domain_c_stack) rsp;
- 
+@@ -583,7 +583,7 @@ let emit_instr env fallthrough i =
+ *)
          emit_call func;
+ (* BACKPORT
 -        I.mov rbp rsp;
 +        I.mov rbx rsp;
          cfi_restore_state ();
+ *)
        end
-   | Lop(Istackoffset n) ->
-@@ -924,9 +924,11 @@ let fundecl fundecl =
+@@ -976,9 +976,11 @@ let fundecl fundecl =
          argument-passing registers may be in use.
          Also serves to align the stack properly before the call *)
        I.push (int (Config.stack_threshold + max_frame_size / 8));
@@ -58,15 +59,15 @@
       by the code sequence used for C calls in emit.mlp, so it
       is marked as destroyed. *)
    if win64 then
-@@ -302,7 +302,7 @@ let destroyed_at_c_call =
-   else
+@@ -307,7 +307,7 @@ let destroyed_at_c_call =
      (* Unix: rbx, r12-r15 preserved *)
      Array.of_list(List.map phys_reg
+ (* BACKPORT BEGIN
 -      [0;2;3;4;5;6;7;10;11;12;
 +      [0;1;2;3;4;5;6;7;10;11;
-        100;101;102;103;104;105;106;107;
-        108;109;110;111;112;113;114;115])
- 
+ *)
+       [0;2;3;4;5;6;7;10;11;
+ (* BACKPORT END *)
 diff --git a/asmcomp/x86_dsl.ml b/asmcomp/x86_dsl.ml
 --- a/asmcomp/x86_dsl.ml
 +++ b/asmcomp/x86_dsl.ml
@@ -92,10 +93,10 @@
 diff --git a/ocamltest/Makefile b/ocamltest/Makefile
 --- a/ocamltest/Makefile
 +++ b/ocamltest/Makefile
-@@ -267,6 +267,7 @@ ocamltest_config.ml: ocamltest_config.ml.in Makefile ../Makefile.config
- 	    $(call SUBST,DIFF_FLAGS) \
+@@ -268,6 +268,7 @@ ocamltest_config.ml: ocamltest_config.ml.in Makefile ../Makefile.config
  	    $(call SUBST,WINDOWS_UNICODE) \
  	    $(call SUBST,FUNCTION_SECTIONS) \
+ 	    $(call SUBST,NAKED_POINTERS) \
 +	    $(call SUBST,WITH_FRAME_POINTERS) \
  	    $< > $@
  
@@ -103,9 +104,9 @@
 diff --git a/ocamltest/builtin_actions.ml b/ocamltest/builtin_actions.ml
 --- a/ocamltest/builtin_actions.ml
 +++ b/ocamltest/builtin_actions.ml
-@@ -181,6 +181,12 @@ let function_sections = make
-      "Target supports function sections"
-      "Target does not support function sections")
+@@ -187,6 +187,12 @@ let naked_pointers = make
+      "Runtime system supports naked pointers"
+      "Runtime system does not support naked pointers")
  
 +let frame_pointers = make
 +  "frame_pointers"
@@ -116,10 +117,10 @@
  let has_symlink = make
    "has_symlink"
    (Actions_helpers.pass_or_skip (Unix.has_symlink () )
-@@ -302,6 +308,7 @@ let _ =
-     arch_i386;
+@@ -309,6 +315,7 @@ let _ =
      arch_power;
      function_sections;
+     naked_pointers;
 +    frame_pointers;
      file_exists;
      copy;
@@ -127,19 +128,19 @@
 diff --git a/ocamltest/ocamltest_config.ml.in b/ocamltest/ocamltest_config.ml.in
 --- a/ocamltest/ocamltest_config.ml.in
 +++ b/ocamltest/ocamltest_config.ml.in
-@@ -87,3 +87,5 @@ let windows_unicode = %%WINDOWS_UNICODE%% != 0
- let function_sections = %%FUNCTION_SECTIONS%%
- 
+@@ -89,3 +89,5 @@ let function_sections = %%FUNCTION_SECTIONS%%
  let instrumented_runtime = %%INSTRUMENTED_RUNTIME%%
+ 
+ let naked_pointers = %%NAKED_POINTERS%%
 +
 +let frame_pointers = %%WITH_FRAME_POINTERS%%
 diff --git a/ocamltest/ocamltest_config.mli b/ocamltest/ocamltest_config.mli
 --- a/ocamltest/ocamltest_config.mli
 +++ b/ocamltest/ocamltest_config.mli
-@@ -124,3 +124,6 @@ val function_sections : bool
+@@ -127,3 +127,6 @@ val instrumented_runtime : bool
  
- val instrumented_runtime : bool
- (** Whether the instrumented runtime is available *)
+ val naked_pointers : bool
+ (** Whether the runtime system supports naked pointers outside the heap *)
 +
 +val frame_pointers : bool
 +(** Whether frame-pointers have been enabled at configure time *)
