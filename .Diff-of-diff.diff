--- a	2023-09-28 18:46:26.314188307 +0100
+++ b	2023-09-28 18:46:26.334189059 +0100
@@ -35,7 +35,7 @@
 diff --git a/stdlib/.depend b/stdlib/.depend
 --- a/stdlib/.depend
 +++ b/stdlib/.depend
-@@ -754,6 +754,11 @@ stdlib__Sys.cmo : sys.ml \
+@@ -694,6 +694,11 @@ stdlib__Sys.cmo : sys.ml \
  stdlib__Sys.cmx : sys.ml \
      stdlib__Sys.cmi
  stdlib__Sys.cmi : sys.mli
@@ -50,7 +50,7 @@
 diff --git a/stdlib/StdlibModules b/stdlib/StdlibModules
 --- a/stdlib/StdlibModules
 +++ b/stdlib/StdlibModules
-@@ -34,17 +34,72 @@
+@@ -34,16 +34,72 @@
  # Basenames of the source files for the standard library (i.e. unprefixed and
  # with lowercase first letters). These must be listed in dependency order.
  STDLIB_MODULE_BASENAMES = \
@@ -59,12 +59,11 @@
 -  seq option result bool char uchar \
 -  list int bytes string unit marshal array float int32 int64 nativeint \
 -  lexing parsing set map stack queue buffer \
--  mutex condition semaphore domain \
--  camlinternalFormat printf arg printexc \
--  fun gc digest bigarray random hashtbl weak \
+-  camlinternalFormat printf arg \
+-  printexc fun gc digest bigarray random hashtbl weak \
 -  format scanf callback camlinternalOO oo camlinternalMod ephemeron \
 -  filename complex arrayLabels listLabels bytesLabels stringLabels moreLabels \
--  stdLabels in_channel out_channel effect
+-  stdLabels in_channel out_channel
 +  camlinternalFormatBasics \
 +  stdlib \
 +  type \
@@ -137,7 +136,7 @@
 diff --git a/stdlib/stdlib.ml b/stdlib/stdlib.ml
 --- a/stdlib/stdlib.ml
 +++ b/stdlib/stdlib.ml
-@@ -636,6 +636,7 @@ module StdLabels      = StdLabels
+@@ -667,6 +667,7 @@ module StdLabels      = StdLabels
  module String         = String
  module StringLabels   = StringLabels
  module Sys            = Sys
@@ -148,7 +147,7 @@
 diff --git a/stdlib/stdlib.mli b/stdlib/stdlib.mli
 --- a/stdlib/stdlib.mli
 +++ b/stdlib/stdlib.mli
-@@ -1450,6 +1450,7 @@ module StdLabels      = StdLabels
+@@ -1458,6 +1458,7 @@ module StdLabels      = StdLabels
  module String         = String
  module StringLabels   = StringLabels
  module Sys            = Sys
@@ -226,20 +225,20 @@
  | _ -> false
  ;;
  [%%expect{|
--(let (*match*/275 = 3 *match*/276 = 2 *match*/277 = 1)
-+(let (*match*/276 = 3 *match*/277 = 2 *match*/278 = 1)
+-(let (*match*/270 = 3 *match*/271 = 2 *match*/272 = 1)
++(let (*match*/271 = 3 *match*/272 = 2 *match*/273 = 1)
    (catch
      (catch
--      (catch (if (!= *match*/276 3) (exit 3) (exit 1)) with (3)
--        (if (!= *match*/275 1) (exit 2) (exit 1)))
-+      (catch (if (!= *match*/277 3) (exit 3) (exit 1)) with (3)
-+        (if (!= *match*/276 1) (exit 2) (exit 1)))
+-      (catch (if (!= *match*/271 3) (exit 3) (exit 1)) with (3)
+-        (if (!= *match*/270 1) (exit 2) (exit 1)))
++      (catch (if (!= *match*/272 3) (exit 3) (exit 1)) with (3)
++        (if (!= *match*/271 1) (exit 2) (exit 1)))
       with (2) 0)
     with (1) 1))
--(let (*match*/275 = 3 *match*/276 = 2 *match*/277 = 1)
--  (catch (if (!= *match*/276 3) (if (!= *match*/275 1) 0 (exit 1)) (exit 1))
-+(let (*match*/276 = 3 *match*/277 = 2 *match*/278 = 1)
-+  (catch (if (!= *match*/277 3) (if (!= *match*/276 1) 0 (exit 1)) (exit 1))
+-(let (*match*/270 = 3 *match*/271 = 2 *match*/272 = 1)
+-  (catch (if (!= *match*/271 3) (if (!= *match*/270 1) 0 (exit 1)) (exit 1))
++(let (*match*/271 = 3 *match*/272 = 2 *match*/273 = 1)
++  (catch (if (!= *match*/272 3) (if (!= *match*/271 1) 0 (exit 1)) (exit 1))
     with (1) 1))
  - : bool = false
  |}];;
@@ -247,40 +246,40 @@
  | _ -> false
  ;;
  [%%expect{|
--(let (*match*/280 = 3 *match*/281 = 2 *match*/282 = 1)
-+(let (*match*/281 = 3 *match*/282 = 2 *match*/283 = 1)
+-(let (*match*/275 = 3 *match*/276 = 2 *match*/277 = 1)
++(let (*match*/276 = 3 *match*/277 = 2 *match*/278 = 1)
    (catch
      (catch
        (catch
--        (if (!= *match*/281 3) (exit 6)
--          (let (x/284 =a (makeblock 0 *match*/280 *match*/281 *match*/282))
--            (exit 4 x/284)))
-+        (if (!= *match*/282 3) (exit 6)
-+          (let (x/285 =a (makeblock 0 *match*/281 *match*/282 *match*/283))
-+            (exit 4 x/285)))
+-        (if (!= *match*/276 3) (exit 6)
+-          (let (x/279 =a (makeblock 0 *match*/275 *match*/276 *match*/277))
+-            (exit 4 x/279)))
++        (if (!= *match*/277 3) (exit 6)
++          (let (x/280 =a (makeblock 0 *match*/276 *match*/277 *match*/278))
++            (exit 4 x/280)))
         with (6)
--        (if (!= *match*/280 1) (exit 5)
--          (let (x/283 =a (makeblock 0 *match*/280 *match*/281 *match*/282))
--            (exit 4 x/283))))
-+        (if (!= *match*/281 1) (exit 5)
-+          (let (x/284 =a (makeblock 0 *match*/281 *match*/282 *match*/283))
-+            (exit 4 x/284))))
+-        (if (!= *match*/275 1) (exit 5)
+-          (let (x/278 =a (makeblock 0 *match*/275 *match*/276 *match*/277))
+-            (exit 4 x/278))))
++        (if (!= *match*/276 1) (exit 5)
++          (let (x/279 =a (makeblock 0 *match*/276 *match*/277 *match*/278))
++            (exit 4 x/279))))
       with (5) 0)
--   with (4 x/278) (seq (ignore x/278) 1)))
--(let (*match*/280 = 3 *match*/281 = 2 *match*/282 = 1)
-+   with (4 x/279) (seq (ignore x/279) 1)))
-+(let (*match*/281 = 3 *match*/282 = 2 *match*/283 = 1)
+-   with (4 x/273) (seq (ignore x/273) 1)))
+-(let (*match*/275 = 3 *match*/276 = 2 *match*/277 = 1)
++   with (4 x/274) (seq (ignore x/274) 1)))
++(let (*match*/276 = 3 *match*/277 = 2 *match*/278 = 1)
    (catch
--    (if (!= *match*/281 3)
--      (if (!= *match*/280 1) 0
--        (exit 4 (makeblock 0 *match*/280 *match*/281 *match*/282)))
--      (exit 4 (makeblock 0 *match*/280 *match*/281 *match*/282)))
--   with (4 x/278) (seq (ignore x/278) 1)))
-+    (if (!= *match*/282 3)
-+      (if (!= *match*/281 1) 0
-+        (exit 4 (makeblock 0 *match*/281 *match*/282 *match*/283)))
-+      (exit 4 (makeblock 0 *match*/281 *match*/282 *match*/283)))
-+   with (4 x/279) (seq (ignore x/279) 1)))
+-    (if (!= *match*/276 3)
+-      (if (!= *match*/275 1) 0
+-        (exit 4 (makeblock 0 *match*/275 *match*/276 *match*/277)))
+-      (exit 4 (makeblock 0 *match*/275 *match*/276 *match*/277)))
+-   with (4 x/273) (seq (ignore x/273) 1)))
++    (if (!= *match*/277 3)
++      (if (!= *match*/276 1) 0
++        (exit 4 (makeblock 0 *match*/276 *match*/277 *match*/278)))
++      (exit 4 (makeblock 0 *match*/276 *match*/277 *match*/278)))
++   with (4 x/274) (seq (ignore x/274) 1)))
  - : bool = false
  |}];;
  
@@ -288,10 +287,10 @@
    | ((true, _) as _g)
    | ((false, _) as _g) -> ()
  [%%expect{|
--(function a/285[int] b/286 : int 0)
--(function a/285[int] b/286 : int 0)
-+(function a/286[int] b/287 : int 0)
-+(function a/286[int] b/287 : int 0)
+-(function a/280[int] b/281 : int 0)
+-(function a/280[int] b/281 : int 0)
++(function a/281[int] b/282 : int 0)
++(function a/281[int] b/282 : int 0)
  - : bool -> 'a -> unit = <fun>
  |}];;
  
@@ -299,10 +298,10 @@
  | (false, _) as p -> p
  (* outside, trivial *)
  [%%expect {|
--(function a/289[int] b/290 (let (p/291 =a (makeblock 0 a/289 b/290)) p/291))
--(function a/289[int] b/290 (makeblock 0 a/289 b/290))
-+(function a/290[int] b/291 (let (p/292 =a (makeblock 0 a/290 b/291)) p/292))
-+(function a/290[int] b/291 (makeblock 0 a/290 b/291))
+-(function a/284[int] b/285 (let (p/286 =a (makeblock 0 a/284 b/285)) p/286))
+-(function a/284[int] b/285 (makeblock 0 a/284 b/285))
++(function a/285[int] b/286 (let (p/287 =a (makeblock 0 a/285 b/286)) p/287))
++(function a/285[int] b/286 (makeblock 0 a/285 b/286))
  - : bool -> 'a -> bool * 'a = <fun>
  |}]
  
@@ -310,10 +309,10 @@
  | ((false, _) as p) -> p
  (* inside, trivial *)
  [%%expect{|
--(function a/293[int] b/294 (let (p/295 =a (makeblock 0 a/293 b/294)) p/295))
--(function a/293[int] b/294 (makeblock 0 a/293 b/294))
-+(function a/294[int] b/295 (let (p/296 =a (makeblock 0 a/294 b/295)) p/296))
-+(function a/294[int] b/295 (makeblock 0 a/294 b/295))
+-(function a/288[int] b/289 (let (p/290 =a (makeblock 0 a/288 b/289)) p/290))
+-(function a/288[int] b/289 (makeblock 0 a/288 b/289))
++(function a/289[int] b/290 (let (p/291 =a (makeblock 0 a/289 b/290)) p/291))
++(function a/289[int] b/290 (makeblock 0 a/289 b/290))
  - : bool -> 'a -> bool * 'a = <fun>
  |}];;
  
@@ -321,16 +320,16 @@
  | (false as x, _) as p -> x, p
  (* outside, simple *)
  [%%expect {|
--(function a/299[int] b/300
--  (let (x/301 =a[int] a/299 p/302 =a (makeblock 0 a/299 b/300))
--    (makeblock 0 (int,*) x/301 p/302)))
--(function a/299[int] b/300
--  (makeblock 0 (int,*) a/299 (makeblock 0 a/299 b/300)))
-+(function a/300[int] b/301
-+  (let (x/302 =a[int] a/300 p/303 =a (makeblock 0 a/300 b/301))
-+    (makeblock 0 (int,*) x/302 p/303)))
-+(function a/300[int] b/301
-+  (makeblock 0 (int,*) a/300 (makeblock 0 a/300 b/301)))
+-(function a/294[int] b/295
+-  (let (x/296 =a[int] a/294 p/297 =a (makeblock 0 a/294 b/295))
+-    (makeblock 0 (int,*) x/296 p/297)))
+-(function a/294[int] b/295
+-  (makeblock 0 (int,*) a/294 (makeblock 0 a/294 b/295)))
++(function a/295[int] b/296
++  (let (x/297 =a[int] a/295 p/298 =a (makeblock 0 a/295 b/296))
++    (makeblock 0 (int,*) x/297 p/298)))
++(function a/295[int] b/296
++  (makeblock 0 (int,*) a/295 (makeblock 0 a/295 b/296)))
  - : bool -> 'a -> bool * (bool * 'a) = <fun>
  |}]
  
@@ -338,16 +337,16 @@
  | ((false as x, _) as p) -> x, p
  (* inside, simple *)
  [%%expect {|
--(function a/305[int] b/306
--  (let (x/307 =a[int] a/305 p/308 =a (makeblock 0 a/305 b/306))
--    (makeblock 0 (int,*) x/307 p/308)))
--(function a/305[int] b/306
--  (makeblock 0 (int,*) a/305 (makeblock 0 a/305 b/306)))
-+(function a/306[int] b/307
-+  (let (x/308 =a[int] a/306 p/309 =a (makeblock 0 a/306 b/307))
-+    (makeblock 0 (int,*) x/308 p/309)))
-+(function a/306[int] b/307
-+  (makeblock 0 (int,*) a/306 (makeblock 0 a/306 b/307)))
+-(function a/300[int] b/301
+-  (let (x/302 =a[int] a/300 p/303 =a (makeblock 0 a/300 b/301))
+-    (makeblock 0 (int,*) x/302 p/303)))
+-(function a/300[int] b/301
+-  (makeblock 0 (int,*) a/300 (makeblock 0 a/300 b/301)))
++(function a/301[int] b/302
++  (let (x/303 =a[int] a/301 p/304 =a (makeblock 0 a/301 b/302))
++    (makeblock 0 (int,*) x/303 p/304)))
++(function a/301[int] b/302
++  (makeblock 0 (int,*) a/301 (makeblock 0 a/301 b/302)))
  - : bool -> 'a -> bool * (bool * 'a) = <fun>
  |}]
  
@@ -355,24 +354,24 @@
  | (false, x) as p -> x, p
  (* outside, complex *)
  [%%expect{|
--(function a/315[int] b/316[int]
--  (if a/315
--    (let (x/317 =a[int] a/315 p/318 =a (makeblock 0 a/315 b/316))
--      (makeblock 0 (int,*) x/317 p/318))
--    (let (x/319 =a b/316 p/320 =a (makeblock 0 a/315 b/316))
--      (makeblock 0 (int,*) x/319 p/320))))
--(function a/315[int] b/316[int]
--  (if a/315 (makeblock 0 (int,*) a/315 (makeblock 0 a/315 b/316))
--    (makeblock 0 (int,*) b/316 (makeblock 0 a/315 b/316))))
-+(function a/316[int] b/317[int]
-+  (if a/316
-+    (let (x/318 =a[int] a/316 p/319 =a (makeblock 0 a/316 b/317))
-+      (makeblock 0 (int,*) x/318 p/319))
-+    (let (x/320 =a b/317 p/321 =a (makeblock 0 a/316 b/317))
-+      (makeblock 0 (int,*) x/320 p/321))))
-+(function a/316[int] b/317[int]
-+  (if a/316 (makeblock 0 (int,*) a/316 (makeblock 0 a/316 b/317))
-+    (makeblock 0 (int,*) b/317 (makeblock 0 a/316 b/317))))
+-(function a/310[int] b/311[int]
+-  (if a/310
+-    (let (x/312 =a[int] a/310 p/313 =a (makeblock 0 a/310 b/311))
+-      (makeblock 0 (int,*) x/312 p/313))
+-    (let (x/314 =a b/311 p/315 =a (makeblock 0 a/310 b/311))
+-      (makeblock 0 (int,*) x/314 p/315))))
+-(function a/310[int] b/311[int]
+-  (if a/310 (makeblock 0 (int,*) a/310 (makeblock 0 a/310 b/311))
+-    (makeblock 0 (int,*) b/311 (makeblock 0 a/310 b/311))))
++(function a/311[int] b/312[int]
++  (if a/311
++    (let (x/313 =a[int] a/311 p/314 =a (makeblock 0 a/311 b/312))
++      (makeblock 0 (int,*) x/313 p/314))
++    (let (x/315 =a b/312 p/316 =a (makeblock 0 a/311 b/312))
++      (makeblock 0 (int,*) x/315 p/316))))
++(function a/311[int] b/312[int]
++  (if a/311 (makeblock 0 (int,*) a/311 (makeblock 0 a/311 b/312))
++    (makeblock 0 (int,*) b/312 (makeblock 0 a/311 b/312))))
  - : bool -> bool -> bool * (bool * bool) = <fun>
  |}]
  
@@ -380,30 +379,30 @@
    -> x, p
  (* inside, complex *)
  [%%expect{|
--(function a/321[int] b/322[int]
-+(function a/322[int] b/323[int]
+-(function a/316[int] b/317[int]
++(function a/317[int] b/318[int]
    (catch
--    (if a/321
--      (let (x/329 =a[int] a/321 p/330 =a (makeblock 0 a/321 b/322))
--        (exit 10 x/329 p/330))
--      (let (x/327 =a b/322 p/328 =a (makeblock 0 a/321 b/322))
--        (exit 10 x/327 p/328)))
--   with (10 x/323[int] p/324) (makeblock 0 (int,*) x/323 p/324)))
--(function a/321[int] b/322[int]
-+    (if a/322
-+      (let (x/330 =a[int] a/322 p/331 =a (makeblock 0 a/322 b/323))
-+        (exit 10 x/330 p/331))
-+      (let (x/328 =a b/323 p/329 =a (makeblock 0 a/322 b/323))
-+        (exit 10 x/328 p/329)))
-+   with (10 x/324[int] p/325) (makeblock 0 (int,*) x/324 p/325)))
-+(function a/322[int] b/323[int]
+-    (if a/316
+-      (let (x/324 =a[int] a/316 p/325 =a (makeblock 0 a/316 b/317))
+-        (exit 10 x/324 p/325))
+-      (let (x/322 =a b/317 p/323 =a (makeblock 0 a/316 b/317))
+-        (exit 10 x/322 p/323)))
+-   with (10 x/318[int] p/319) (makeblock 0 (int,*) x/318 p/319)))
+-(function a/316[int] b/317[int]
++    (if a/317
++      (let (x/325 =a[int] a/317 p/326 =a (makeblock 0 a/317 b/318))
++        (exit 10 x/325 p/326))
++      (let (x/323 =a b/318 p/324 =a (makeblock 0 a/317 b/318))
++        (exit 10 x/323 p/324)))
++   with (10 x/319[int] p/320) (makeblock 0 (int,*) x/319 p/320)))
++(function a/317[int] b/318[int]
    (catch
--    (if a/321 (exit 10 a/321 (makeblock 0 a/321 b/322))
--      (exit 10 b/322 (makeblock 0 a/321 b/322)))
--   with (10 x/323[int] p/324) (makeblock 0 (int,*) x/323 p/324)))
-+    (if a/322 (exit 10 a/322 (makeblock 0 a/322 b/323))
-+      (exit 10 b/323 (makeblock 0 a/322 b/323)))
-+   with (10 x/324[int] p/325) (makeblock 0 (int,*) x/324 p/325)))
+-    (if a/316 (exit 10 a/316 (makeblock 0 a/316 b/317))
+-      (exit 10 b/317 (makeblock 0 a/316 b/317)))
+-   with (10 x/318[int] p/319) (makeblock 0 (int,*) x/318 p/319)))
++    (if a/317 (exit 10 a/317 (makeblock 0 a/317 b/318))
++      (exit 10 b/318 (makeblock 0 a/317 b/318)))
++   with (10 x/319[int] p/320) (makeblock 0 (int,*) x/319 p/320)))
  - : bool -> bool -> bool * (bool * bool) = <fun>
  |}]
  
@@ -411,24 +410,24 @@
  | (false as x, _) as p -> x, p
  (* outside, onecase *)
  [%%expect {|
--(function a/331[int] b/332[int]
--  (if a/331
--    (let (x/333 =a[int] a/331 _p/334 =a (makeblock 0 a/331 b/332))
--      (makeblock 0 (int,*) x/333 [0: 1 1]))
--    (let (x/335 =a[int] a/331 p/336 =a (makeblock 0 a/331 b/332))
--      (makeblock 0 (int,*) x/335 p/336))))
--(function a/331[int] b/332[int]
--  (if a/331 (makeblock 0 (int,*) a/331 [0: 1 1])
--    (makeblock 0 (int,*) a/331 (makeblock 0 a/331 b/332))))
-+(function a/332[int] b/333[int]
-+  (if a/332
-+    (let (x/334 =a[int] a/332 _p/335 =a (makeblock 0 a/332 b/333))
-+      (makeblock 0 (int,*) x/334 [0: 1 1]))
-+    (let (x/336 =a[int] a/332 p/337 =a (makeblock 0 a/332 b/333))
-+      (makeblock 0 (int,*) x/336 p/337))))
-+(function a/332[int] b/333[int]
-+  (if a/332 (makeblock 0 (int,*) a/332 [0: 1 1])
-+    (makeblock 0 (int,*) a/332 (makeblock 0 a/332 b/333))))
+-(function a/326[int] b/327[int]
+-  (if a/326
+-    (let (x/328 =a[int] a/326 _p/329 =a (makeblock 0 a/326 b/327))
+-      (makeblock 0 (int,*) x/328 [0: 1 1]))
+-    (let (x/330 =a[int] a/326 p/331 =a (makeblock 0 a/326 b/327))
+-      (makeblock 0 (int,*) x/330 p/331))))
+-(function a/326[int] b/327[int]
+-  (if a/326 (makeblock 0 (int,*) a/326 [0: 1 1])
+-    (makeblock 0 (int,*) a/326 (makeblock 0 a/326 b/327))))
++(function a/327[int] b/328[int]
++  (if a/327
++    (let (x/329 =a[int] a/327 _p/330 =a (makeblock 0 a/327 b/328))
++      (makeblock 0 (int,*) x/329 [0: 1 1]))
++    (let (x/331 =a[int] a/327 p/332 =a (makeblock 0 a/327 b/328))
++      (makeblock 0 (int,*) x/331 p/332))))
++(function a/327[int] b/328[int]
++  (if a/327 (makeblock 0 (int,*) a/327 [0: 1 1])
++    (makeblock 0 (int,*) a/327 (makeblock 0 a/327 b/328))))
  - : bool -> bool -> bool * (bool * bool) = <fun>
  |}]
  
@@ -436,16 +435,16 @@
  | ((false as x, _) as p) -> x, p
  (* inside, onecase *)
  [%%expect{|
--(function a/337[int] b/338
--  (let (x/339 =a[int] a/337 p/340 =a (makeblock 0 a/337 b/338))
--    (makeblock 0 (int,*) x/339 p/340)))
--(function a/337[int] b/338
--  (makeblock 0 (int,*) a/337 (makeblock 0 a/337 b/338)))
-+(function a/338[int] b/339
-+  (let (x/340 =a[int] a/338 p/341 =a (makeblock 0 a/338 b/339))
-+    (makeblock 0 (int,*) x/340 p/341)))
-+(function a/338[int] b/339
-+  (makeblock 0 (int,*) a/338 (makeblock 0 a/338 b/339)))
+-(function a/332[int] b/333
+-  (let (x/334 =a[int] a/332 p/335 =a (makeblock 0 a/332 b/333))
+-    (makeblock 0 (int,*) x/334 p/335)))
+-(function a/332[int] b/333
+-  (makeblock 0 (int,*) a/332 (makeblock 0 a/332 b/333)))
++(function a/333[int] b/334
++  (let (x/335 =a[int] a/333 p/336 =a (makeblock 0 a/333 b/334))
++    (makeblock 0 (int,*) x/335 p/336)))
++(function a/333[int] b/334
++  (makeblock 0 (int,*) a/333 (makeblock 0 a/333 b/334)))
  - : bool -> 'a -> bool * (bool * 'a) = <fun>
  |}]
  
@@ -453,20 +452,20 @@
  | (_, _) as p -> p
  (* outside, tuplist *)
  [%%expect {|
--(function a/350[int] b/351
-+(function a/351[int] b/352
+-(function a/345[int] b/346
++(function a/346[int] b/347
    (catch
--    (if a/350 (if b/351 (let (p/352 =a (field_imm 0 b/351)) p/352) (exit 12))
-+    (if a/351 (if b/352 (let (p/353 =a (field_imm 0 b/352)) p/353) (exit 12))
+-    (if a/345 (if b/346 (let (p/347 =a (field_imm 0 b/346)) p/347) (exit 12))
++    (if a/346 (if b/347 (let (p/348 =a (field_imm 0 b/347)) p/348) (exit 12))
        (exit 12))
--   with (12) (let (p/353 =a (makeblock 0 a/350 b/351)) p/353)))
--(function a/350[int] b/351
--  (catch (if a/350 (if b/351 (field_imm 0 b/351) (exit 12)) (exit 12))
--   with (12) (makeblock 0 a/350 b/351)))
-+   with (12) (let (p/354 =a (makeblock 0 a/351 b/352)) p/354)))
-+(function a/351[int] b/352
-+  (catch (if a/351 (if b/352 (field_imm 0 b/352) (exit 12)) (exit 12))
-+   with (12) (makeblock 0 a/351 b/352)))
+-   with (12) (let (p/348 =a (makeblock 0 a/345 b/346)) p/348)))
+-(function a/345[int] b/346
+-  (catch (if a/345 (if b/346 (field_imm 0 b/346) (exit 12)) (exit 12))
+-   with (12) (makeblock 0 a/345 b/346)))
++   with (12) (let (p/349 =a (makeblock 0 a/346 b/347)) p/349)))
++(function a/346[int] b/347
++  (catch (if a/346 (if b/347 (field_imm 0 b/347) (exit 12)) (exit 12))
++   with (12) (makeblock 0 a/346 b/347)))
  - : bool -> bool tuplist -> bool * bool tuplist = <fun>
  |}]
  
@@ -474,30 +473,30 @@
  | ((_, _) as p) -> p
  (* inside, tuplist *)
  [%%expect{|
--(function a/354[int] b/355
-+(function a/355[int] b/356
+-(function a/349[int] b/350
++(function a/350[int] b/351
    (catch
      (catch
--      (if a/354
--        (if b/355 (let (p/359 =a (field_imm 0 b/355)) (exit 13 p/359))
-+      (if a/355
-+        (if b/356 (let (p/360 =a (field_imm 0 b/356)) (exit 13 p/360))
+-      (if a/349
+-        (if b/350 (let (p/354 =a (field_imm 0 b/350)) (exit 13 p/354))
++      (if a/350
++        (if b/351 (let (p/355 =a (field_imm 0 b/351)) (exit 13 p/355))
            (exit 14))
          (exit 14))
--     with (14) (let (p/358 =a (makeblock 0 a/354 b/355)) (exit 13 p/358)))
--   with (13 p/356) p/356))
--(function a/354[int] b/355
-+     with (14) (let (p/359 =a (makeblock 0 a/355 b/356)) (exit 13 p/359)))
-+   with (13 p/357) p/357))
-+(function a/355[int] b/356
+-     with (14) (let (p/353 =a (makeblock 0 a/349 b/350)) (exit 13 p/353)))
+-   with (13 p/351) p/351))
+-(function a/349[int] b/350
++     with (14) (let (p/354 =a (makeblock 0 a/350 b/351)) (exit 13 p/354)))
++   with (13 p/352) p/352))
++(function a/350[int] b/351
    (catch
      (catch
--      (if a/354 (if b/355 (exit 13 (field_imm 0 b/355)) (exit 14)) (exit 14))
--     with (14) (exit 13 (makeblock 0 a/354 b/355)))
--   with (13 p/356) p/356))
-+      (if a/355 (if b/356 (exit 13 (field_imm 0 b/356)) (exit 14)) (exit 14))
-+     with (14) (exit 13 (makeblock 0 a/355 b/356)))
-+   with (13 p/357) p/357))
+-      (if a/349 (if b/350 (exit 13 (field_imm 0 b/350)) (exit 14)) (exit 14))
+-     with (14) (exit 13 (makeblock 0 a/349 b/350)))
+-   with (13 p/351) p/351))
++      (if a/350 (if b/351 (exit 13 (field_imm 0 b/351)) (exit 14)) (exit 14))
++     with (14) (exit 13 (makeblock 0 a/350 b/351)))
++   with (13 p/352) p/352))
  - : bool -> bool tuplist -> bool * bool tuplist = <fun>
  |}]
 diff --git a/testsuite/tests/generalized-open/gpr1506.ml b/testsuite/tests/generalized-open/gpr1506.ml
@@ -507,11 +506,11 @@
  Line 1, characters 15-41:
  1 | include struct open struct type t = T end let x = T end
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
--Error: The type t/338 introduced by this open appears in the signature
-+Error: The type t/339 introduced by this open appears in the signature
+-Error: The type t/333 introduced by this open appears in the signature
++Error: The type t/334 introduced by this open appears in the signature
         Line 1, characters 46-47:
--         The value x has no valid type if t/338 is hidden
-+         The value x has no valid type if t/339 is hidden
+-         The value x has no valid type if t/333 is hidden
++         The value x has no valid type if t/334 is hidden
  |}];;
  
  module A = struct
@@ -519,11 +518,11 @@
  4 |       type t = T
  5 |       let x = T
  6 |     end
--Error: The type t/343 introduced by this open appears in the signature
-+Error: The type t/344 introduced by this open appears in the signature
+-Error: The type t/338 introduced by this open appears in the signature
++Error: The type t/339 introduced by this open appears in the signature
         Line 7, characters 8-9:
--         The value y has no valid type if t/343 is hidden
-+         The value y has no valid type if t/344 is hidden
+-         The value y has no valid type if t/338 is hidden
++         The value y has no valid type if t/339 is hidden
  |}];;
  
  module A = struct
@@ -531,11 +530,11 @@
  3 | ....open struct
  4 |       type t = T
  5 |     end
--Error: The type t/348 introduced by this open appears in the signature
-+Error: The type t/349 introduced by this open appears in the signature
+-Error: The type t/343 introduced by this open appears in the signature
++Error: The type t/344 introduced by this open appears in the signature
         Line 6, characters 8-9:
--         The value y has no valid type if t/348 is hidden
-+         The value y has no valid type if t/349 is hidden
+-         The value y has no valid type if t/343 is hidden
++         The value y has no valid type if t/344 is hidden
  |}]
  
  (* It was decided to not allow this anymore. *)
@@ -546,8 +545,8 @@
  module F (X : sig type t end) = X
  [%%expect{|
  {
-- "F"[module] -> Abs<.4>(X/278, X/278<.3>);
-+ "F"[module] -> Abs<.4>(X/279, X/279<.3>);
+- "F"[module] -> Abs<.4>(X/273, X/273<.3>);
++ "F"[module] -> Abs<.4>(X/274, X/274<.3>);
   }
  module F : functor (X : sig type t end) -> sig type t = X.t end
  |}]
@@ -558,8 +557,8 @@
  module Falias (X : S) = X
  [%%expect{|
  {
-- "Falias"[module] -> Abs<.4>(X/280, X/280<.3>);
-+ "Falias"[module] -> Abs<.4>(X/281, X/281<.3>);
+- "Falias"[module] -> Abs<.4>(X/275, X/275<.3>);
++ "Falias"[module] -> Abs<.4>(X/276, X/276<.3>);
   }
  module Falias : functor (X : S) -> sig type t = X.t val x : t end
  |}]
@@ -567,13 +566,13 @@
  {
   "Finclude"[module] ->
     Abs<.6>
--      (X/284,
-+      (X/285,
+-      (X/279,
++      (X/280,
         {
--        "t"[type] -> X/284<.5> . "t"[type];
--        "x"[value] -> X/284<.5> . "x"[value];
-+        "t"[type] -> X/285<.5> . "t"[type];
-+        "x"[value] -> X/285<.5> . "x"[value];
+-        "t"[type] -> X/279<.5> . "t"[type];
+-        "x"[value] -> X/279<.5> . "x"[value];
++        "t"[type] -> X/280<.5> . "t"[type];
++        "x"[value] -> X/280<.5> . "x"[value];
          });
   }
  module Finclude : functor (X : S) -> sig type t = X.t val x : t end
@@ -581,8 +580,8 @@
  [%%expect{|
  {
   "Fredef"[module] ->
--   Abs<.10>(X/291, {
-+   Abs<.10>(X/292, {
+-   Abs<.10>(X/286, {
++   Abs<.10>(X/287, {
                      "t"[type] -> <.8>;
                      "x"[value] -> <.9>;
                      });
@@ -590,10 +589,10 @@
  [%%expect{|
  {
   "Big_to_small1"[module] ->
--   Abs<.40>(X/386, {<.39>
--                    "t"[type] -> X/386<.39> . "t"[type];
-+   Abs<.40>(X/387, {<.39>
-+                    "t"[type] -> X/387<.39> . "t"[type];
+-   Abs<.40>(X/381, {<.39>
+-                    "t"[type] -> X/381<.39> . "t"[type];
++   Abs<.40>(X/382, {<.39>
++                    "t"[type] -> X/382<.39> . "t"[type];
                      });
   }
  module Big_to_small1 : B2S
@@ -601,10 +600,10 @@
  [%%expect{|
  {
   "Big_to_small2"[module] ->
--   Abs<.42>(X/389, {
--                    "t"[type] -> X/389<.41> . "t"[type];
-+   Abs<.42>(X/390, {
-+                    "t"[type] -> X/390<.41> . "t"[type];
+-   Abs<.42>(X/384, {
+-                    "t"[type] -> X/384<.41> . "t"[type];
++   Abs<.42>(X/385, {
++                    "t"[type] -> X/385<.41> . "t"[type];
                      });
   }
  module Big_to_small2 : B2S
@@ -615,8 +614,8 @@
  
  [%%expect{|
  {
-- "Make"[module] -> Abs<.3>(I/280, {
-+ "Make"[module] -> Abs<.3>(I/281, {
+- "Make"[module] -> Abs<.3>(I/275, {
++ "Make"[module] -> Abs<.3>(I/276, {
                                     });
   }
  module Make : functor (I : sig end) -> sig end
@@ -627,10 +626,10 @@
  end = B
  [%%expect{|
  {
-- "A"[module] -> A/303<.11>;
-- "B"[module] -> B/304<.12>;
-+ "A"[module] -> A/304<.11>;
-+ "B"[module] -> B/305<.12>;
+- "A"[module] -> A/298<.11>;
+- "B"[module] -> B/299<.12>;
++ "A"[module] -> A/299<.11>;
++ "B"[module] -> B/300<.12>;
   }
  module rec A : sig type t = Leaf of B.t end
  and B : sig type t = int end
@@ -638,15 +637,15 @@
   "ASet"[module] ->
     {
      "compare"[value] ->
--      CU Stdlib . "Set"[module] . "Make"[module](A/325<.19>) .
-+      CU Stdlib . "Set"[module] . "Make"[module](A/326<.19>) .
+-      CU Stdlib . "Set"[module] . "Make"[module](A/320<.19>) .
++      CU Stdlib . "Set"[module] . "Make"[module](A/321<.19>) .
        "compare"[value];
      "elt"[type] ->
--      CU Stdlib . "Set"[module] . "Make"[module](A/325<.19>) . "elt"[type];
-+      CU Stdlib . "Set"[module] . "Make"[module](A/326<.19>) . "elt"[type];
+-      CU Stdlib . "Set"[module] . "Make"[module](A/320<.19>) . "elt"[type];
++      CU Stdlib . "Set"[module] . "Make"[module](A/321<.19>) . "elt"[type];
      "t"[type] ->
--      CU Stdlib . "Set"[module] . "Make"[module](A/325<.19>) . "t"[type];
-+      CU Stdlib . "Set"[module] . "Make"[module](A/326<.19>) . "t"[type];
+-      CU Stdlib . "Set"[module] . "Make"[module](A/320<.19>) . "t"[type];
++      CU Stdlib . "Set"[module] . "Make"[module](A/321<.19>) . "t"[type];
      };
   }
  module rec A :
@@ -657,8 +656,8 @@
  [%%expect{|
  {
   "Pair"[module] ->
--   Abs<.9>(X/280, Y/281, {
-+   Abs<.9>(X/281, Y/282, {
+-   Abs<.9>(X/275, Y/276, {
++   Abs<.9>(X/276, Y/277, {
                            "t"[type] -> <.5>;
                            "to_string"[value] -> <.6>;
                            });
@@ -669,14 +668,14 @@
  Line 3, characters 2-36:
  3 |   include Comparable with type t = t
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
--Error: Illegal shadowing of included type t/285 by t/290
-+Error: Illegal shadowing of included type t/286 by t/291
+-Error: Illegal shadowing of included type t/280 by t/285
++Error: Illegal shadowing of included type t/281 by t/286
         Line 2, characters 2-19:
--         Type t/285 came from this include
-+         Type t/286 came from this include
+-         Type t/280 came from this include
++         Type t/281 came from this include
         Line 3, characters 2-23:
--         The value print has no valid type if t/285 is shadowed
-+         The value print has no valid type if t/286 is shadowed
+-         The value print has no valid type if t/280 is shadowed
++         The value print has no valid type if t/281 is shadowed
  |}]
  
  module type Sunderscore = sig
