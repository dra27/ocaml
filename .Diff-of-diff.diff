--- a	2023-09-28 18:43:31.111246677 +0100
+++ b	2023-09-28 18:43:31.135247682 +0100
@@ -73,9 +73,9 @@
 diff --git a/api_docgen/Makefile.docfiles b/api_docgen/Makefile.docfiles
 --- a/api_docgen/Makefile.docfiles
 +++ b/api_docgen/Makefile.docfiles
-@@ -37,9 +37,9 @@ dynlink_MLIS := dynlink.mli
- thread_MLIS := \
-   thread.mli event.mli
+@@ -38,9 +38,9 @@ thread_MLIS := \
+   thread.mli condition.mli mutex.mli event.mli \
+   semaphore.mli
  
 -STDLIB=$(filter-out stdlib__Pervasives, $(STDLIB_MODULES))
 +STDLIB=$(STDLIB_MODULES)
@@ -85,7 +85,7 @@
  
  otherlibref := $(dynlink_MLIS:%.mli=%)
  
-@@ -55,9 +55,8 @@ ifneq "$(filter systhreads,$(OTHERLIBRARIES))" ""
+@@ -56,9 +56,8 @@ ifneq "$(filter systhreads,$(OTHERLIBRARIES))" ""
  otherlibref += $(thread_MLIS:%.mli=%)
  endif
  
@@ -101,7 +101,7 @@
 diff --git a/configure.ac b/configure.ac
 --- a/configure.ac
 +++ b/configure.ac
-@@ -273,9 +273,10 @@ AC_ARG_ENABLE([unix-lib],
+@@ -275,9 +275,10 @@ AC_ARG_ENABLE([unix-lib],
    [AS_HELP_STRING([--disable-unix-lib],
      [do not build the unix library])])
  
@@ -115,7 +115,7 @@
  
  AC_ARG_ENABLE([ocamldoc],
    [AS_HELP_STRING([--disable-ocamldoc],
-@@ -425,9 +426,7 @@ AC_ARG_WITH([flexdll],
+@@ -434,9 +435,7 @@ AC_ARG_WITH([flexdll],
  AS_IF([test x"$enable_unix_lib" = "xno"],
    [AS_IF([test x"$enable_debugger" = "xyes"],
      [AC_MSG_ERROR([replay debugger requires the unix library])],
@@ -126,7 +126,7 @@
  
  AS_IF([test x"$enable_unix_lib" = "xno" -o x"$enable_str_lib" = "xno"],
    [AS_IF([test x"$enable_ocamldoc" = "xyes"],
-@@ -547,9 +546,7 @@ AS_CASE([$host],
+@@ -556,9 +555,7 @@ AS_CASE([$host],
  otherlibraries="dynlink"
  AS_IF([test x"$enable_unix_lib" != "xno"],
    [enable_unix_lib=yes
@@ -171,7 +171,7 @@
  \stddocitem{In_channel}{input channels}
  \stddocitem{Int}{integers}
 @@ -171,7 +168,6 @@ be called from C \\
- \stddocitem{Semaphore}{semaphores, another thread synchronization mechanism}
+ %\stddocitem{Semaphore}{semaphores, another thread synchronization mechanism}
  \stddocitem{Stack}{last-in first-out stacks}
  \stddocitem{StdLabels}{include modules \texttt{Array}, \texttt{List} and \texttt{String} with labels}
 -\stddocitem{Stream}{streams and parsers}
@@ -288,7 +288,7 @@
 diff --git a/stdlib/.depend b/stdlib/.depend
 --- a/stdlib/.depend
 +++ b/stdlib/.depend
-@@ -362,24 +362,6 @@ stdlib__Gc.cmx : gc.ml \
+@@ -324,24 +324,6 @@ stdlib__Gc.cmx : gc.ml \
      stdlib__Gc.cmi
  stdlib__Gc.cmi : gc.mli \
      stdlib__Printexc.cmi
@@ -313,7 +313,7 @@
  stdlib__Hashtbl.cmo : hashtbl.ml \
      stdlib__Sys.cmi \
      stdlib__String.cmi \
-@@ -581,10 +563,6 @@ stdlib__Parsing.cmx : parsing.ml \
+@@ -538,10 +520,6 @@ stdlib__Parsing.cmx : parsing.ml \
  stdlib__Parsing.cmi : parsing.mli \
      stdlib__Obj.cmi \
      stdlib__Lexing.cmi
@@ -324,7 +324,7 @@
  stdlib__Printexc.cmo : printexc.ml \
      stdlib.cmi \
      stdlib__Printf.cmi \
-@@ -738,19 +716,6 @@ stdlib__StdLabels.cmi : stdLabels.mli \
+@@ -684,19 +662,6 @@ stdlib__StdLabels.cmi : stdLabels.mli \
      stdlib__ArrayLabels.cmi
  std_exit.cmo :
  std_exit.cmx :
@@ -358,13 +358,13 @@
    list int bytes string unit marshal array float int32 int64 nativeint \
 -  lexing parsing set map stack queue stream buffer \
 +  lexing parsing set map stack queue buffer \
-   atomic mutex condition semaphore domain \
+   atomic \
    camlinternalFormat printf arg \
    printexc fun gc digest bigarray random hashtbl weak \
 -  format scanf callback camlinternalOO oo camlinternalMod genlex ephemeron \
 +  format scanf callback camlinternalOO oo camlinternalMod ephemeron \
    filename complex arrayLabels listLabels bytesLabels stringLabels moreLabels \
-   stdLabels in_channel out_channel effect
+   stdLabels in_channel out_channel
  
 diff --git a/stdlib/genlex.ml b/stdlib/genlex.ml
 deleted file mode 100644
@@ -906,7 +906,7 @@
 diff --git a/stdlib/stdlib.ml b/stdlib/stdlib.ml
 --- a/stdlib/stdlib.ml
 +++ b/stdlib/stdlib.ml
-@@ -593,7 +593,6 @@ module Float          = Float
+@@ -604,7 +604,6 @@ module Float          = Float
  module Format         = Format
  module Fun            = Fun
  module Gc             = Gc
@@ -914,7 +914,7 @@
  module Hashtbl        = Hashtbl
  module In_channel     = In_channel
  module Int            = Int
-@@ -613,7 +612,6 @@ module Oo             = Oo
+@@ -626,7 +625,6 @@ module Oo             = Oo
  module Option         = Option
  module Out_channel    = Out_channel
  module Parsing        = Parsing
@@ -922,7 +922,7 @@
  module Printexc       = Printexc
  module Printf         = Printf
  module Queue          = Queue
-@@ -625,7 +623,6 @@ module Seq            = Seq
+@@ -640,7 +638,6 @@ module Seq            = Seq
  module Set            = Set
  module Stack          = Stack
  module StdLabels      = StdLabels
@@ -933,7 +933,7 @@
 diff --git a/stdlib/stdlib.mli b/stdlib/stdlib.mli
 --- a/stdlib/stdlib.mli
 +++ b/stdlib/stdlib.mli
-@@ -1387,8 +1387,6 @@ module Float          = Float
+@@ -1391,8 +1391,6 @@ module Float          = Float
  module Format         = Format
  module Fun            = Fun
  module Gc             = Gc
@@ -942,7 +942,7 @@
  module Hashtbl        = Hashtbl
  module In_channel     = In_channel
  module Int            = Int
-@@ -1408,11 +1406,6 @@ module Oo             = Oo
+@@ -1414,11 +1412,6 @@ module Oo             = Oo
  module Option         = Option
  module Out_channel    = Out_channel
  module Parsing        = Parsing
@@ -954,7 +954,7 @@
  module Printexc       = Printexc
  module Printf         = Printf
  module Queue          = Queue
-@@ -1424,8 +1417,6 @@ module Seq            = Seq
+@@ -1432,8 +1425,6 @@ module Seq            = Seq
  module Set            = Set
  module Stack          = Stack
  module StdLabels      = StdLabels
@@ -1327,20 +1327,20 @@
  | _ -> false
  ;;
  [%%expect{|
--(let (*match*/277 = 3 *match*/278 = 2 *match*/279 = 1)
-+(let (*match*/274 = 3 *match*/275 = 2 *match*/276 = 1)
+-(let (*match*/272 = 3 *match*/273 = 2 *match*/274 = 1)
++(let (*match*/269 = 3 *match*/270 = 2 *match*/271 = 1)
    (catch
      (catch
--      (catch (if (!= *match*/278 3) (exit 3) (exit 1)) with (3)
--        (if (!= *match*/277 1) (exit 2) (exit 1)))
-+      (catch (if (!= *match*/275 3) (exit 3) (exit 1)) with (3)
-+        (if (!= *match*/274 1) (exit 2) (exit 1)))
+-      (catch (if (!= *match*/273 3) (exit 3) (exit 1)) with (3)
+-        (if (!= *match*/272 1) (exit 2) (exit 1)))
++      (catch (if (!= *match*/270 3) (exit 3) (exit 1)) with (3)
++        (if (!= *match*/269 1) (exit 2) (exit 1)))
       with (2) 0)
     with (1) 1))
--(let (*match*/277 = 3 *match*/278 = 2 *match*/279 = 1)
--  (catch (if (!= *match*/278 3) (if (!= *match*/277 1) 0 (exit 1)) (exit 1))
-+(let (*match*/274 = 3 *match*/275 = 2 *match*/276 = 1)
-+  (catch (if (!= *match*/275 3) (if (!= *match*/274 1) 0 (exit 1)) (exit 1))
+-(let (*match*/272 = 3 *match*/273 = 2 *match*/274 = 1)
+-  (catch (if (!= *match*/273 3) (if (!= *match*/272 1) 0 (exit 1)) (exit 1))
++(let (*match*/269 = 3 *match*/270 = 2 *match*/271 = 1)
++  (catch (if (!= *match*/270 3) (if (!= *match*/269 1) 0 (exit 1)) (exit 1))
     with (1) 1))
  - : bool = false
  |}];;
@@ -1348,40 +1348,40 @@
  | _ -> false
  ;;
  [%%expect{|
--(let (*match*/282 = 3 *match*/283 = 2 *match*/284 = 1)
-+(let (*match*/279 = 3 *match*/280 = 2 *match*/281 = 1)
+-(let (*match*/277 = 3 *match*/278 = 2 *match*/279 = 1)
++(let (*match*/274 = 3 *match*/275 = 2 *match*/276 = 1)
    (catch
      (catch
        (catch
--        (if (!= *match*/283 3) (exit 6)
--          (let (x/286 =a (makeblock 0 *match*/282 *match*/283 *match*/284))
--            (exit 4 x/286)))
-+        (if (!= *match*/280 3) (exit 6)
-+          (let (x/283 =a (makeblock 0 *match*/279 *match*/280 *match*/281))
-+            (exit 4 x/283)))
+-        (if (!= *match*/278 3) (exit 6)
+-          (let (x/281 =a (makeblock 0 *match*/277 *match*/278 *match*/279))
+-            (exit 4 x/281)))
++        (if (!= *match*/275 3) (exit 6)
++          (let (x/278 =a (makeblock 0 *match*/274 *match*/275 *match*/276))
++            (exit 4 x/278)))
         with (6)
--        (if (!= *match*/282 1) (exit 5)
--          (let (x/285 =a (makeblock 0 *match*/282 *match*/283 *match*/284))
--            (exit 4 x/285))))
-+        (if (!= *match*/279 1) (exit 5)
-+          (let (x/282 =a (makeblock 0 *match*/279 *match*/280 *match*/281))
-+            (exit 4 x/282))))
+-        (if (!= *match*/277 1) (exit 5)
+-          (let (x/280 =a (makeblock 0 *match*/277 *match*/278 *match*/279))
+-            (exit 4 x/280))))
++        (if (!= *match*/274 1) (exit 5)
++          (let (x/277 =a (makeblock 0 *match*/274 *match*/275 *match*/276))
++            (exit 4 x/277))))
       with (5) 0)
--   with (4 x/280) (seq (ignore x/280) 1)))
--(let (*match*/282 = 3 *match*/283 = 2 *match*/284 = 1)
-+   with (4 x/277) (seq (ignore x/277) 1)))
-+(let (*match*/279 = 3 *match*/280 = 2 *match*/281 = 1)
+-   with (4 x/275) (seq (ignore x/275) 1)))
+-(let (*match*/277 = 3 *match*/278 = 2 *match*/279 = 1)
++   with (4 x/272) (seq (ignore x/272) 1)))
++(let (*match*/274 = 3 *match*/275 = 2 *match*/276 = 1)
    (catch
--    (if (!= *match*/283 3)
--      (if (!= *match*/282 1) 0
--        (exit 4 (makeblock 0 *match*/282 *match*/283 *match*/284)))
--      (exit 4 (makeblock 0 *match*/282 *match*/283 *match*/284)))
--   with (4 x/280) (seq (ignore x/280) 1)))
-+    (if (!= *match*/280 3)
-+      (if (!= *match*/279 1) 0
-+        (exit 4 (makeblock 0 *match*/279 *match*/280 *match*/281)))
-+      (exit 4 (makeblock 0 *match*/279 *match*/280 *match*/281)))
-+   with (4 x/277) (seq (ignore x/277) 1)))
+-    (if (!= *match*/278 3)
+-      (if (!= *match*/277 1) 0
+-        (exit 4 (makeblock 0 *match*/277 *match*/278 *match*/279)))
+-      (exit 4 (makeblock 0 *match*/277 *match*/278 *match*/279)))
+-   with (4 x/275) (seq (ignore x/275) 1)))
++    (if (!= *match*/275 3)
++      (if (!= *match*/274 1) 0
++        (exit 4 (makeblock 0 *match*/274 *match*/275 *match*/276)))
++      (exit 4 (makeblock 0 *match*/274 *match*/275 *match*/276)))
++   with (4 x/272) (seq (ignore x/272) 1)))
  - : bool = false
  |}];;
  
@@ -1389,10 +1389,10 @@
    | ((true, _) as _g)
    | ((false, _) as _g) -> ()
  [%%expect{|
--(function a/287[int] b/288 : int 0)
--(function a/287[int] b/288 : int 0)
-+(function a/284[int] b/285 : int 0)
-+(function a/284[int] b/285 : int 0)
+-(function a/282[int] b/283 : int 0)
+-(function a/282[int] b/283 : int 0)
++(function a/279[int] b/280 : int 0)
++(function a/279[int] b/280 : int 0)
  - : bool -> 'a -> unit = <fun>
  |}];;
  
@@ -1400,10 +1400,10 @@
  | (false, _) as p -> p
  (* outside, trivial *)
  [%%expect {|
--(function a/291[int] b/292 (let (p/293 =a (makeblock 0 a/291 b/292)) p/293))
--(function a/291[int] b/292 (makeblock 0 a/291 b/292))
-+(function a/288[int] b/289 (let (p/290 =a (makeblock 0 a/288 b/289)) p/290))
-+(function a/288[int] b/289 (makeblock 0 a/288 b/289))
+-(function a/286[int] b/287 (let (p/288 =a (makeblock 0 a/286 b/287)) p/288))
+-(function a/286[int] b/287 (makeblock 0 a/286 b/287))
++(function a/283[int] b/284 (let (p/285 =a (makeblock 0 a/283 b/284)) p/285))
++(function a/283[int] b/284 (makeblock 0 a/283 b/284))
  - : bool -> 'a -> bool * 'a = <fun>
  |}]
  
@@ -1411,10 +1411,10 @@
  | ((false, _) as p) -> p
  (* inside, trivial *)
  [%%expect{|
--(function a/295[int] b/296 (let (p/297 =a (makeblock 0 a/295 b/296)) p/297))
--(function a/295[int] b/296 (makeblock 0 a/295 b/296))
-+(function a/292[int] b/293 (let (p/294 =a (makeblock 0 a/292 b/293)) p/294))
-+(function a/292[int] b/293 (makeblock 0 a/292 b/293))
+-(function a/290[int] b/291 (let (p/292 =a (makeblock 0 a/290 b/291)) p/292))
+-(function a/290[int] b/291 (makeblock 0 a/290 b/291))
++(function a/287[int] b/288 (let (p/289 =a (makeblock 0 a/287 b/288)) p/289))
++(function a/287[int] b/288 (makeblock 0 a/287 b/288))
  - : bool -> 'a -> bool * 'a = <fun>
  |}];;
  
@@ -1422,16 +1422,16 @@
  | (false as x, _) as p -> x, p
  (* outside, simple *)
  [%%expect {|
--(function a/301[int] b/302
--  (let (x/303 =a[int] a/301 p/304 =a (makeblock 0 a/301 b/302))
--    (makeblock 0 (int,*) x/303 p/304)))
--(function a/301[int] b/302
--  (makeblock 0 (int,*) a/301 (makeblock 0 a/301 b/302)))
-+(function a/298[int] b/299
-+  (let (x/300 =a[int] a/298 p/301 =a (makeblock 0 a/298 b/299))
-+    (makeblock 0 (int,*) x/300 p/301)))
-+(function a/298[int] b/299
-+  (makeblock 0 (int,*) a/298 (makeblock 0 a/298 b/299)))
+-(function a/296[int] b/297
+-  (let (x/298 =a[int] a/296 p/299 =a (makeblock 0 a/296 b/297))
+-    (makeblock 0 (int,*) x/298 p/299)))
+-(function a/296[int] b/297
+-  (makeblock 0 (int,*) a/296 (makeblock 0 a/296 b/297)))
++(function a/293[int] b/294
++  (let (x/295 =a[int] a/293 p/296 =a (makeblock 0 a/293 b/294))
++    (makeblock 0 (int,*) x/295 p/296)))
++(function a/293[int] b/294
++  (makeblock 0 (int,*) a/293 (makeblock 0 a/293 b/294)))
  - : bool -> 'a -> bool * (bool * 'a) = <fun>
  |}]
  
@@ -1439,16 +1439,16 @@
  | ((false as x, _) as p) -> x, p
  (* inside, simple *)
  [%%expect {|
--(function a/307[int] b/308
--  (let (x/309 =a[int] a/307 p/310 =a (makeblock 0 a/307 b/308))
--    (makeblock 0 (int,*) x/309 p/310)))
--(function a/307[int] b/308
--  (makeblock 0 (int,*) a/307 (makeblock 0 a/307 b/308)))
-+(function a/304[int] b/305
-+  (let (x/306 =a[int] a/304 p/307 =a (makeblock 0 a/304 b/305))
-+    (makeblock 0 (int,*) x/306 p/307)))
-+(function a/304[int] b/305
-+  (makeblock 0 (int,*) a/304 (makeblock 0 a/304 b/305)))
+-(function a/302[int] b/303
+-  (let (x/304 =a[int] a/302 p/305 =a (makeblock 0 a/302 b/303))
+-    (makeblock 0 (int,*) x/304 p/305)))
+-(function a/302[int] b/303
+-  (makeblock 0 (int,*) a/302 (makeblock 0 a/302 b/303)))
++(function a/299[int] b/300
++  (let (x/301 =a[int] a/299 p/302 =a (makeblock 0 a/299 b/300))
++    (makeblock 0 (int,*) x/301 p/302)))
++(function a/299[int] b/300
++  (makeblock 0 (int,*) a/299 (makeblock 0 a/299 b/300)))
  - : bool -> 'a -> bool * (bool * 'a) = <fun>
  |}]
  
@@ -1456,24 +1456,24 @@
  | (false, x) as p -> x, p
  (* outside, complex *)
  [%%expect{|
--(function a/317[int] b/318[int]
--  (if a/317
--    (let (x/319 =a[int] a/317 p/320 =a (makeblock 0 a/317 b/318))
--      (makeblock 0 (int,*) x/319 p/320))
--    (let (x/321 =a b/318 p/322 =a (makeblock 0 a/317 b/318))
--      (makeblock 0 (int,*) x/321 p/322))))
--(function a/317[int] b/318[int]
--  (if a/317 (makeblock 0 (int,*) a/317 (makeblock 0 a/317 b/318))
--    (makeblock 0 (int,*) b/318 (makeblock 0 a/317 b/318))))
-+(function a/314[int] b/315[int]
-+  (if a/314
-+    (let (x/316 =a[int] a/314 p/317 =a (makeblock 0 a/314 b/315))
-+      (makeblock 0 (int,*) x/316 p/317))
-+    (let (x/318 =a b/315 p/319 =a (makeblock 0 a/314 b/315))
-+      (makeblock 0 (int,*) x/318 p/319))))
-+(function a/314[int] b/315[int]
-+  (if a/314 (makeblock 0 (int,*) a/314 (makeblock 0 a/314 b/315))
-+    (makeblock 0 (int,*) b/315 (makeblock 0 a/314 b/315))))
+-(function a/312[int] b/313[int]
+-  (if a/312
+-    (let (x/314 =a[int] a/312 p/315 =a (makeblock 0 a/312 b/313))
+-      (makeblock 0 (int,*) x/314 p/315))
+-    (let (x/316 =a b/313 p/317 =a (makeblock 0 a/312 b/313))
+-      (makeblock 0 (int,*) x/316 p/317))))
+-(function a/312[int] b/313[int]
+-  (if a/312 (makeblock 0 (int,*) a/312 (makeblock 0 a/312 b/313))
+-    (makeblock 0 (int,*) b/313 (makeblock 0 a/312 b/313))))
++(function a/309[int] b/310[int]
++  (if a/309
++    (let (x/311 =a[int] a/309 p/312 =a (makeblock 0 a/309 b/310))
++      (makeblock 0 (int,*) x/311 p/312))
++    (let (x/313 =a b/310 p/314 =a (makeblock 0 a/309 b/310))
++      (makeblock 0 (int,*) x/313 p/314))))
++(function a/309[int] b/310[int]
++  (if a/309 (makeblock 0 (int,*) a/309 (makeblock 0 a/309 b/310))
++    (makeblock 0 (int,*) b/310 (makeblock 0 a/309 b/310))))
  - : bool -> bool -> bool * (bool * bool) = <fun>
  |}]
  
@@ -1481,30 +1481,30 @@
    -> x, p
  (* inside, complex *)
  [%%expect{|
--(function a/323[int] b/324[int]
-+(function a/320[int] b/321[int]
+-(function a/318[int] b/319[int]
++(function a/315[int] b/316[int]
    (catch
--    (if a/323
--      (let (x/331 =a[int] a/323 p/332 =a (makeblock 0 a/323 b/324))
--        (exit 10 x/331 p/332))
--      (let (x/329 =a b/324 p/330 =a (makeblock 0 a/323 b/324))
--        (exit 10 x/329 p/330)))
--   with (10 x/325[int] p/326) (makeblock 0 (int,*) x/325 p/326)))
--(function a/323[int] b/324[int]
-+    (if a/320
-+      (let (x/328 =a[int] a/320 p/329 =a (makeblock 0 a/320 b/321))
-+        (exit 10 x/328 p/329))
-+      (let (x/326 =a b/321 p/327 =a (makeblock 0 a/320 b/321))
-+        (exit 10 x/326 p/327)))
-+   with (10 x/322[int] p/323) (makeblock 0 (int,*) x/322 p/323)))
-+(function a/320[int] b/321[int]
+-    (if a/318
+-      (let (x/326 =a[int] a/318 p/327 =a (makeblock 0 a/318 b/319))
+-        (exit 10 x/326 p/327))
+-      (let (x/324 =a b/319 p/325 =a (makeblock 0 a/318 b/319))
+-        (exit 10 x/324 p/325)))
+-   with (10 x/320[int] p/321) (makeblock 0 (int,*) x/320 p/321)))
+-(function a/318[int] b/319[int]
++    (if a/315
++      (let (x/323 =a[int] a/315 p/324 =a (makeblock 0 a/315 b/316))
++        (exit 10 x/323 p/324))
++      (let (x/321 =a b/316 p/322 =a (makeblock 0 a/315 b/316))
++        (exit 10 x/321 p/322)))
++   with (10 x/317[int] p/318) (makeblock 0 (int,*) x/317 p/318)))
++(function a/315[int] b/316[int]
    (catch
--    (if a/323 (exit 10 a/323 (makeblock 0 a/323 b/324))
--      (exit 10 b/324 (makeblock 0 a/323 b/324)))
--   with (10 x/325[int] p/326) (makeblock 0 (int,*) x/325 p/326)))
-+    (if a/320 (exit 10 a/320 (makeblock 0 a/320 b/321))
-+      (exit 10 b/321 (makeblock 0 a/320 b/321)))
-+   with (10 x/322[int] p/323) (makeblock 0 (int,*) x/322 p/323)))
+-    (if a/318 (exit 10 a/318 (makeblock 0 a/318 b/319))
+-      (exit 10 b/319 (makeblock 0 a/318 b/319)))
+-   with (10 x/320[int] p/321) (makeblock 0 (int,*) x/320 p/321)))
++    (if a/315 (exit 10 a/315 (makeblock 0 a/315 b/316))
++      (exit 10 b/316 (makeblock 0 a/315 b/316)))
++   with (10 x/317[int] p/318) (makeblock 0 (int,*) x/317 p/318)))
  - : bool -> bool -> bool * (bool * bool) = <fun>
  |}]
  
@@ -1512,24 +1512,24 @@
  | (false as x, _) as p -> x, p
  (* outside, onecase *)
  [%%expect {|
--(function a/333[int] b/334[int]
--  (if a/333
--    (let (x/335 =a[int] a/333 _p/336 =a (makeblock 0 a/333 b/334))
--      (makeblock 0 (int,*) x/335 [0: 1 1]))
--    (let (x/337 =a[int] a/333 p/338 =a (makeblock 0 a/333 b/334))
--      (makeblock 0 (int,*) x/337 p/338))))
--(function a/333[int] b/334[int]
--  (if a/333 (makeblock 0 (int,*) a/333 [0: 1 1])
--    (makeblock 0 (int,*) a/333 (makeblock 0 a/333 b/334))))
-+(function a/330[int] b/331[int]
-+  (if a/330
-+    (let (x/332 =a[int] a/330 _p/333 =a (makeblock 0 a/330 b/331))
-+      (makeblock 0 (int,*) x/332 [0: 1 1]))
-+    (let (x/334 =a[int] a/330 p/335 =a (makeblock 0 a/330 b/331))
-+      (makeblock 0 (int,*) x/334 p/335))))
-+(function a/330[int] b/331[int]
-+  (if a/330 (makeblock 0 (int,*) a/330 [0: 1 1])
-+    (makeblock 0 (int,*) a/330 (makeblock 0 a/330 b/331))))
+-(function a/328[int] b/329[int]
+-  (if a/328
+-    (let (x/330 =a[int] a/328 _p/331 =a (makeblock 0 a/328 b/329))
+-      (makeblock 0 (int,*) x/330 [0: 1 1]))
+-    (let (x/332 =a[int] a/328 p/333 =a (makeblock 0 a/328 b/329))
+-      (makeblock 0 (int,*) x/332 p/333))))
+-(function a/328[int] b/329[int]
+-  (if a/328 (makeblock 0 (int,*) a/328 [0: 1 1])
+-    (makeblock 0 (int,*) a/328 (makeblock 0 a/328 b/329))))
++(function a/325[int] b/326[int]
++  (if a/325
++    (let (x/327 =a[int] a/325 _p/328 =a (makeblock 0 a/325 b/326))
++      (makeblock 0 (int,*) x/327 [0: 1 1]))
++    (let (x/329 =a[int] a/325 p/330 =a (makeblock 0 a/325 b/326))
++      (makeblock 0 (int,*) x/329 p/330))))
++(function a/325[int] b/326[int]
++  (if a/325 (makeblock 0 (int,*) a/325 [0: 1 1])
++    (makeblock 0 (int,*) a/325 (makeblock 0 a/325 b/326))))
  - : bool -> bool -> bool * (bool * bool) = <fun>
  |}]
  
@@ -1537,16 +1537,16 @@
  | ((false as x, _) as p) -> x, p
  (* inside, onecase *)
  [%%expect{|
--(function a/339[int] b/340
--  (let (x/341 =a[int] a/339 p/342 =a (makeblock 0 a/339 b/340))
--    (makeblock 0 (int,*) x/341 p/342)))
--(function a/339[int] b/340
--  (makeblock 0 (int,*) a/339 (makeblock 0 a/339 b/340)))
-+(function a/336[int] b/337
-+  (let (x/338 =a[int] a/336 p/339 =a (makeblock 0 a/336 b/337))
-+    (makeblock 0 (int,*) x/338 p/339)))
-+(function a/336[int] b/337
-+  (makeblock 0 (int,*) a/336 (makeblock 0 a/336 b/337)))
+-(function a/334[int] b/335
+-  (let (x/336 =a[int] a/334 p/337 =a (makeblock 0 a/334 b/335))
+-    (makeblock 0 (int,*) x/336 p/337)))
+-(function a/334[int] b/335
+-  (makeblock 0 (int,*) a/334 (makeblock 0 a/334 b/335)))
++(function a/331[int] b/332
++  (let (x/333 =a[int] a/331 p/334 =a (makeblock 0 a/331 b/332))
++    (makeblock 0 (int,*) x/333 p/334)))
++(function a/331[int] b/332
++  (makeblock 0 (int,*) a/331 (makeblock 0 a/331 b/332)))
  - : bool -> 'a -> bool * (bool * 'a) = <fun>
  |}]
  
@@ -1554,20 +1554,20 @@
  | (_, _) as p -> p
  (* outside, tuplist *)
  [%%expect {|
--(function a/352[int] b/353
-+(function a/349[int] b/350
+-(function a/347[int] b/348
++(function a/344[int] b/345
    (catch
--    (if a/352 (if b/353 (let (p/354 =a (field_imm 0 b/353)) p/354) (exit 12))
-+    (if a/349 (if b/350 (let (p/351 =a (field_imm 0 b/350)) p/351) (exit 12))
+-    (if a/347 (if b/348 (let (p/349 =a (field_imm 0 b/348)) p/349) (exit 12))
++    (if a/344 (if b/345 (let (p/346 =a (field_imm 0 b/345)) p/346) (exit 12))
        (exit 12))
--   with (12) (let (p/355 =a (makeblock 0 a/352 b/353)) p/355)))
--(function a/352[int] b/353
--  (catch (if a/352 (if b/353 (field_imm 0 b/353) (exit 12)) (exit 12))
--   with (12) (makeblock 0 a/352 b/353)))
-+   with (12) (let (p/352 =a (makeblock 0 a/349 b/350)) p/352)))
-+(function a/349[int] b/350
-+  (catch (if a/349 (if b/350 (field_imm 0 b/350) (exit 12)) (exit 12))
-+   with (12) (makeblock 0 a/349 b/350)))
+-   with (12) (let (p/350 =a (makeblock 0 a/347 b/348)) p/350)))
+-(function a/347[int] b/348
+-  (catch (if a/347 (if b/348 (field_imm 0 b/348) (exit 12)) (exit 12))
+-   with (12) (makeblock 0 a/347 b/348)))
++   with (12) (let (p/347 =a (makeblock 0 a/344 b/345)) p/347)))
++(function a/344[int] b/345
++  (catch (if a/344 (if b/345 (field_imm 0 b/345) (exit 12)) (exit 12))
++   with (12) (makeblock 0 a/344 b/345)))
  - : bool -> bool tuplist -> bool * bool tuplist = <fun>
  |}]
  
@@ -1575,30 +1575,30 @@
  | ((_, _) as p) -> p
  (* inside, tuplist *)
  [%%expect{|
--(function a/356[int] b/357
-+(function a/353[int] b/354
+-(function a/351[int] b/352
++(function a/348[int] b/349
    (catch
      (catch
--      (if a/356
--        (if b/357 (let (p/361 =a (field_imm 0 b/357)) (exit 13 p/361))
-+      (if a/353
-+        (if b/354 (let (p/358 =a (field_imm 0 b/354)) (exit 13 p/358))
+-      (if a/351
+-        (if b/352 (let (p/356 =a (field_imm 0 b/352)) (exit 13 p/356))
++      (if a/348
++        (if b/349 (let (p/353 =a (field_imm 0 b/349)) (exit 13 p/353))
            (exit 14))
          (exit 14))
--     with (14) (let (p/360 =a (makeblock 0 a/356 b/357)) (exit 13 p/360)))
--   with (13 p/358) p/358))
--(function a/356[int] b/357
-+     with (14) (let (p/357 =a (makeblock 0 a/353 b/354)) (exit 13 p/357)))
-+   with (13 p/355) p/355))
-+(function a/353[int] b/354
+-     with (14) (let (p/355 =a (makeblock 0 a/351 b/352)) (exit 13 p/355)))
+-   with (13 p/353) p/353))
+-(function a/351[int] b/352
++     with (14) (let (p/352 =a (makeblock 0 a/348 b/349)) (exit 13 p/352)))
++   with (13 p/350) p/350))
++(function a/348[int] b/349
    (catch
      (catch
--      (if a/356 (if b/357 (exit 13 (field_imm 0 b/357)) (exit 14)) (exit 14))
--     with (14) (exit 13 (makeblock 0 a/356 b/357)))
--   with (13 p/358) p/358))
-+      (if a/353 (if b/354 (exit 13 (field_imm 0 b/354)) (exit 14)) (exit 14))
-+     with (14) (exit 13 (makeblock 0 a/353 b/354)))
-+   with (13 p/355) p/355))
+-      (if a/351 (if b/352 (exit 13 (field_imm 0 b/352)) (exit 14)) (exit 14))
+-     with (14) (exit 13 (makeblock 0 a/351 b/352)))
+-   with (13 p/353) p/353))
++      (if a/348 (if b/349 (exit 13 (field_imm 0 b/349)) (exit 14)) (exit 14))
++     with (14) (exit 13 (makeblock 0 a/348 b/349)))
++   with (13 p/350) p/350))
  - : bool -> bool tuplist -> bool * bool tuplist = <fun>
  |}]
 diff --git a/testsuite/tests/generalized-open/gpr1506.ml b/testsuite/tests/generalized-open/gpr1506.ml
@@ -1608,11 +1608,11 @@
  Line 1, characters 15-41:
  1 | include struct open struct type t = T end let x = T end
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
--Error: The type t/340 introduced by this open appears in the signature
-+Error: The type t/337 introduced by this open appears in the signature
+-Error: The type t/335 introduced by this open appears in the signature
++Error: The type t/332 introduced by this open appears in the signature
         Line 1, characters 46-47:
--         The value x has no valid type if t/340 is hidden
-+         The value x has no valid type if t/337 is hidden
+-         The value x has no valid type if t/335 is hidden
++         The value x has no valid type if t/332 is hidden
  |}];;
  
  module A = struct
@@ -1620,11 +1620,11 @@
  4 |       type t = T
  5 |       let x = T
  6 |     end
--Error: The type t/345 introduced by this open appears in the signature
-+Error: The type t/342 introduced by this open appears in the signature
+-Error: The type t/340 introduced by this open appears in the signature
++Error: The type t/337 introduced by this open appears in the signature
         Line 7, characters 8-9:
--         The value y has no valid type if t/345 is hidden
-+         The value y has no valid type if t/342 is hidden
+-         The value y has no valid type if t/340 is hidden
++         The value y has no valid type if t/337 is hidden
  |}];;
  
  module A = struct
@@ -1632,11 +1632,11 @@
  3 | ....open struct
  4 |       type t = T
  5 |     end
--Error: The type t/350 introduced by this open appears in the signature
-+Error: The type t/347 introduced by this open appears in the signature
+-Error: The type t/345 introduced by this open appears in the signature
++Error: The type t/342 introduced by this open appears in the signature
         Line 6, characters 8-9:
--         The value y has no valid type if t/350 is hidden
-+         The value y has no valid type if t/347 is hidden
+-         The value y has no valid type if t/345 is hidden
++         The value y has no valid type if t/342 is hidden
  |}]
  
  (* It was decided to not allow this anymore. *)
@@ -1794,8 +1794,8 @@
  module F (X : sig type t end) = X
  [%%expect{|
  {
-- "F"[module] -> Abs<.4>(X/280, X/280<.3>);
-+ "F"[module] -> Abs<.4>(X/277, X/277<.3>);
+- "F"[module] -> Abs<.4>(X/275, X/275<.3>);
++ "F"[module] -> Abs<.4>(X/272, X/272<.3>);
   }
  module F : functor (X : sig type t end) -> sig type t = X.t end
  |}]
@@ -1806,8 +1806,8 @@
  module Falias (X : S) = X
  [%%expect{|
  {
-- "Falias"[module] -> Abs<.4>(X/282, X/282<.3>);
-+ "Falias"[module] -> Abs<.4>(X/279, X/279<.3>);
+- "Falias"[module] -> Abs<.4>(X/277, X/277<.3>);
++ "Falias"[module] -> Abs<.4>(X/274, X/274<.3>);
   }
  module Falias : functor (X : S) -> sig type t = X.t val x : t end
  |}]
@@ -1815,13 +1815,13 @@
  {
   "Finclude"[module] ->
       Abs<.6>
--        (X/286,
-+        (X/283,
+-        (X/281,
++        (X/278,
           {
--          "t"[type] -> X/286<.5> . "t"[type];
--          "x"[value] -> X/286<.5> . "x"[value];
-+          "t"[type] -> X/283<.5> . "t"[type];
-+          "x"[value] -> X/283<.5> . "x"[value];
+-          "t"[type] -> X/281<.5> . "t"[type];
+-          "x"[value] -> X/281<.5> . "x"[value];
++          "t"[type] -> X/278<.5> . "t"[type];
++          "x"[value] -> X/278<.5> . "x"[value];
            });
   }
  module Finclude : functor (X : S) -> sig type t = X.t val x : t end
@@ -1829,8 +1829,8 @@
  [%%expect{|
  {
   "Fredef"[module] ->
--     Abs<.10>(X/293, {
-+     Abs<.10>(X/290, {
+-     Abs<.10>(X/288, {
++     Abs<.10>(X/285, {
                        "t"[type] -> <.8>;
                        "x"[value] -> <.9>;
                        });
@@ -1838,10 +1838,10 @@
  [%%expect{|
  {
   "Big_to_small1"[module] ->
--     Abs<.40>(X/388, {<.39>
--                      "t"[type] -> X/388<.39> . "t"[type];
-+     Abs<.40>(X/385, {<.39>
-+                      "t"[type] -> X/385<.39> . "t"[type];
+-     Abs<.40>(X/383, {<.39>
+-                      "t"[type] -> X/383<.39> . "t"[type];
++     Abs<.40>(X/380, {<.39>
++                      "t"[type] -> X/380<.39> . "t"[type];
                        });
   }
  module Big_to_small1 : B2S
@@ -1849,10 +1849,10 @@
  [%%expect{|
  {
   "Big_to_small2"[module] ->
--     Abs<.42>(X/391, {
--                      "t"[type] -> X/391<.41> . "t"[type];
-+     Abs<.42>(X/388, {
-+                      "t"[type] -> X/388<.41> . "t"[type];
+-     Abs<.42>(X/386, {
+-                      "t"[type] -> X/386<.41> . "t"[type];
++     Abs<.42>(X/383, {
++                      "t"[type] -> X/383<.41> . "t"[type];
                        });
   }
  module Big_to_small2 : B2S
@@ -1863,8 +1863,8 @@
  
  [%%expect{|
  {
-- "Make"[module] -> Abs<.3>(I/282, {
-+ "Make"[module] -> Abs<.3>(I/279, {
+- "Make"[module] -> Abs<.3>(I/277, {
++ "Make"[module] -> Abs<.3>(I/274, {
                                     });
   }
  module Make : functor (I : sig end) -> sig end
@@ -1875,10 +1875,10 @@
  end = B
  [%%expect{|
  {
-- "A"[module] -> A/305<.11>;
-- "B"[module] -> B/306<.12>;
-+ "A"[module] -> A/302<.11>;
-+ "B"[module] -> B/303<.12>;
+- "A"[module] -> A/300<.11>;
+- "B"[module] -> B/301<.12>;
++ "A"[module] -> A/297<.11>;
++ "B"[module] -> B/298<.12>;
   }
  module rec A : sig type t = Leaf of B.t end
  and B : sig type t = int end
@@ -1886,16 +1886,16 @@
   "ASet"[module] ->
       {
        "compare"[value] ->
--          CU Stdlib . "Set"[module] . "Make"[module](A/327<.19>) .
-+          CU Stdlib . "Set"[module] . "Make"[module](A/324<.19>) .
+-          CU Stdlib . "Set"[module] . "Make"[module](A/322<.19>) .
++          CU Stdlib . "Set"[module] . "Make"[module](A/319<.19>) .
            "compare"[value];
        "elt"[type] ->
--          CU Stdlib . "Set"[module] . "Make"[module](A/327<.19>) .
-+          CU Stdlib . "Set"[module] . "Make"[module](A/324<.19>) .
+-          CU Stdlib . "Set"[module] . "Make"[module](A/322<.19>) .
++          CU Stdlib . "Set"[module] . "Make"[module](A/319<.19>) .
            "elt"[type];
        "t"[type] ->
--          CU Stdlib . "Set"[module] . "Make"[module](A/327<.19>) . "t"[type];
-+          CU Stdlib . "Set"[module] . "Make"[module](A/324<.19>) . "t"[type];
+-          CU Stdlib . "Set"[module] . "Make"[module](A/322<.19>) . "t"[type];
++          CU Stdlib . "Set"[module] . "Make"[module](A/319<.19>) . "t"[type];
        };
   }
  module rec A :
@@ -1906,8 +1906,8 @@
  {
   "Pair"[module] ->
       Abs<.9>
--        (X/282, Abs(Y/283, {
-+        (X/279, Abs(Y/280, {
+-        (X/277, Abs(Y/278, {
++        (X/274, Abs(Y/275, {
                              "t"[type] -> <.5>;
                              "to_string"[value] -> <.6>;
                              }));
@@ -1942,14 +1942,14 @@
  Line 3, characters 2-36:
  3 |   include Comparable with type t = t
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
--Error: Illegal shadowing of included type t/287 by t/292
-+Error: Illegal shadowing of included type t/284 by t/289
+-Error: Illegal shadowing of included type t/282 by t/287
++Error: Illegal shadowing of included type t/279 by t/284
         Line 2, characters 2-19:
--         Type t/287 came from this include
-+         Type t/284 came from this include
+-         Type t/282 came from this include
++         Type t/279 came from this include
         Line 3, characters 2-23:
--         The value print has no valid type if t/287 is shadowed
-+         The value print has no valid type if t/284 is shadowed
+-         The value print has no valid type if t/282 is shadowed
++         The value print has no valid type if t/279 is shadowed
  |}]
  
  module type Sunderscore = sig
