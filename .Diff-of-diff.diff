--- a	2023-09-28 18:44:47.430362182 +0100
+++ b	2023-09-28 18:44:47.434362342 +0100
@@ -5,20 +5,20 @@
  | _ -> false
  ;;
  [%%expect{|
--(let (*match*/275 = 3 *match*/276 = 2 *match*/277 = 1)
-+(let (*match*/294 = 3 *match*/295 = 2 *match*/296 = 1)
+-(let (*match*/270 = 3 *match*/271 = 2 *match*/272 = 1)
++(let (*match*/289 = 3 *match*/290 = 2 *match*/291 = 1)
    (catch
      (catch
--      (catch (if (!= *match*/276 3) (exit 3) (exit 1)) with (3)
--        (if (!= *match*/275 1) (exit 2) (exit 1)))
-+      (catch (if (!= *match*/295 3) (exit 3) (exit 1)) with (3)
-+        (if (!= *match*/294 1) (exit 2) (exit 1)))
+-      (catch (if (!= *match*/271 3) (exit 3) (exit 1)) with (3)
+-        (if (!= *match*/270 1) (exit 2) (exit 1)))
++      (catch (if (!= *match*/290 3) (exit 3) (exit 1)) with (3)
++        (if (!= *match*/289 1) (exit 2) (exit 1)))
       with (2) 0)
     with (1) 1))
--(let (*match*/275 = 3 *match*/276 = 2 *match*/277 = 1)
--  (catch (if (!= *match*/276 3) (if (!= *match*/275 1) 0 (exit 1)) (exit 1))
-+(let (*match*/294 = 3 *match*/295 = 2 *match*/296 = 1)
-+  (catch (if (!= *match*/295 3) (if (!= *match*/294 1) 0 (exit 1)) (exit 1))
+-(let (*match*/270 = 3 *match*/271 = 2 *match*/272 = 1)
+-  (catch (if (!= *match*/271 3) (if (!= *match*/270 1) 0 (exit 1)) (exit 1))
++(let (*match*/289 = 3 *match*/290 = 2 *match*/291 = 1)
++  (catch (if (!= *match*/290 3) (if (!= *match*/289 1) 0 (exit 1)) (exit 1))
     with (1) 1))
  - : bool = false
  |}];;
@@ -26,40 +26,40 @@
  | _ -> false
  ;;
  [%%expect{|
--(let (*match*/280 = 3 *match*/281 = 2 *match*/282 = 1)
-+(let (*match*/299 = 3 *match*/300 = 2 *match*/301 = 1)
+-(let (*match*/275 = 3 *match*/276 = 2 *match*/277 = 1)
++(let (*match*/294 = 3 *match*/295 = 2 *match*/296 = 1)
    (catch
      (catch
        (catch
--        (if (!= *match*/281 3) (exit 6)
--          (let (x/284 =a (makeblock 0 *match*/280 *match*/281 *match*/282))
--            (exit 4 x/284)))
-+        (if (!= *match*/300 3) (exit 6)
-+          (let (x/303 =a (makeblock 0 *match*/299 *match*/300 *match*/301))
-+            (exit 4 x/303)))
+-        (if (!= *match*/276 3) (exit 6)
+-          (let (x/279 =a (makeblock 0 *match*/275 *match*/276 *match*/277))
+-            (exit 4 x/279)))
++        (if (!= *match*/295 3) (exit 6)
++          (let (x/298 =a (makeblock 0 *match*/294 *match*/295 *match*/296))
++            (exit 4 x/298)))
         with (6)
--        (if (!= *match*/280 1) (exit 5)
--          (let (x/283 =a (makeblock 0 *match*/280 *match*/281 *match*/282))
--            (exit 4 x/283))))
-+        (if (!= *match*/299 1) (exit 5)
-+          (let (x/302 =a (makeblock 0 *match*/299 *match*/300 *match*/301))
-+            (exit 4 x/302))))
+-        (if (!= *match*/275 1) (exit 5)
+-          (let (x/278 =a (makeblock 0 *match*/275 *match*/276 *match*/277))
+-            (exit 4 x/278))))
++        (if (!= *match*/294 1) (exit 5)
++          (let (x/297 =a (makeblock 0 *match*/294 *match*/295 *match*/296))
++            (exit 4 x/297))))
       with (5) 0)
--   with (4 x/278) (seq (ignore x/278) 1)))
--(let (*match*/280 = 3 *match*/281 = 2 *match*/282 = 1)
-+   with (4 x/297) (seq (ignore x/297) 1)))
-+(let (*match*/299 = 3 *match*/300 = 2 *match*/301 = 1)
+-   with (4 x/273) (seq (ignore x/273) 1)))
+-(let (*match*/275 = 3 *match*/276 = 2 *match*/277 = 1)
++   with (4 x/292) (seq (ignore x/292) 1)))
++(let (*match*/294 = 3 *match*/295 = 2 *match*/296 = 1)
    (catch
--    (if (!= *match*/281 3)
--      (if (!= *match*/280 1) 0
--        (exit 4 (makeblock 0 *match*/280 *match*/281 *match*/282)))
--      (exit 4 (makeblock 0 *match*/280 *match*/281 *match*/282)))
--   with (4 x/278) (seq (ignore x/278) 1)))
-+    (if (!= *match*/300 3)
-+      (if (!= *match*/299 1) 0
-+        (exit 4 (makeblock 0 *match*/299 *match*/300 *match*/301)))
-+      (exit 4 (makeblock 0 *match*/299 *match*/300 *match*/301)))
-+   with (4 x/297) (seq (ignore x/297) 1)))
+-    (if (!= *match*/276 3)
+-      (if (!= *match*/275 1) 0
+-        (exit 4 (makeblock 0 *match*/275 *match*/276 *match*/277)))
+-      (exit 4 (makeblock 0 *match*/275 *match*/276 *match*/277)))
+-   with (4 x/273) (seq (ignore x/273) 1)))
++    (if (!= *match*/295 3)
++      (if (!= *match*/294 1) 0
++        (exit 4 (makeblock 0 *match*/294 *match*/295 *match*/296)))
++      (exit 4 (makeblock 0 *match*/294 *match*/295 *match*/296)))
++   with (4 x/292) (seq (ignore x/292) 1)))
  - : bool = false
  |}];;
  
@@ -67,10 +67,10 @@
    | ((true, _) as _g)
    | ((false, _) as _g) -> ()
  [%%expect{|
--(function a/285[int] b/286 : int 0)
--(function a/285[int] b/286 : int 0)
-+(function a/304[int] b/305 : int 0)
-+(function a/304[int] b/305 : int 0)
+-(function a/280[int] b/281 : int 0)
+-(function a/280[int] b/281 : int 0)
++(function a/299[int] b/300 : int 0)
++(function a/299[int] b/300 : int 0)
  - : bool -> 'a -> unit = <fun>
  |}];;
  
@@ -78,10 +78,10 @@
  | (false, _) as p -> p
  (* outside, trivial *)
  [%%expect {|
--(function a/289[int] b/290 (let (p/291 =a (makeblock 0 a/289 b/290)) p/291))
--(function a/289[int] b/290 (makeblock 0 a/289 b/290))
-+(function a/308[int] b/309 (let (p/310 =a (makeblock 0 a/308 b/309)) p/310))
-+(function a/308[int] b/309 (makeblock 0 a/308 b/309))
+-(function a/284[int] b/285 (let (p/286 =a (makeblock 0 a/284 b/285)) p/286))
+-(function a/284[int] b/285 (makeblock 0 a/284 b/285))
++(function a/303[int] b/304 (let (p/305 =a (makeblock 0 a/303 b/304)) p/305))
++(function a/303[int] b/304 (makeblock 0 a/303 b/304))
  - : bool -> 'a -> bool * 'a = <fun>
  |}]
  
@@ -89,10 +89,10 @@
  | ((false, _) as p) -> p
  (* inside, trivial *)
  [%%expect{|
--(function a/293[int] b/294 (let (p/295 =a (makeblock 0 a/293 b/294)) p/295))
--(function a/293[int] b/294 (makeblock 0 a/293 b/294))
-+(function a/312[int] b/313 (let (p/314 =a (makeblock 0 a/312 b/313)) p/314))
-+(function a/312[int] b/313 (makeblock 0 a/312 b/313))
+-(function a/288[int] b/289 (let (p/290 =a (makeblock 0 a/288 b/289)) p/290))
+-(function a/288[int] b/289 (makeblock 0 a/288 b/289))
++(function a/307[int] b/308 (let (p/309 =a (makeblock 0 a/307 b/308)) p/309))
++(function a/307[int] b/308 (makeblock 0 a/307 b/308))
  - : bool -> 'a -> bool * 'a = <fun>
  |}];;
  
@@ -100,16 +100,16 @@
  | (false as x, _) as p -> x, p
  (* outside, simple *)
  [%%expect {|
--(function a/299[int] b/300
--  (let (x/301 =a[int] a/299 p/302 =a (makeblock 0 a/299 b/300))
--    (makeblock 0 (int,*) x/301 p/302)))
--(function a/299[int] b/300
--  (makeblock 0 (int,*) a/299 (makeblock 0 a/299 b/300)))
-+(function a/318[int] b/319
-+  (let (x/320 =a[int] a/318 p/321 =a (makeblock 0 a/318 b/319))
-+    (makeblock 0 (int,*) x/320 p/321)))
-+(function a/318[int] b/319
-+  (makeblock 0 (int,*) a/318 (makeblock 0 a/318 b/319)))
+-(function a/294[int] b/295
+-  (let (x/296 =a[int] a/294 p/297 =a (makeblock 0 a/294 b/295))
+-    (makeblock 0 (int,*) x/296 p/297)))
+-(function a/294[int] b/295
+-  (makeblock 0 (int,*) a/294 (makeblock 0 a/294 b/295)))
++(function a/313[int] b/314
++  (let (x/315 =a[int] a/313 p/316 =a (makeblock 0 a/313 b/314))
++    (makeblock 0 (int,*) x/315 p/316)))
++(function a/313[int] b/314
++  (makeblock 0 (int,*) a/313 (makeblock 0 a/313 b/314)))
  - : bool -> 'a -> bool * (bool * 'a) = <fun>
  |}]
  
@@ -117,16 +117,16 @@
  | ((false as x, _) as p) -> x, p
  (* inside, simple *)
  [%%expect {|
--(function a/305[int] b/306
--  (let (x/307 =a[int] a/305 p/308 =a (makeblock 0 a/305 b/306))
--    (makeblock 0 (int,*) x/307 p/308)))
--(function a/305[int] b/306
--  (makeblock 0 (int,*) a/305 (makeblock 0 a/305 b/306)))
-+(function a/324[int] b/325
-+  (let (x/326 =a[int] a/324 p/327 =a (makeblock 0 a/324 b/325))
-+    (makeblock 0 (int,*) x/326 p/327)))
-+(function a/324[int] b/325
-+  (makeblock 0 (int,*) a/324 (makeblock 0 a/324 b/325)))
+-(function a/300[int] b/301
+-  (let (x/302 =a[int] a/300 p/303 =a (makeblock 0 a/300 b/301))
+-    (makeblock 0 (int,*) x/302 p/303)))
+-(function a/300[int] b/301
+-  (makeblock 0 (int,*) a/300 (makeblock 0 a/300 b/301)))
++(function a/319[int] b/320
++  (let (x/321 =a[int] a/319 p/322 =a (makeblock 0 a/319 b/320))
++    (makeblock 0 (int,*) x/321 p/322)))
++(function a/319[int] b/320
++  (makeblock 0 (int,*) a/319 (makeblock 0 a/319 b/320)))
  - : bool -> 'a -> bool * (bool * 'a) = <fun>
  |}]
  
@@ -134,24 +134,24 @@
  | (false, x) as p -> x, p
  (* outside, complex *)
  [%%expect{|
--(function a/315[int] b/316[int]
--  (if a/315
--    (let (x/317 =a[int] a/315 p/318 =a (makeblock 0 a/315 b/316))
--      (makeblock 0 (int,*) x/317 p/318))
--    (let (x/319 =a b/316 p/320 =a (makeblock 0 a/315 b/316))
--      (makeblock 0 (int,*) x/319 p/320))))
--(function a/315[int] b/316[int]
--  (if a/315 (makeblock 0 (int,*) a/315 (makeblock 0 a/315 b/316))
--    (makeblock 0 (int,*) b/316 (makeblock 0 a/315 b/316))))
-+(function a/334[int] b/335[int]
-+  (if a/334
-+    (let (x/336 =a[int] a/334 p/337 =a (makeblock 0 a/334 b/335))
-+      (makeblock 0 (int,*) x/336 p/337))
-+    (let (x/338 =a b/335 p/339 =a (makeblock 0 a/334 b/335))
-+      (makeblock 0 (int,*) x/338 p/339))))
-+(function a/334[int] b/335[int]
-+  (if a/334 (makeblock 0 (int,*) a/334 (makeblock 0 a/334 b/335))
-+    (makeblock 0 (int,*) b/335 (makeblock 0 a/334 b/335))))
+-(function a/310[int] b/311[int]
+-  (if a/310
+-    (let (x/312 =a[int] a/310 p/313 =a (makeblock 0 a/310 b/311))
+-      (makeblock 0 (int,*) x/312 p/313))
+-    (let (x/314 =a b/311 p/315 =a (makeblock 0 a/310 b/311))
+-      (makeblock 0 (int,*) x/314 p/315))))
+-(function a/310[int] b/311[int]
+-  (if a/310 (makeblock 0 (int,*) a/310 (makeblock 0 a/310 b/311))
+-    (makeblock 0 (int,*) b/311 (makeblock 0 a/310 b/311))))
++(function a/329[int] b/330[int]
++  (if a/329
++    (let (x/331 =a[int] a/329 p/332 =a (makeblock 0 a/329 b/330))
++      (makeblock 0 (int,*) x/331 p/332))
++    (let (x/333 =a b/330 p/334 =a (makeblock 0 a/329 b/330))
++      (makeblock 0 (int,*) x/333 p/334))))
++(function a/329[int] b/330[int]
++  (if a/329 (makeblock 0 (int,*) a/329 (makeblock 0 a/329 b/330))
++    (makeblock 0 (int,*) b/330 (makeblock 0 a/329 b/330))))
  - : bool -> bool -> bool * (bool * bool) = <fun>
  |}]
  
@@ -159,30 +159,30 @@
    -> x, p
  (* inside, complex *)
  [%%expect{|
--(function a/321[int] b/322[int]
-+(function a/340[int] b/341[int]
+-(function a/316[int] b/317[int]
++(function a/335[int] b/336[int]
    (catch
--    (if a/321
--      (let (x/329 =a[int] a/321 p/330 =a (makeblock 0 a/321 b/322))
--        (exit 10 x/329 p/330))
--      (let (x/327 =a b/322 p/328 =a (makeblock 0 a/321 b/322))
--        (exit 10 x/327 p/328)))
--   with (10 x/323[int] p/324) (makeblock 0 (int,*) x/323 p/324)))
--(function a/321[int] b/322[int]
-+    (if a/340
-+      (let (x/348 =a[int] a/340 p/349 =a (makeblock 0 a/340 b/341))
-+        (exit 10 x/348 p/349))
-+      (let (x/346 =a b/341 p/347 =a (makeblock 0 a/340 b/341))
-+        (exit 10 x/346 p/347)))
-+   with (10 x/342[int] p/343) (makeblock 0 (int,*) x/342 p/343)))
-+(function a/340[int] b/341[int]
+-    (if a/316
+-      (let (x/324 =a[int] a/316 p/325 =a (makeblock 0 a/316 b/317))
+-        (exit 10 x/324 p/325))
+-      (let (x/322 =a b/317 p/323 =a (makeblock 0 a/316 b/317))
+-        (exit 10 x/322 p/323)))
+-   with (10 x/318[int] p/319) (makeblock 0 (int,*) x/318 p/319)))
+-(function a/316[int] b/317[int]
++    (if a/335
++      (let (x/343 =a[int] a/335 p/344 =a (makeblock 0 a/335 b/336))
++        (exit 10 x/343 p/344))
++      (let (x/341 =a b/336 p/342 =a (makeblock 0 a/335 b/336))
++        (exit 10 x/341 p/342)))
++   with (10 x/337[int] p/338) (makeblock 0 (int,*) x/337 p/338)))
++(function a/335[int] b/336[int]
    (catch
--    (if a/321 (exit 10 a/321 (makeblock 0 a/321 b/322))
--      (exit 10 b/322 (makeblock 0 a/321 b/322)))
--   with (10 x/323[int] p/324) (makeblock 0 (int,*) x/323 p/324)))
-+    (if a/340 (exit 10 a/340 (makeblock 0 a/340 b/341))
-+      (exit 10 b/341 (makeblock 0 a/340 b/341)))
-+   with (10 x/342[int] p/343) (makeblock 0 (int,*) x/342 p/343)))
+-    (if a/316 (exit 10 a/316 (makeblock 0 a/316 b/317))
+-      (exit 10 b/317 (makeblock 0 a/316 b/317)))
+-   with (10 x/318[int] p/319) (makeblock 0 (int,*) x/318 p/319)))
++    (if a/335 (exit 10 a/335 (makeblock 0 a/335 b/336))
++      (exit 10 b/336 (makeblock 0 a/335 b/336)))
++   with (10 x/337[int] p/338) (makeblock 0 (int,*) x/337 p/338)))
  - : bool -> bool -> bool * (bool * bool) = <fun>
  |}]
  
@@ -190,24 +190,24 @@
  | (false as x, _) as p -> x, p
  (* outside, onecase *)
  [%%expect {|
--(function a/331[int] b/332[int]
--  (if a/331
--    (let (x/333 =a[int] a/331 _p/334 =a (makeblock 0 a/331 b/332))
--      (makeblock 0 (int,*) x/333 [0: 1 1]))
--    (let (x/335 =a[int] a/331 p/336 =a (makeblock 0 a/331 b/332))
--      (makeblock 0 (int,*) x/335 p/336))))
--(function a/331[int] b/332[int]
--  (if a/331 (makeblock 0 (int,*) a/331 [0: 1 1])
--    (makeblock 0 (int,*) a/331 (makeblock 0 a/331 b/332))))
-+(function a/350[int] b/351[int]
-+  (if a/350
-+    (let (x/352 =a[int] a/350 _p/353 =a (makeblock 0 a/350 b/351))
-+      (makeblock 0 (int,*) x/352 [0: 1 1]))
-+    (let (x/354 =a[int] a/350 p/355 =a (makeblock 0 a/350 b/351))
-+      (makeblock 0 (int,*) x/354 p/355))))
-+(function a/350[int] b/351[int]
-+  (if a/350 (makeblock 0 (int,*) a/350 [0: 1 1])
-+    (makeblock 0 (int,*) a/350 (makeblock 0 a/350 b/351))))
+-(function a/326[int] b/327[int]
+-  (if a/326
+-    (let (x/328 =a[int] a/326 _p/329 =a (makeblock 0 a/326 b/327))
+-      (makeblock 0 (int,*) x/328 [0: 1 1]))
+-    (let (x/330 =a[int] a/326 p/331 =a (makeblock 0 a/326 b/327))
+-      (makeblock 0 (int,*) x/330 p/331))))
+-(function a/326[int] b/327[int]
+-  (if a/326 (makeblock 0 (int,*) a/326 [0: 1 1])
+-    (makeblock 0 (int,*) a/326 (makeblock 0 a/326 b/327))))
++(function a/345[int] b/346[int]
++  (if a/345
++    (let (x/347 =a[int] a/345 _p/348 =a (makeblock 0 a/345 b/346))
++      (makeblock 0 (int,*) x/347 [0: 1 1]))
++    (let (x/349 =a[int] a/345 p/350 =a (makeblock 0 a/345 b/346))
++      (makeblock 0 (int,*) x/349 p/350))))
++(function a/345[int] b/346[int]
++  (if a/345 (makeblock 0 (int,*) a/345 [0: 1 1])
++    (makeblock 0 (int,*) a/345 (makeblock 0 a/345 b/346))))
  - : bool -> bool -> bool * (bool * bool) = <fun>
  |}]
  
@@ -215,16 +215,16 @@
  | ((false as x, _) as p) -> x, p
  (* inside, onecase *)
  [%%expect{|
--(function a/337[int] b/338
--  (let (x/339 =a[int] a/337 p/340 =a (makeblock 0 a/337 b/338))
--    (makeblock 0 (int,*) x/339 p/340)))
--(function a/337[int] b/338
--  (makeblock 0 (int,*) a/337 (makeblock 0 a/337 b/338)))
-+(function a/356[int] b/357
-+  (let (x/358 =a[int] a/356 p/359 =a (makeblock 0 a/356 b/357))
-+    (makeblock 0 (int,*) x/358 p/359)))
-+(function a/356[int] b/357
-+  (makeblock 0 (int,*) a/356 (makeblock 0 a/356 b/357)))
+-(function a/332[int] b/333
+-  (let (x/334 =a[int] a/332 p/335 =a (makeblock 0 a/332 b/333))
+-    (makeblock 0 (int,*) x/334 p/335)))
+-(function a/332[int] b/333
+-  (makeblock 0 (int,*) a/332 (makeblock 0 a/332 b/333)))
++(function a/351[int] b/352
++  (let (x/353 =a[int] a/351 p/354 =a (makeblock 0 a/351 b/352))
++    (makeblock 0 (int,*) x/353 p/354)))
++(function a/351[int] b/352
++  (makeblock 0 (int,*) a/351 (makeblock 0 a/351 b/352)))
  - : bool -> 'a -> bool * (bool * 'a) = <fun>
  |}]
  
@@ -232,20 +232,20 @@
  | (_, _) as p -> p
  (* outside, tuplist *)
  [%%expect {|
--(function a/350[int] b/351
-+(function a/369[int] b/370
+-(function a/345[int] b/346
++(function a/364[int] b/365
    (catch
--    (if a/350 (if b/351 (let (p/352 =a (field_imm 0 b/351)) p/352) (exit 12))
-+    (if a/369 (if b/370 (let (p/371 =a (field_imm 0 b/370)) p/371) (exit 12))
+-    (if a/345 (if b/346 (let (p/347 =a (field_imm 0 b/346)) p/347) (exit 12))
++    (if a/364 (if b/365 (let (p/366 =a (field_imm 0 b/365)) p/366) (exit 12))
        (exit 12))
--   with (12) (let (p/353 =a (makeblock 0 a/350 b/351)) p/353)))
--(function a/350[int] b/351
--  (catch (if a/350 (if b/351 (field_imm 0 b/351) (exit 12)) (exit 12))
--   with (12) (makeblock 0 a/350 b/351)))
-+   with (12) (let (p/372 =a (makeblock 0 a/369 b/370)) p/372)))
-+(function a/369[int] b/370
-+  (catch (if a/369 (if b/370 (field_imm 0 b/370) (exit 12)) (exit 12))
-+   with (12) (makeblock 0 a/369 b/370)))
+-   with (12) (let (p/348 =a (makeblock 0 a/345 b/346)) p/348)))
+-(function a/345[int] b/346
+-  (catch (if a/345 (if b/346 (field_imm 0 b/346) (exit 12)) (exit 12))
+-   with (12) (makeblock 0 a/345 b/346)))
++   with (12) (let (p/367 =a (makeblock 0 a/364 b/365)) p/367)))
++(function a/364[int] b/365
++  (catch (if a/364 (if b/365 (field_imm 0 b/365) (exit 12)) (exit 12))
++   with (12) (makeblock 0 a/364 b/365)))
  - : bool -> bool tuplist -> bool * bool tuplist = <fun>
  |}]
  
@@ -253,30 +253,30 @@
  | ((_, _) as p) -> p
  (* inside, tuplist *)
  [%%expect{|
--(function a/354[int] b/355
-+(function a/373[int] b/374
+-(function a/349[int] b/350
++(function a/368[int] b/369
    (catch
      (catch
--      (if a/354
--        (if b/355 (let (p/359 =a (field_imm 0 b/355)) (exit 13 p/359))
-+      (if a/373
-+        (if b/374 (let (p/378 =a (field_imm 0 b/374)) (exit 13 p/378))
+-      (if a/349
+-        (if b/350 (let (p/354 =a (field_imm 0 b/350)) (exit 13 p/354))
++      (if a/368
++        (if b/369 (let (p/373 =a (field_imm 0 b/369)) (exit 13 p/373))
            (exit 14))
          (exit 14))
--     with (14) (let (p/358 =a (makeblock 0 a/354 b/355)) (exit 13 p/358)))
--   with (13 p/356) p/356))
--(function a/354[int] b/355
-+     with (14) (let (p/377 =a (makeblock 0 a/373 b/374)) (exit 13 p/377)))
-+   with (13 p/375) p/375))
-+(function a/373[int] b/374
+-     with (14) (let (p/353 =a (makeblock 0 a/349 b/350)) (exit 13 p/353)))
+-   with (13 p/351) p/351))
+-(function a/349[int] b/350
++     with (14) (let (p/372 =a (makeblock 0 a/368 b/369)) (exit 13 p/372)))
++   with (13 p/370) p/370))
++(function a/368[int] b/369
    (catch
      (catch
--      (if a/354 (if b/355 (exit 13 (field_imm 0 b/355)) (exit 14)) (exit 14))
--     with (14) (exit 13 (makeblock 0 a/354 b/355)))
--   with (13 p/356) p/356))
-+      (if a/373 (if b/374 (exit 13 (field_imm 0 b/374)) (exit 14)) (exit 14))
-+     with (14) (exit 13 (makeblock 0 a/373 b/374)))
-+   with (13 p/375) p/375))
+-      (if a/349 (if b/350 (exit 13 (field_imm 0 b/350)) (exit 14)) (exit 14))
+-     with (14) (exit 13 (makeblock 0 a/349 b/350)))
+-   with (13 p/351) p/351))
++      (if a/368 (if b/369 (exit 13 (field_imm 0 b/369)) (exit 14)) (exit 14))
++     with (14) (exit 13 (makeblock 0 a/368 b/369)))
++   with (13 p/370) p/370))
  - : bool -> bool tuplist -> bool * bool tuplist = <fun>
  |}]
 diff --git a/testsuite/tests/basic/patmatch_split_no_or.ml b/testsuite/tests/basic/patmatch_split_no_or.ml
@@ -379,11 +379,11 @@
  Line 1, characters 15-41:
  1 | include struct open struct type t = T end let x = T end
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
--Error: The type t/338 introduced by this open appears in the signature
-+Error: The type t/357 introduced by this open appears in the signature
+-Error: The type t/333 introduced by this open appears in the signature
++Error: The type t/352 introduced by this open appears in the signature
         Line 1, characters 46-47:
--         The value x has no valid type if t/338 is hidden
-+         The value x has no valid type if t/357 is hidden
+-         The value x has no valid type if t/333 is hidden
++         The value x has no valid type if t/352 is hidden
  |}];;
  
  module A = struct
@@ -391,11 +391,11 @@
  4 |       type t = T
  5 |       let x = T
  6 |     end
--Error: The type t/343 introduced by this open appears in the signature
-+Error: The type t/362 introduced by this open appears in the signature
+-Error: The type t/338 introduced by this open appears in the signature
++Error: The type t/357 introduced by this open appears in the signature
         Line 7, characters 8-9:
--         The value y has no valid type if t/343 is hidden
-+         The value y has no valid type if t/362 is hidden
+-         The value y has no valid type if t/338 is hidden
++         The value y has no valid type if t/357 is hidden
  |}];;
  
  module A = struct
@@ -403,11 +403,11 @@
  3 | ....open struct
  4 |       type t = T
  5 |     end
--Error: The type t/348 introduced by this open appears in the signature
-+Error: The type t/367 introduced by this open appears in the signature
+-Error: The type t/343 introduced by this open appears in the signature
++Error: The type t/362 introduced by this open appears in the signature
         Line 6, characters 8-9:
--         The value y has no valid type if t/348 is hidden
-+         The value y has no valid type if t/367 is hidden
+-         The value y has no valid type if t/343 is hidden
++         The value y has no valid type if t/362 is hidden
  |}]
  
  (* It was decided to not allow this anymore. *)
@@ -481,8 +481,8 @@
  module F (X : sig type t end) = X
  [%%expect{|
  {
-- "F"[module] -> Abs<.4>(X/278, X/278<.3>);
-+ "F"[module] -> Abs<.4>(X/297, X/297<.3>);
+- "F"[module] -> Abs<.4>(X/273, X/273<.3>);
++ "F"[module] -> Abs<.4>(X/292, X/292<.3>);
   }
  module F : functor (X : sig type t end) -> sig type t = X.t end
  |}]
@@ -493,8 +493,8 @@
  module Falias (X : S) = X
  [%%expect{|
  {
-- "Falias"[module] -> Abs<.4>(X/280, X/280<.3>);
-+ "Falias"[module] -> Abs<.4>(X/299, X/299<.3>);
+- "Falias"[module] -> Abs<.4>(X/275, X/275<.3>);
++ "Falias"[module] -> Abs<.4>(X/294, X/294<.3>);
   }
  module Falias : functor (X : S) -> sig type t = X.t val x : t end
  |}]
@@ -502,13 +502,13 @@
  {
   "Finclude"[module] ->
       Abs<.6>
--        (X/284,
-+        (X/303,
+-        (X/279,
++        (X/298,
           {
--          "t"[type] -> X/284<.5> . "t"[type];
--          "x"[value] -> X/284<.5> . "x"[value];
-+          "t"[type] -> X/303<.5> . "t"[type];
-+          "x"[value] -> X/303<.5> . "x"[value];
+-          "t"[type] -> X/279<.5> . "t"[type];
+-          "x"[value] -> X/279<.5> . "x"[value];
++          "t"[type] -> X/298<.5> . "t"[type];
++          "x"[value] -> X/298<.5> . "x"[value];
            });
   }
  module Finclude : functor (X : S) -> sig type t = X.t val x : t end
@@ -516,8 +516,8 @@
  [%%expect{|
  {
   "Fredef"[module] ->
--     Abs<.10>(X/291, {
-+     Abs<.10>(X/310, {
+-     Abs<.10>(X/286, {
++     Abs<.10>(X/305, {
                        "t"[type] -> <.8>;
                        "x"[value] -> <.9>;
                        });
@@ -525,10 +525,10 @@
  [%%expect{|
  {
   "Big_to_small1"[module] ->
--     Abs<.40>(X/386, {<.39>
--                      "t"[type] -> X/386<.39> . "t"[type];
-+     Abs<.40>(X/405, {<.39>
-+                      "t"[type] -> X/405<.39> . "t"[type];
+-     Abs<.40>(X/381, {<.39>
+-                      "t"[type] -> X/381<.39> . "t"[type];
++     Abs<.40>(X/400, {<.39>
++                      "t"[type] -> X/400<.39> . "t"[type];
                        });
   }
  module Big_to_small1 : B2S
@@ -536,10 +536,10 @@
  [%%expect{|
  {
   "Big_to_small2"[module] ->
--     Abs<.42>(X/389, {
--                      "t"[type] -> X/389<.41> . "t"[type];
-+     Abs<.42>(X/408, {
-+                      "t"[type] -> X/408<.41> . "t"[type];
+-     Abs<.42>(X/384, {
+-                      "t"[type] -> X/384<.41> . "t"[type];
++     Abs<.42>(X/403, {
++                      "t"[type] -> X/403<.41> . "t"[type];
                        });
   }
  module Big_to_small2 : B2S
@@ -550,8 +550,8 @@
  
  [%%expect{|
  {
-- "Make"[module] -> Abs<.3>(I/280, {
-+ "Make"[module] -> Abs<.3>(I/299, {
+- "Make"[module] -> Abs<.3>(I/275, {
++ "Make"[module] -> Abs<.3>(I/294, {
                                     });
   }
  module Make : functor (I : sig end) -> sig end
@@ -562,10 +562,10 @@
  end = B
  [%%expect{|
  {
-- "A"[module] -> A/303<.11>;
-- "B"[module] -> B/304<.12>;
-+ "A"[module] -> A/322<.11>;
-+ "B"[module] -> B/323<.12>;
+- "A"[module] -> A/298<.11>;
+- "B"[module] -> B/299<.12>;
++ "A"[module] -> A/317<.11>;
++ "B"[module] -> B/318<.12>;
   }
  module rec A : sig type t = Leaf of B.t end
  and B : sig type t = int end
@@ -573,16 +573,16 @@
   "ASet"[module] ->
       {
        "compare"[value] ->
--          CU Stdlib . "Set"[module] . "Make"[module](A/325<.19>) .
-+          CU Stdlib . "Set"[module] . "Make"[module](A/344<.19>) .
+-          CU Stdlib . "Set"[module] . "Make"[module](A/320<.19>) .
++          CU Stdlib . "Set"[module] . "Make"[module](A/339<.19>) .
            "compare"[value];
        "elt"[type] ->
--          CU Stdlib . "Set"[module] . "Make"[module](A/325<.19>) .
-+          CU Stdlib . "Set"[module] . "Make"[module](A/344<.19>) .
+-          CU Stdlib . "Set"[module] . "Make"[module](A/320<.19>) .
++          CU Stdlib . "Set"[module] . "Make"[module](A/339<.19>) .
            "elt"[type];
        "t"[type] ->
--          CU Stdlib . "Set"[module] . "Make"[module](A/325<.19>) . "t"[type];
-+          CU Stdlib . "Set"[module] . "Make"[module](A/344<.19>) . "t"[type];
+-          CU Stdlib . "Set"[module] . "Make"[module](A/320<.19>) . "t"[type];
++          CU Stdlib . "Set"[module] . "Make"[module](A/339<.19>) . "t"[type];
        };
   }
  module rec A :
@@ -593,8 +593,8 @@
  {
   "Pair"[module] ->
       Abs<.9>
--        (X/280, Abs(Y/281, {
-+        (X/299, Abs(Y/300, {
+-        (X/275, Abs(Y/276, {
++        (X/294, Abs(Y/295, {
                              "t"[type] -> <.5>;
                              "to_string"[value] -> <.6>;
                              }));
@@ -605,14 +605,14 @@
  Line 3, characters 2-36:
  3 |   include Comparable with type t = t
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
--Error: Illegal shadowing of included type t/285 by t/290
-+Error: Illegal shadowing of included type t/304 by t/309
+-Error: Illegal shadowing of included type t/280 by t/285
++Error: Illegal shadowing of included type t/299 by t/304
         Line 2, characters 2-19:
--         Type t/285 came from this include
-+         Type t/304 came from this include
+-         Type t/280 came from this include
++         Type t/299 came from this include
         Line 3, characters 2-23:
--         The value print has no valid type if t/285 is shadowed
-+         The value print has no valid type if t/304 is shadowed
+-         The value print has no valid type if t/280 is shadowed
++         The value print has no valid type if t/299 is shadowed
  |}]
  
  module type Sunderscore = sig
