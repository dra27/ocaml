--- a	2023-09-28 18:43:24.330962195 +0100
+++ b	2023-09-28 18:43:24.358963372 +0100
@@ -31,13 +31,12 @@
 diff --git a/api_docgen/Makefile.docfiles b/api_docgen/Makefile.docfiles
 --- a/api_docgen/Makefile.docfiles
 +++ b/api_docgen/Makefile.docfiles
-@@ -35,8 +35,7 @@ str_MLIS := str.mli
- unix_MLIS := unix.mli unixLabels.mli
+@@ -36,7 +36,7 @@ unix_MLIS := unix.mli unixLabels.mli
  dynlink_MLIS := dynlink.mli
  thread_MLIS := \
--  thread.mli event.mli \
--  threadUnix.mli
-+  thread.mli event.mli
+   thread.mli condition.mli mutex.mli event.mli \
+-  threadUnix.mli semaphore.mli
++  semaphore.mli
  
  STDLIB=$(filter-out stdlib__Pervasives, $(STDLIB_MODULES))
  
@@ -136,7 +135,7 @@
 diff --git a/otherlibs/systhreads/.depend b/otherlibs/systhreads/.depend
 --- a/otherlibs/systhreads/.depend
 +++ b/otherlibs/systhreads/.depend
-@@ -8,10 +8,3 @@ thread.cmo : \
+@@ -34,10 +34,3 @@ thread.cmo : \
  thread.cmx : \
      thread.cmi
  thread.cmi :
@@ -150,25 +149,27 @@
 diff --git a/otherlibs/systhreads/Makefile b/otherlibs/systhreads/Makefile
 --- a/otherlibs/systhreads/Makefile
 +++ b/otherlibs/systhreads/Makefile
-@@ -50,12 +50,12 @@ LIBNAME=threads
+@@ -50,14 +50,12 @@ LIBNAME=threads
  BYTECODE_C_OBJS=st_stubs.b.$(O)
  NATIVECODE_C_OBJS=st_stubs.n.$(O)
  
--THREADS_SOURCES = thread.ml event.ml threadUnix.ml
-+THREADS_SOURCES = thread.ml event.ml
+-THREADS_SOURCES = thread.ml mutex.ml condition.ml event.ml threadUnix.ml \
+-  semaphore.ml
++THREADS_SOURCES = thread.ml mutex.ml condition.ml event.ml semaphore.ml
  
  THREADS_BCOBJS = $(THREADS_SOURCES:.ml=.cmo)
  THREADS_NCOBJS = $(THREADS_SOURCES:.ml=.cmx)
  
--MLIFILES=thread.mli event.mli threadUnix.mli
-+MLIFILES=thread.mli event.mli
+-MLIFILES=thread.mli mutex.mli condition.mli event.mli threadUnix.mli \
+-  semaphore.mli
++MLIFILES=thread.mli mutex.mli condition.mli event.mli semaphore.mli
  
  CMIFILES=$(MLIFILES:.mli=.cmi)
  
 diff --git a/otherlibs/systhreads/thread.ml b/otherlibs/systhreads/thread.ml
 --- a/otherlibs/systhreads/thread.ml
 +++ b/otherlibs/systhreads/thread.ml
-@@ -68,11 +68,6 @@ let exit () =
+@@ -70,11 +70,6 @@ let exit () =
    ignore (Sys.opaque_identity (check_memprof_cb ()));
    exit_stub ()
  
@@ -180,7 +181,7 @@
  (* Preemption *)
  
  let preempt signal = yield()
-@@ -101,9 +96,6 @@ let () =
+@@ -105,9 +100,6 @@ let () =
  
  let delay = Unix.sleepf
  
@@ -400,7 +401,7 @@
 diff --git a/stdlib/.depend b/stdlib/.depend
 --- a/stdlib/.depend
 +++ b/stdlib/.depend
-@@ -660,7 +660,6 @@ stdlib__Scanf.cmo : scanf.ml \
+@@ -617,7 +617,6 @@ stdlib__Scanf.cmo : scanf.ml \
      stdlib__String.cmi \
      stdlib.cmi \
      stdlib__Printf.cmi \
@@ -408,7 +409,7 @@
      stdlib__Int.cmi \
      camlinternalFormatBasics.cmi \
      camlinternalFormat.cmi \
-@@ -671,7 +670,6 @@ stdlib__Scanf.cmx : scanf.ml \
+@@ -628,7 +627,6 @@ stdlib__Scanf.cmx : scanf.ml \
      stdlib__String.cmx \
      stdlib.cmx \
      stdlib__Printf.cmx \
@@ -695,7 +696,7 @@
  
  
  (* Flushing pretty-printer queue. *)
-@@ -1176,8 +1173,6 @@ and open_hvbox v = pp_open_hvbox (DLS.get std_formatter_key) v
+@@ -1190,8 +1187,6 @@ and open_hvbox v = pp_open_hvbox (DLS.get std_formatter_key) v
  and open_hovbox v = pp_open_hovbox (DLS.get std_formatter_key) v
  and open_box v = pp_open_box (DLS.get std_formatter_key) v
  and close_box v = pp_close_box (DLS.get std_formatter_key) v
@@ -704,7 +705,7 @@
  and open_stag v = pp_open_stag (DLS.get std_formatter_key) v
  and close_stag v = pp_close_stag (DLS.get std_formatter_key) v
  and print_as v w = pp_print_as (DLS.get std_formatter_key) v w
-@@ -1336,7 +1331,7 @@ open CamlinternalFormat
+@@ -1350,7 +1345,7 @@ open CamlinternalFormat
  (* Interpret a formatting entity on a formatter. *)
  let output_formatting_lit ppf fmting_lit = match fmting_lit with
    | Close_box                 -> pp_close_box ppf ()
@@ -713,10 +714,10 @@
    | Break (_, width, offset)  -> pp_print_break ppf width offset
    | FFlush                    -> pp_print_flush ppf ()
    | Force_newline             -> pp_force_newline ppf ()
-@@ -1493,85 +1488,3 @@ let () = Domain.at_first_spawn (fun () ->
-              out_flush = buffered_out_flush Stdlib.stderr err_buf_key};
+@@ -1509,85 +1504,3 @@ let () = Domain.at_first_spawn (fun () ->
  
    Domain.at_exit flush_standard_formatters)
+ *)
 -
 -(*
 -
@@ -802,7 +803,7 @@
 diff --git a/stdlib/format.mli b/stdlib/format.mli
 --- a/stdlib/format.mli
 +++ b/stdlib/format.mli
-@@ -1403,103 +1403,3 @@ val kasprintf : (string -> 'a) -> ('b, formatter, unit, 'a) format4 -> 'b
+@@ -1406,103 +1406,3 @@ val kasprintf : (string -> 'a) -> ('b, formatter, unit, 'a) format4 -> 'b
  
    @since 4.03
  *)
@@ -1032,7 +1033,7 @@
 diff --git a/stdlib/lazy.ml b/stdlib/lazy.ml
 --- a/stdlib/lazy.ml
 +++ b/stdlib/lazy.ml
-@@ -71,16 +71,10 @@ let from_val (v : 'arg) =
+@@ -75,16 +75,10 @@ let from_val (v : 'arg) =
  
  let is_val (l : 'arg t) = Obj.tag (Obj.repr l) <> Obj.lazy_tag
  
@@ -1102,7 +1103,7 @@
  external size : t -> int = "%obj_size"
  external reachable_words : t -> int = "caml_obj_reachable_words"
  external field : t -> int -> t = "%obj_field"
-@@ -45,7 +44,6 @@ external set_raw_field : t -> int -> raw_data -> unit
+@@ -47,7 +46,6 @@ external set_raw_field : t -> int -> raw_data -> unit
  
  external new_block : int -> int -> t = "caml_obj_block"
  external dup : t -> t = "caml_obj_dup"
@@ -1110,7 +1111,7 @@
  external add_offset : t -> Int32.t -> t = "caml_obj_add_offset"
  external with_tag : int -> t -> t = "caml_obj_with_tag"
  
-@@ -67,7 +65,6 @@ let string_tag = 252
+@@ -69,7 +67,6 @@ let string_tag = 252
  let double_tag = 253
  let double_array_tag = 254
  let custom_tag = 255
@@ -1118,7 +1119,7 @@
  
  
  let int_tag = 1000
-@@ -124,10 +121,6 @@ struct
+@@ -126,10 +123,6 @@ struct
      (obj (field (repr slot) 1) : int)
  end
  
@@ -1144,16 +1145,16 @@
  
      For experts only:
      [set_field] et al can be made safe by first wrapping the block in
-@@ -60,8 +57,6 @@ external set_field : t -> int -> t -> unit = "%obj_set_field"
- external compare_and_swap_field : t -> int -> t -> t -> bool
+@@ -62,8 +59,6 @@ external compare_and_swap_field : t -> int -> t -> t -> bool
    = "caml_obj_compare_and_swap"
  external is_shared : t -> bool = "caml_obj_is_shared"
+ *)
 -external set_tag : t -> int -> unit = "caml_obj_set_tag"
 -  [@@ocaml.deprecated "Use with_tag instead."]
  
  val [@inline always] double_field : t -> int -> float  (* @since 3.11.2 *)
  val [@inline always] set_double_field : t -> int -> float -> unit
-@@ -75,8 +70,6 @@ external set_raw_field : t -> int -> raw_data -> unit
+@@ -77,8 +72,6 @@ external set_raw_field : t -> int -> raw_data -> unit
  
  external new_block : int -> int -> t = "caml_obj_block"
  external dup : t -> t = "caml_obj_dup"
@@ -1162,7 +1163,7 @@
  external add_offset : t -> Int32.t -> t = "caml_obj_add_offset"
           (* @since 3.12.0 *)
  external with_tag : int -> t -> t = "caml_obj_with_tag"
-@@ -98,8 +91,6 @@ val string_tag : int   (* both [string] and [bytes] *)
+@@ -100,8 +93,6 @@ val string_tag : int   (* both [string] and [bytes] *)
  val double_tag : int
  val double_array_tag : int
  val custom_tag : int
@@ -1171,7 +1172,7 @@
  
  val int_tag : int
  val out_of_heap_tag : int
-@@ -120,12 +111,6 @@ sig
+@@ -122,12 +113,6 @@ sig
    val [@inline always] name : t -> string
    val [@inline always] id : t -> int
  end
@@ -1750,20 +1751,20 @@
  | _ -> false
  ;;
  [%%expect{|
--(let (*match*/279 = 3 *match*/280 = 2 *match*/281 = 1)
-+(let (*match*/277 = 3 *match*/278 = 2 *match*/279 = 1)
+-(let (*match*/274 = 3 *match*/275 = 2 *match*/276 = 1)
++(let (*match*/272 = 3 *match*/273 = 2 *match*/274 = 1)
    (catch
      (catch
--      (catch (if (!= *match*/280 3) (exit 3) (exit 1)) with (3)
--        (if (!= *match*/279 1) (exit 2) (exit 1)))
-+      (catch (if (!= *match*/278 3) (exit 3) (exit 1)) with (3)
-+        (if (!= *match*/277 1) (exit 2) (exit 1)))
+-      (catch (if (!= *match*/275 3) (exit 3) (exit 1)) with (3)
+-        (if (!= *match*/274 1) (exit 2) (exit 1)))
++      (catch (if (!= *match*/273 3) (exit 3) (exit 1)) with (3)
++        (if (!= *match*/272 1) (exit 2) (exit 1)))
       with (2) 0)
     with (1) 1))
--(let (*match*/279 = 3 *match*/280 = 2 *match*/281 = 1)
--  (catch (if (!= *match*/280 3) (if (!= *match*/279 1) 0 (exit 1)) (exit 1))
-+(let (*match*/277 = 3 *match*/278 = 2 *match*/279 = 1)
-+  (catch (if (!= *match*/278 3) (if (!= *match*/277 1) 0 (exit 1)) (exit 1))
+-(let (*match*/274 = 3 *match*/275 = 2 *match*/276 = 1)
+-  (catch (if (!= *match*/275 3) (if (!= *match*/274 1) 0 (exit 1)) (exit 1))
++(let (*match*/272 = 3 *match*/273 = 2 *match*/274 = 1)
++  (catch (if (!= *match*/273 3) (if (!= *match*/272 1) 0 (exit 1)) (exit 1))
     with (1) 1))
  - : bool = false
  |}];;
@@ -1771,40 +1772,40 @@
  | _ -> false
  ;;
  [%%expect{|
--(let (*match*/284 = 3 *match*/285 = 2 *match*/286 = 1)
-+(let (*match*/282 = 3 *match*/283 = 2 *match*/284 = 1)
+-(let (*match*/279 = 3 *match*/280 = 2 *match*/281 = 1)
++(let (*match*/277 = 3 *match*/278 = 2 *match*/279 = 1)
    (catch
      (catch
        (catch
--        (if (!= *match*/285 3) (exit 6)
--          (let (x/288 =a (makeblock 0 *match*/284 *match*/285 *match*/286))
--            (exit 4 x/288)))
-+        (if (!= *match*/283 3) (exit 6)
-+          (let (x/286 =a (makeblock 0 *match*/282 *match*/283 *match*/284))
-+            (exit 4 x/286)))
+-        (if (!= *match*/280 3) (exit 6)
+-          (let (x/283 =a (makeblock 0 *match*/279 *match*/280 *match*/281))
+-            (exit 4 x/283)))
++        (if (!= *match*/278 3) (exit 6)
++          (let (x/281 =a (makeblock 0 *match*/277 *match*/278 *match*/279))
++            (exit 4 x/281)))
         with (6)
--        (if (!= *match*/284 1) (exit 5)
--          (let (x/287 =a (makeblock 0 *match*/284 *match*/285 *match*/286))
--            (exit 4 x/287))))
-+        (if (!= *match*/282 1) (exit 5)
-+          (let (x/285 =a (makeblock 0 *match*/282 *match*/283 *match*/284))
-+            (exit 4 x/285))))
+-        (if (!= *match*/279 1) (exit 5)
+-          (let (x/282 =a (makeblock 0 *match*/279 *match*/280 *match*/281))
+-            (exit 4 x/282))))
++        (if (!= *match*/277 1) (exit 5)
++          (let (x/280 =a (makeblock 0 *match*/277 *match*/278 *match*/279))
++            (exit 4 x/280))))
       with (5) 0)
--   with (4 x/282) (seq (ignore x/282) 1)))
--(let (*match*/284 = 3 *match*/285 = 2 *match*/286 = 1)
-+   with (4 x/280) (seq (ignore x/280) 1)))
-+(let (*match*/282 = 3 *match*/283 = 2 *match*/284 = 1)
+-   with (4 x/277) (seq (ignore x/277) 1)))
+-(let (*match*/279 = 3 *match*/280 = 2 *match*/281 = 1)
++   with (4 x/275) (seq (ignore x/275) 1)))
++(let (*match*/277 = 3 *match*/278 = 2 *match*/279 = 1)
    (catch
--    (if (!= *match*/285 3)
--      (if (!= *match*/284 1) 0
--        (exit 4 (makeblock 0 *match*/284 *match*/285 *match*/286)))
--      (exit 4 (makeblock 0 *match*/284 *match*/285 *match*/286)))
--   with (4 x/282) (seq (ignore x/282) 1)))
-+    (if (!= *match*/283 3)
-+      (if (!= *match*/282 1) 0
-+        (exit 4 (makeblock 0 *match*/282 *match*/283 *match*/284)))
-+      (exit 4 (makeblock 0 *match*/282 *match*/283 *match*/284)))
-+   with (4 x/280) (seq (ignore x/280) 1)))
+-    (if (!= *match*/280 3)
+-      (if (!= *match*/279 1) 0
+-        (exit 4 (makeblock 0 *match*/279 *match*/280 *match*/281)))
+-      (exit 4 (makeblock 0 *match*/279 *match*/280 *match*/281)))
+-   with (4 x/277) (seq (ignore x/277) 1)))
++    (if (!= *match*/278 3)
++      (if (!= *match*/277 1) 0
++        (exit 4 (makeblock 0 *match*/277 *match*/278 *match*/279)))
++      (exit 4 (makeblock 0 *match*/277 *match*/278 *match*/279)))
++   with (4 x/275) (seq (ignore x/275) 1)))
  - : bool = false
  |}];;
  
@@ -1812,10 +1813,10 @@
    | ((true, _) as _g)
    | ((false, _) as _g) -> ()
  [%%expect{|
--(function a/289[int] b/290 : int 0)
--(function a/289[int] b/290 : int 0)
-+(function a/287[int] b/288 : int 0)
-+(function a/287[int] b/288 : int 0)
+-(function a/284[int] b/285 : int 0)
+-(function a/284[int] b/285 : int 0)
++(function a/282[int] b/283 : int 0)
++(function a/282[int] b/283 : int 0)
  - : bool -> 'a -> unit = <fun>
  |}];;
  
@@ -1823,10 +1824,10 @@
  | (false, _) as p -> p
  (* outside, trivial *)
  [%%expect {|
--(function a/293[int] b/294 (let (p/295 =a (makeblock 0 a/293 b/294)) p/295))
--(function a/293[int] b/294 (makeblock 0 a/293 b/294))
-+(function a/291[int] b/292 (let (p/293 =a (makeblock 0 a/291 b/292)) p/293))
-+(function a/291[int] b/292 (makeblock 0 a/291 b/292))
+-(function a/288[int] b/289 (let (p/290 =a (makeblock 0 a/288 b/289)) p/290))
+-(function a/288[int] b/289 (makeblock 0 a/288 b/289))
++(function a/286[int] b/287 (let (p/288 =a (makeblock 0 a/286 b/287)) p/288))
++(function a/286[int] b/287 (makeblock 0 a/286 b/287))
  - : bool -> 'a -> bool * 'a = <fun>
  |}]
  
@@ -1834,10 +1835,10 @@
  | ((false, _) as p) -> p
  (* inside, trivial *)
  [%%expect{|
--(function a/297[int] b/298 (let (p/299 =a (makeblock 0 a/297 b/298)) p/299))
--(function a/297[int] b/298 (makeblock 0 a/297 b/298))
-+(function a/295[int] b/296 (let (p/297 =a (makeblock 0 a/295 b/296)) p/297))
-+(function a/295[int] b/296 (makeblock 0 a/295 b/296))
+-(function a/292[int] b/293 (let (p/294 =a (makeblock 0 a/292 b/293)) p/294))
+-(function a/292[int] b/293 (makeblock 0 a/292 b/293))
++(function a/290[int] b/291 (let (p/292 =a (makeblock 0 a/290 b/291)) p/292))
++(function a/290[int] b/291 (makeblock 0 a/290 b/291))
  - : bool -> 'a -> bool * 'a = <fun>
  |}];;
  
@@ -1845,16 +1846,16 @@
  | (false as x, _) as p -> x, p
  (* outside, simple *)
  [%%expect {|
--(function a/303[int] b/304
--  (let (x/305 =a[int] a/303 p/306 =a (makeblock 0 a/303 b/304))
--    (makeblock 0 (int,*) x/305 p/306)))
--(function a/303[int] b/304
--  (makeblock 0 (int,*) a/303 (makeblock 0 a/303 b/304)))
-+(function a/301[int] b/302
-+  (let (x/303 =a[int] a/301 p/304 =a (makeblock 0 a/301 b/302))
-+    (makeblock 0 (int,*) x/303 p/304)))
-+(function a/301[int] b/302
-+  (makeblock 0 (int,*) a/301 (makeblock 0 a/301 b/302)))
+-(function a/298[int] b/299
+-  (let (x/300 =a[int] a/298 p/301 =a (makeblock 0 a/298 b/299))
+-    (makeblock 0 (int,*) x/300 p/301)))
+-(function a/298[int] b/299
+-  (makeblock 0 (int,*) a/298 (makeblock 0 a/298 b/299)))
++(function a/296[int] b/297
++  (let (x/298 =a[int] a/296 p/299 =a (makeblock 0 a/296 b/297))
++    (makeblock 0 (int,*) x/298 p/299)))
++(function a/296[int] b/297
++  (makeblock 0 (int,*) a/296 (makeblock 0 a/296 b/297)))
  - : bool -> 'a -> bool * (bool * 'a) = <fun>
  |}]
  
@@ -1862,16 +1863,16 @@
  | ((false as x, _) as p) -> x, p
  (* inside, simple *)
  [%%expect {|
--(function a/309[int] b/310
--  (let (x/311 =a[int] a/309 p/312 =a (makeblock 0 a/309 b/310))
--    (makeblock 0 (int,*) x/311 p/312)))
--(function a/309[int] b/310
--  (makeblock 0 (int,*) a/309 (makeblock 0 a/309 b/310)))
-+(function a/307[int] b/308
-+  (let (x/309 =a[int] a/307 p/310 =a (makeblock 0 a/307 b/308))
-+    (makeblock 0 (int,*) x/309 p/310)))
-+(function a/307[int] b/308
-+  (makeblock 0 (int,*) a/307 (makeblock 0 a/307 b/308)))
+-(function a/304[int] b/305
+-  (let (x/306 =a[int] a/304 p/307 =a (makeblock 0 a/304 b/305))
+-    (makeblock 0 (int,*) x/306 p/307)))
+-(function a/304[int] b/305
+-  (makeblock 0 (int,*) a/304 (makeblock 0 a/304 b/305)))
++(function a/302[int] b/303
++  (let (x/304 =a[int] a/302 p/305 =a (makeblock 0 a/302 b/303))
++    (makeblock 0 (int,*) x/304 p/305)))
++(function a/302[int] b/303
++  (makeblock 0 (int,*) a/302 (makeblock 0 a/302 b/303)))
  - : bool -> 'a -> bool * (bool * 'a) = <fun>
  |}]
  
@@ -1879,24 +1880,24 @@
  | (false, x) as p -> x, p
  (* outside, complex *)
  [%%expect{|
--(function a/319[int] b/320[int]
--  (if a/319
--    (let (x/321 =a[int] a/319 p/322 =a (makeblock 0 a/319 b/320))
--      (makeblock 0 (int,*) x/321 p/322))
--    (let (x/323 =a b/320 p/324 =a (makeblock 0 a/319 b/320))
--      (makeblock 0 (int,*) x/323 p/324))))
--(function a/319[int] b/320[int]
--  (if a/319 (makeblock 0 (int,*) a/319 (makeblock 0 a/319 b/320))
--    (makeblock 0 (int,*) b/320 (makeblock 0 a/319 b/320))))
-+(function a/317[int] b/318[int]
-+  (if a/317
-+    (let (x/319 =a[int] a/317 p/320 =a (makeblock 0 a/317 b/318))
-+      (makeblock 0 (int,*) x/319 p/320))
-+    (let (x/321 =a b/318 p/322 =a (makeblock 0 a/317 b/318))
-+      (makeblock 0 (int,*) x/321 p/322))))
-+(function a/317[int] b/318[int]
-+  (if a/317 (makeblock 0 (int,*) a/317 (makeblock 0 a/317 b/318))
-+    (makeblock 0 (int,*) b/318 (makeblock 0 a/317 b/318))))
+-(function a/314[int] b/315[int]
+-  (if a/314
+-    (let (x/316 =a[int] a/314 p/317 =a (makeblock 0 a/314 b/315))
+-      (makeblock 0 (int,*) x/316 p/317))
+-    (let (x/318 =a b/315 p/319 =a (makeblock 0 a/314 b/315))
+-      (makeblock 0 (int,*) x/318 p/319))))
+-(function a/314[int] b/315[int]
+-  (if a/314 (makeblock 0 (int,*) a/314 (makeblock 0 a/314 b/315))
+-    (makeblock 0 (int,*) b/315 (makeblock 0 a/314 b/315))))
++(function a/312[int] b/313[int]
++  (if a/312
++    (let (x/314 =a[int] a/312 p/315 =a (makeblock 0 a/312 b/313))
++      (makeblock 0 (int,*) x/314 p/315))
++    (let (x/316 =a b/313 p/317 =a (makeblock 0 a/312 b/313))
++      (makeblock 0 (int,*) x/316 p/317))))
++(function a/312[int] b/313[int]
++  (if a/312 (makeblock 0 (int,*) a/312 (makeblock 0 a/312 b/313))
++    (makeblock 0 (int,*) b/313 (makeblock 0 a/312 b/313))))
  - : bool -> bool -> bool * (bool * bool) = <fun>
  |}]
  
@@ -1904,30 +1905,30 @@
    -> x, p
  (* inside, complex *)
  [%%expect{|
--(function a/325[int] b/326[int]
-+(function a/323[int] b/324[int]
+-(function a/320[int] b/321[int]
++(function a/318[int] b/319[int]
    (catch
--    (if a/325
--      (let (x/333 =a[int] a/325 p/334 =a (makeblock 0 a/325 b/326))
--        (exit 10 x/333 p/334))
--      (let (x/331 =a b/326 p/332 =a (makeblock 0 a/325 b/326))
--        (exit 10 x/331 p/332)))
--   with (10 x/327[int] p/328) (makeblock 0 (int,*) x/327 p/328)))
--(function a/325[int] b/326[int]
-+    (if a/323
-+      (let (x/331 =a[int] a/323 p/332 =a (makeblock 0 a/323 b/324))
-+        (exit 10 x/331 p/332))
-+      (let (x/329 =a b/324 p/330 =a (makeblock 0 a/323 b/324))
-+        (exit 10 x/329 p/330)))
-+   with (10 x/325[int] p/326) (makeblock 0 (int,*) x/325 p/326)))
-+(function a/323[int] b/324[int]
+-    (if a/320
+-      (let (x/328 =a[int] a/320 p/329 =a (makeblock 0 a/320 b/321))
+-        (exit 10 x/328 p/329))
+-      (let (x/326 =a b/321 p/327 =a (makeblock 0 a/320 b/321))
+-        (exit 10 x/326 p/327)))
+-   with (10 x/322[int] p/323) (makeblock 0 (int,*) x/322 p/323)))
+-(function a/320[int] b/321[int]
++    (if a/318
++      (let (x/326 =a[int] a/318 p/327 =a (makeblock 0 a/318 b/319))
++        (exit 10 x/326 p/327))
++      (let (x/324 =a b/319 p/325 =a (makeblock 0 a/318 b/319))
++        (exit 10 x/324 p/325)))
++   with (10 x/320[int] p/321) (makeblock 0 (int,*) x/320 p/321)))
++(function a/318[int] b/319[int]
    (catch
--    (if a/325 (exit 10 a/325 (makeblock 0 a/325 b/326))
--      (exit 10 b/326 (makeblock 0 a/325 b/326)))
--   with (10 x/327[int] p/328) (makeblock 0 (int,*) x/327 p/328)))
-+    (if a/323 (exit 10 a/323 (makeblock 0 a/323 b/324))
-+      (exit 10 b/324 (makeblock 0 a/323 b/324)))
-+   with (10 x/325[int] p/326) (makeblock 0 (int,*) x/325 p/326)))
+-    (if a/320 (exit 10 a/320 (makeblock 0 a/320 b/321))
+-      (exit 10 b/321 (makeblock 0 a/320 b/321)))
+-   with (10 x/322[int] p/323) (makeblock 0 (int,*) x/322 p/323)))
++    (if a/318 (exit 10 a/318 (makeblock 0 a/318 b/319))
++      (exit 10 b/319 (makeblock 0 a/318 b/319)))
++   with (10 x/320[int] p/321) (makeblock 0 (int,*) x/320 p/321)))
  - : bool -> bool -> bool * (bool * bool) = <fun>
  |}]
  
@@ -1935,24 +1936,24 @@
  | (false as x, _) as p -> x, p
  (* outside, onecase *)
  [%%expect {|
--(function a/335[int] b/336[int]
--  (if a/335
--    (let (x/337 =a[int] a/335 _p/338 =a (makeblock 0 a/335 b/336))
--      (makeblock 0 (int,*) x/337 [0: 1 1]))
--    (let (x/339 =a[int] a/335 p/340 =a (makeblock 0 a/335 b/336))
--      (makeblock 0 (int,*) x/339 p/340))))
--(function a/335[int] b/336[int]
--  (if a/335 (makeblock 0 (int,*) a/335 [0: 1 1])
--    (makeblock 0 (int,*) a/335 (makeblock 0 a/335 b/336))))
-+(function a/333[int] b/334[int]
-+  (if a/333
-+    (let (x/335 =a[int] a/333 _p/336 =a (makeblock 0 a/333 b/334))
-+      (makeblock 0 (int,*) x/335 [0: 1 1]))
-+    (let (x/337 =a[int] a/333 p/338 =a (makeblock 0 a/333 b/334))
-+      (makeblock 0 (int,*) x/337 p/338))))
-+(function a/333[int] b/334[int]
-+  (if a/333 (makeblock 0 (int,*) a/333 [0: 1 1])
-+    (makeblock 0 (int,*) a/333 (makeblock 0 a/333 b/334))))
+-(function a/330[int] b/331[int]
+-  (if a/330
+-    (let (x/332 =a[int] a/330 _p/333 =a (makeblock 0 a/330 b/331))
+-      (makeblock 0 (int,*) x/332 [0: 1 1]))
+-    (let (x/334 =a[int] a/330 p/335 =a (makeblock 0 a/330 b/331))
+-      (makeblock 0 (int,*) x/334 p/335))))
+-(function a/330[int] b/331[int]
+-  (if a/330 (makeblock 0 (int,*) a/330 [0: 1 1])
+-    (makeblock 0 (int,*) a/330 (makeblock 0 a/330 b/331))))
++(function a/328[int] b/329[int]
++  (if a/328
++    (let (x/330 =a[int] a/328 _p/331 =a (makeblock 0 a/328 b/329))
++      (makeblock 0 (int,*) x/330 [0: 1 1]))
++    (let (x/332 =a[int] a/328 p/333 =a (makeblock 0 a/328 b/329))
++      (makeblock 0 (int,*) x/332 p/333))))
++(function a/328[int] b/329[int]
++  (if a/328 (makeblock 0 (int,*) a/328 [0: 1 1])
++    (makeblock 0 (int,*) a/328 (makeblock 0 a/328 b/329))))
  - : bool -> bool -> bool * (bool * bool) = <fun>
  |}]
  
@@ -1960,16 +1961,16 @@
  | ((false as x, _) as p) -> x, p
  (* inside, onecase *)
  [%%expect{|
--(function a/341[int] b/342
--  (let (x/343 =a[int] a/341 p/344 =a (makeblock 0 a/341 b/342))
--    (makeblock 0 (int,*) x/343 p/344)))
--(function a/341[int] b/342
--  (makeblock 0 (int,*) a/341 (makeblock 0 a/341 b/342)))
-+(function a/339[int] b/340
-+  (let (x/341 =a[int] a/339 p/342 =a (makeblock 0 a/339 b/340))
-+    (makeblock 0 (int,*) x/341 p/342)))
-+(function a/339[int] b/340
-+  (makeblock 0 (int,*) a/339 (makeblock 0 a/339 b/340)))
+-(function a/336[int] b/337
+-  (let (x/338 =a[int] a/336 p/339 =a (makeblock 0 a/336 b/337))
+-    (makeblock 0 (int,*) x/338 p/339)))
+-(function a/336[int] b/337
+-  (makeblock 0 (int,*) a/336 (makeblock 0 a/336 b/337)))
++(function a/334[int] b/335
++  (let (x/336 =a[int] a/334 p/337 =a (makeblock 0 a/334 b/335))
++    (makeblock 0 (int,*) x/336 p/337)))
++(function a/334[int] b/335
++  (makeblock 0 (int,*) a/334 (makeblock 0 a/334 b/335)))
  - : bool -> 'a -> bool * (bool * 'a) = <fun>
  |}]
  
@@ -1977,20 +1978,20 @@
  | (_, _) as p -> p
  (* outside, tuplist *)
  [%%expect {|
--(function a/354[int] b/355
-+(function a/352[int] b/353
+-(function a/349[int] b/350
++(function a/347[int] b/348
    (catch
--    (if a/354 (if b/355 (let (p/356 =a (field_imm 0 b/355)) p/356) (exit 12))
-+    (if a/352 (if b/353 (let (p/354 =a (field_imm 0 b/353)) p/354) (exit 12))
+-    (if a/349 (if b/350 (let (p/351 =a (field_imm 0 b/350)) p/351) (exit 12))
++    (if a/347 (if b/348 (let (p/349 =a (field_imm 0 b/348)) p/349) (exit 12))
        (exit 12))
--   with (12) (let (p/357 =a (makeblock 0 a/354 b/355)) p/357)))
--(function a/354[int] b/355
--  (catch (if a/354 (if b/355 (field_imm 0 b/355) (exit 12)) (exit 12))
--   with (12) (makeblock 0 a/354 b/355)))
-+   with (12) (let (p/355 =a (makeblock 0 a/352 b/353)) p/355)))
-+(function a/352[int] b/353
-+  (catch (if a/352 (if b/353 (field_imm 0 b/353) (exit 12)) (exit 12))
-+   with (12) (makeblock 0 a/352 b/353)))
+-   with (12) (let (p/352 =a (makeblock 0 a/349 b/350)) p/352)))
+-(function a/349[int] b/350
+-  (catch (if a/349 (if b/350 (field_imm 0 b/350) (exit 12)) (exit 12))
+-   with (12) (makeblock 0 a/349 b/350)))
++   with (12) (let (p/350 =a (makeblock 0 a/347 b/348)) p/350)))
++(function a/347[int] b/348
++  (catch (if a/347 (if b/348 (field_imm 0 b/348) (exit 12)) (exit 12))
++   with (12) (makeblock 0 a/347 b/348)))
  - : bool -> bool tuplist -> bool * bool tuplist = <fun>
  |}]
  
@@ -1998,30 +1999,30 @@
  | ((_, _) as p) -> p
  (* inside, tuplist *)
  [%%expect{|
--(function a/358[int] b/359
-+(function a/356[int] b/357
+-(function a/353[int] b/354
++(function a/351[int] b/352
    (catch
      (catch
--      (if a/358
--        (if b/359 (let (p/363 =a (field_imm 0 b/359)) (exit 13 p/363))
-+      (if a/356
-+        (if b/357 (let (p/361 =a (field_imm 0 b/357)) (exit 13 p/361))
+-      (if a/353
+-        (if b/354 (let (p/358 =a (field_imm 0 b/354)) (exit 13 p/358))
++      (if a/351
++        (if b/352 (let (p/356 =a (field_imm 0 b/352)) (exit 13 p/356))
            (exit 14))
          (exit 14))
--     with (14) (let (p/362 =a (makeblock 0 a/358 b/359)) (exit 13 p/362)))
--   with (13 p/360) p/360))
--(function a/358[int] b/359
-+     with (14) (let (p/360 =a (makeblock 0 a/356 b/357)) (exit 13 p/360)))
-+   with (13 p/358) p/358))
-+(function a/356[int] b/357
+-     with (14) (let (p/357 =a (makeblock 0 a/353 b/354)) (exit 13 p/357)))
+-   with (13 p/355) p/355))
+-(function a/353[int] b/354
++     with (14) (let (p/355 =a (makeblock 0 a/351 b/352)) (exit 13 p/355)))
++   with (13 p/353) p/353))
++(function a/351[int] b/352
    (catch
      (catch
--      (if a/358 (if b/359 (exit 13 (field_imm 0 b/359)) (exit 14)) (exit 14))
--     with (14) (exit 13 (makeblock 0 a/358 b/359)))
--   with (13 p/360) p/360))
-+      (if a/356 (if b/357 (exit 13 (field_imm 0 b/357)) (exit 14)) (exit 14))
-+     with (14) (exit 13 (makeblock 0 a/356 b/357)))
-+   with (13 p/358) p/358))
+-      (if a/353 (if b/354 (exit 13 (field_imm 0 b/354)) (exit 14)) (exit 14))
+-     with (14) (exit 13 (makeblock 0 a/353 b/354)))
+-   with (13 p/355) p/355))
++      (if a/351 (if b/352 (exit 13 (field_imm 0 b/352)) (exit 14)) (exit 14))
++     with (14) (exit 13 (makeblock 0 a/351 b/352)))
++   with (13 p/353) p/353))
  - : bool -> bool tuplist -> bool * bool tuplist = <fun>
  |}]
 diff --git a/testsuite/tests/generalized-open/gpr1506.ml b/testsuite/tests/generalized-open/gpr1506.ml
@@ -2031,11 +2032,11 @@
  Line 1, characters 15-41:
  1 | include struct open struct type t = T end let x = T end
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
--Error: The type t/342 introduced by this open appears in the signature
-+Error: The type t/340 introduced by this open appears in the signature
+-Error: The type t/337 introduced by this open appears in the signature
++Error: The type t/335 introduced by this open appears in the signature
         Line 1, characters 46-47:
--         The value x has no valid type if t/342 is hidden
-+         The value x has no valid type if t/340 is hidden
+-         The value x has no valid type if t/337 is hidden
++         The value x has no valid type if t/335 is hidden
  |}];;
  
  module A = struct
@@ -2043,11 +2044,11 @@
  4 |       type t = T
  5 |       let x = T
  6 |     end
--Error: The type t/347 introduced by this open appears in the signature
-+Error: The type t/345 introduced by this open appears in the signature
+-Error: The type t/342 introduced by this open appears in the signature
++Error: The type t/340 introduced by this open appears in the signature
         Line 7, characters 8-9:
--         The value y has no valid type if t/347 is hidden
-+         The value y has no valid type if t/345 is hidden
+-         The value y has no valid type if t/342 is hidden
++         The value y has no valid type if t/340 is hidden
  |}];;
  
  module A = struct
@@ -2055,11 +2056,11 @@
  3 | ....open struct
  4 |       type t = T
  5 |     end
--Error: The type t/352 introduced by this open appears in the signature
-+Error: The type t/350 introduced by this open appears in the signature
+-Error: The type t/347 introduced by this open appears in the signature
++Error: The type t/345 introduced by this open appears in the signature
         Line 6, characters 8-9:
--         The value y has no valid type if t/352 is hidden
-+         The value y has no valid type if t/350 is hidden
+-         The value y has no valid type if t/347 is hidden
++         The value y has no valid type if t/345 is hidden
  |}]
  
  (* It was decided to not allow this anymore. *)
@@ -2070,8 +2071,8 @@
  module F (X : sig type t end) = X
  [%%expect{|
  {
-- ("F", module) -> Abs<.4>(X/282, X/282<.3>);
-+ ("F", module) -> Abs<.4>(X/280, X/280<.3>);
+- ("F", module) -> Abs<.4>(X/277, X/277<.3>);
++ ("F", module) -> Abs<.4>(X/275, X/275<.3>);
   }
  module F : functor (X : sig type t end) -> sig type t = X.t end
  |}]
@@ -2082,8 +2083,8 @@
  module Falias (X : S) = X
  [%%expect{|
  {
-- ("Falias", module) -> Abs<.4>(X/284, X/284<.3>);
-+ ("Falias", module) -> Abs<.4>(X/282, X/282<.3>);
+- ("Falias", module) -> Abs<.4>(X/279, X/279<.3>);
++ ("Falias", module) -> Abs<.4>(X/277, X/277<.3>);
   }
  module Falias : functor (X : S) -> sig type t = X.t val x : t end
  |}]
@@ -2091,13 +2092,13 @@
  {
   ("Finclude", module) ->
       Abs<.6>
--        (X/288,
-+        (X/286,
+-        (X/283,
++        (X/281,
           {
--          ("t", type) -> X/288<.5> . "t"[type];
--          ("x", value) -> X/288<.5> . "x"[value];
-+          ("t", type) -> X/286<.5> . "t"[type];
-+          ("x", value) -> X/286<.5> . "x"[value];
+-          ("t", type) -> X/283<.5> . "t"[type];
+-          ("x", value) -> X/283<.5> . "x"[value];
++          ("t", type) -> X/281<.5> . "t"[type];
++          ("x", value) -> X/281<.5> . "x"[value];
            });
   }
  module Finclude : functor (X : S) -> sig type t = X.t val x : t end
@@ -2105,8 +2106,8 @@
  [%%expect{|
  {
   ("Fredef", module) ->
--     Abs<.10>(X/295, {
-+     Abs<.10>(X/293, {
+-     Abs<.10>(X/290, {
++     Abs<.10>(X/288, {
                        ("t", type) -> <.8>;
                        ("x", value) -> <.9>;
                        });
@@ -2114,11 +2115,11 @@
  {
   ("Big_to_small1", module) ->
       Abs<.40>
--        (shape-var/391,
-+        (shape-var/389,
+-        (shape-var/386,
++        (shape-var/384,
           {<<internal>>
--          ("t", type) -> shape-var/391<<internal>> . "t"[type];
-+          ("t", type) -> shape-var/389<<internal>> . "t"[type];
+-          ("t", type) -> shape-var/386<<internal>> . "t"[type];
++          ("t", type) -> shape-var/384<<internal>> . "t"[type];
            });
   }
  module Big_to_small1 : B2S
@@ -2126,11 +2127,11 @@
  {
   ("Big_to_small2", module) ->
       Abs<.42>
--        (shape-var/397,
-+        (shape-var/395,
+-        (shape-var/392,
++        (shape-var/390,
           {
--          ("t", type) -> (shape-var/397<<internal>> . "t"[type])<.41>;
-+          ("t", type) -> (shape-var/395<<internal>> . "t"[type])<.41>;
+-          ("t", type) -> (shape-var/392<<internal>> . "t"[type])<.41>;
++          ("t", type) -> (shape-var/390<<internal>> . "t"[type])<.41>;
            });
   }
  module Big_to_small2 : B2S
@@ -2141,8 +2142,8 @@
  
  [%%expect{|
  {
-- ("Make", module) -> Abs<.3>(I/284, {
-+ ("Make", module) -> Abs<.3>(I/282, {
+- ("Make", module) -> Abs<.3>(I/279, {
++ ("Make", module) -> Abs<.3>(I/277, {
                                       });
   }
  module Make : functor (I : sig end) -> sig end
@@ -2153,12 +2154,12 @@
  [%%expect{|
  {
   ("A", module) -> {<.11>
--                   ("t", type) -> A/307<.11> . "t"[type];
-+                   ("t", type) -> A/305<.11> . "t"[type];
+-                   ("t", type) -> A/302<.11> . "t"[type];
++                   ("t", type) -> A/300<.11> . "t"[type];
                     };
   ("B", module) -> {<.12>
--                   ("t", type) -> B/308<.12> . "t"[type];
-+                   ("t", type) -> B/306<.12> . "t"[type];
+-                   ("t", type) -> B/303<.12> . "t"[type];
++                   ("t", type) -> B/301<.12> . "t"[type];
                     };
   }
  module rec A : sig type t = Leaf of B.t end
@@ -2166,16 +2167,16 @@
   ("ASet", module) ->
       {
        ("compare", value) ->
--          CU Stdlib . "Set"[module] . "Make"[module](A/329<.19>) .
-+          CU Stdlib . "Set"[module] . "Make"[module](A/327<.19>) .
+-          CU Stdlib . "Set"[module] . "Make"[module](A/324<.19>) .
++          CU Stdlib . "Set"[module] . "Make"[module](A/322<.19>) .
            "compare"[value];
        ("elt", type) ->
--          CU Stdlib . "Set"[module] . "Make"[module](A/329<.19>) .
-+          CU Stdlib . "Set"[module] . "Make"[module](A/327<.19>) .
+-          CU Stdlib . "Set"[module] . "Make"[module](A/324<.19>) .
++          CU Stdlib . "Set"[module] . "Make"[module](A/322<.19>) .
            "elt"[type];
        ("t", type) ->
--          CU Stdlib . "Set"[module] . "Make"[module](A/329<.19>) . "t"[type];
-+          CU Stdlib . "Set"[module] . "Make"[module](A/327<.19>) . "t"[type];
+-          CU Stdlib . "Set"[module] . "Make"[module](A/324<.19>) . "t"[type];
++          CU Stdlib . "Set"[module] . "Make"[module](A/322<.19>) . "t"[type];
        };
   }
  module rec A :
@@ -2186,10 +2187,10 @@
  {
   ("Pair", module) ->
       Abs<.9>
--        (X/284,
--         Abs(Y/285, {
-+        (X/282,
-+         Abs(Y/283, {
+-        (X/279,
+-         Abs(Y/280, {
++        (X/277,
++         Abs(Y/278, {
                       ("t", type) -> <.5>;
                       ("to_string", value) -> <.6>;
                       }));
@@ -2293,14 +2294,14 @@
  Line 3, characters 2-36:
  3 |   include Comparable with type t = t
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
--Error: Illegal shadowing of included type t/289 by t/294
-+Error: Illegal shadowing of included type t/287 by t/292
+-Error: Illegal shadowing of included type t/284 by t/289
++Error: Illegal shadowing of included type t/282 by t/287
         Line 2, characters 2-19:
--         Type t/289 came from this include
-+         Type t/287 came from this include
+-         Type t/284 came from this include
++         Type t/282 came from this include
         Line 3, characters 2-23:
--         The value print has no valid type if t/289 is shadowed
-+         The value print has no valid type if t/287 is shadowed
+-         The value print has no valid type if t/284 is shadowed
++         The value print has no valid type if t/282 is shadowed
  |}]
  
  module type Sunderscore = sig
