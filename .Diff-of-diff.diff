--- a	2023-09-28 18:46:01.985266892 +0100
+++ b	2023-09-28 18:46:01.993267197 +0100
@@ -59,16 +59,16 @@
  {
   "Finclude"[module] ->
 -     Abs<.6>
--        (X/284,
+-        (X/279,
 -         {
--          "t"[type] -> X/284<.5> . "t"[type];
--          "x"[value] -> X/284<.5> . "x"[value];
+-          "t"[type] -> X/279<.5> . "t"[type];
+-          "x"[value] -> X/279<.5> . "x"[value];
 -          });
 +   Abs<.6>
-+      (X/284,
++      (X/279,
 +       {
-+        "t"[type] -> X/284<.5> . "t"[type];
-+        "x"[value] -> X/284<.5> . "x"[value];
++        "t"[type] -> X/279<.5> . "t"[type];
++        "x"[value] -> X/279<.5> . "x"[value];
 +        });
   }
  module Finclude : functor (X : S) -> sig type t = X.t val x : t end
@@ -77,11 +77,11 @@
  [%%expect{|
  {
   "Fredef"[module] ->
--     Abs<.10>(X/291, {
+-     Abs<.10>(X/286, {
 -                      "t"[type] -> <.8>;
 -                      "x"[value] -> <.9>;
 -                      });
-+   Abs<.10>(X/291, {
++   Abs<.10>(X/286, {
 +                    "t"[type] -> <.8>;
 +                    "x"[value] -> <.9>;
 +                    });
@@ -107,11 +107,11 @@
  [%%expect{|
  {
   "Big_to_small1"[module] ->
--     Abs<.40>(X/386, {<.39>
--                      "t"[type] -> X/386<.39> . "t"[type];
+-     Abs<.40>(X/381, {<.39>
+-                      "t"[type] -> X/381<.39> . "t"[type];
 -                      });
-+   Abs<.40>(X/386, {<.39>
-+                    "t"[type] -> X/386<.39> . "t"[type];
++   Abs<.40>(X/381, {<.39>
++                    "t"[type] -> X/381<.39> . "t"[type];
 +                    });
   }
  module Big_to_small1 : B2S
@@ -120,11 +120,11 @@
  [%%expect{|
  {
   "Big_to_small2"[module] ->
--     Abs<.42>(X/389, {
--                      "t"[type] -> X/389<.41> . "t"[type];
+-     Abs<.42>(X/384, {
+-                      "t"[type] -> X/384<.41> . "t"[type];
 -                      });
-+   Abs<.42>(X/389, {
-+                    "t"[type] -> X/389<.41> . "t"[type];
++   Abs<.42>(X/384, {
++                    "t"[type] -> X/384<.41> . "t"[type];
 +                    });
   }
  module Big_to_small2 : B2S
@@ -138,22 +138,22 @@
   "ASet"[module] ->
 -     {
 -      "compare"[value] ->
--          CU Stdlib . "Set"[module] . "Make"[module](A/325<.19>) .
+-          CU Stdlib . "Set"[module] . "Make"[module](A/320<.19>) .
 -          "compare"[value];
 -      "elt"[type] ->
--          CU Stdlib . "Set"[module] . "Make"[module](A/325<.19>) .
+-          CU Stdlib . "Set"[module] . "Make"[module](A/320<.19>) .
 -          "elt"[type];
 -      "t"[type] ->
--          CU Stdlib . "Set"[module] . "Make"[module](A/325<.19>) . "t"[type];
+-          CU Stdlib . "Set"[module] . "Make"[module](A/320<.19>) . "t"[type];
 -      };
 +   {
 +    "compare"[value] ->
-+      CU Stdlib . "Set"[module] . "Make"[module](A/325<.19>) .
++      CU Stdlib . "Set"[module] . "Make"[module](A/320<.19>) .
 +      "compare"[value];
 +    "elt"[type] ->
-+      CU Stdlib . "Set"[module] . "Make"[module](A/325<.19>) . "elt"[type];
++      CU Stdlib . "Set"[module] . "Make"[module](A/320<.19>) . "elt"[type];
 +    "t"[type] ->
-+      CU Stdlib . "Set"[module] . "Make"[module](A/325<.19>) . "t"[type];
++      CU Stdlib . "Set"[module] . "Make"[module](A/320<.19>) . "t"[type];
 +    };
   }
  module rec A :
@@ -166,11 +166,11 @@
  {
   "Pair"[module] ->
 -     Abs<.9>
--        (X/280, Abs(Y/281, {
+-        (X/275, Abs(Y/276, {
 -                            "t"[type] -> <.5>;
 -                            "to_string"[value] -> <.6>;
 -                            }));
-+   Abs<.9>(X/280, Y/281, {
++   Abs<.9>(X/275, Y/276, {
 +                          "t"[type] -> <.5>;
 +                          "to_string"[value] -> <.6>;
 +                          });
