--- a	2023-09-28 18:47:47.941195233 +0100
+++ b	2023-09-28 18:47:47.961195955 +0100
@@ -22,7 +22,7 @@
 diff --git a/asmcomp/s390x/emit.mlp b/asmcomp/s390x/emit.mlp
 --- a/asmcomp/s390x/emit.mlp
 +++ b/asmcomp/s390x/emit.mlp
-@@ -378,20 +378,17 @@ let emit_instr env i =
+@@ -378,22 +378,19 @@ let emit_instr env i =
            emit_call "caml_c_call";
            `{record_frame env i.live (Dbg_other i.dbg)}\n`
          end else begin
@@ -38,8 +38,10 @@
 -             Also, for some reason ocaml compiler uses %r12, can't use it here.
 -             Just save stack pointer to temporary pointer and then to new stack *)
 +             calling frame with cfi_signal_frame in it's definition. *)
+ (* BACKPORT
            let offset = Domainstate.(idx_of_field Domain_c_stack) * 8 in
            ` lg %r15, {emit_int offset}(%r10)\n`;
+ *)
 -          ` lay %r15, -168(%r15)\n`;
 -          ` stg %r1, 160(%r15)\n`;
            emit_call func;
@@ -48,19 +50,20 @@
            cfi_restore_state ()
          end
  
-@@ -733,9 +730,8 @@ let fundecl fundecl =
+@@ -740,10 +737,9 @@ let fundecl fundecl =
      let threshold_offset = Domainstate.stack_ctx_words * 8 + stack_threshold_size in
      let f = max_frame_size + threshold_offset in
      let offset = Domainstate.(idx_of_field Domain_current_stack) * 8 in
 -    `  lg %r1, {emit_int offset}(%r10)\n`;
 -    `  lay %r1, {emit_int f}(%r1)\n`;
--    `  clgr %r15, %r1\n`;
 +    `  lay %r1, {emit_int (-f)}(%r15)\n`;
 +    `  clg %r1, {emit_int offset}(%r10)\n`;
+ *)
+-    `  clgr %r15, %r1\n`;
      `  brcl 4, {emit_label overflow}\n`;
      `{emit_label ret}:\n`;
      handle_overflow := Some (overflow, ret);
-@@ -751,16 +747,13 @@ let fundecl fundecl =
+@@ -759,16 +755,13 @@ let fundecl fundecl =
    | None -> ()
    | Some (overflow,ret) -> begin
        `{emit_label overflow}:\n`;
