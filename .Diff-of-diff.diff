--- a	2023-09-28 18:43:27.815108545 +0100
+++ b	2023-09-28 18:43:27.831109217 +0100
@@ -13,53 +13,19 @@
  * #10867: Remove deprecated values: Array.create, Array.make_float,
    Array.create_matrix, Bytes.uppercase, Bytes.lowercase, Bytes.capitalize,
    Bytes.uncapitalize, Char.lowercase, Char.uppercase, Filename.temp_dir_name,
-diff --git a/stdlib/.depend b/stdlib/.depend
---- a/stdlib/.depend
-+++ b/stdlib/.depend
-@@ -624,26 +624,24 @@ stdlib__Queue.cmi : queue.mli \
-     stdlib__Seq.cmi
- stdlib__Random.cmo : random.ml \
-     stdlib__String.cmi \
--    stdlib.cmi \
-     stdlib__Nativeint.cmi \
-     stdlib__Int64.cmi \
-     stdlib__Int32.cmi \
--    stdlib__Int.cmi \
-     stdlib__Domain.cmi \
-     stdlib__Digest.cmi \
--    stdlib__Char.cmi \
-+    stdlib__Bytes.cmi \
-+    stdlib__Bigarray.cmi \
-     stdlib__Array.cmi \
-     stdlib__Random.cmi
- stdlib__Random.cmx : random.ml \
-     stdlib__String.cmx \
--    stdlib.cmx \
-     stdlib__Nativeint.cmx \
-     stdlib__Int64.cmx \
-     stdlib__Int32.cmx \
--    stdlib__Int.cmx \
-     stdlib__Domain.cmx \
-     stdlib__Digest.cmx \
--    stdlib__Char.cmx \
-+    stdlib__Bytes.cmx \
-+    stdlib__Bigarray.cmx \
-     stdlib__Array.cmx \
-     stdlib__Random.cmi
- stdlib__Random.cmi : random.mli \
 diff --git a/stdlib/StdlibModules b/stdlib/StdlibModules
 --- a/stdlib/StdlibModules
 +++ b/stdlib/StdlibModules
 @@ -42,10 +42,10 @@ STDLIB_MODULE_BASENAMES = \
    lexing parsing set map stack queue stream buffer \
-   atomic mutex condition semaphore domain \
+   atomic \
    camlinternalFormat printf arg \
 -  printexc fun gc digest random hashtbl weak \
 +  printexc fun gc digest bigarray random hashtbl weak \
    format scanf callback camlinternalOO oo camlinternalMod genlex ephemeron \
    filename complex arrayLabels listLabels bytesLabels stringLabels moreLabels \
--  stdLabels bigarray in_channel out_channel effect
-+  stdLabels in_channel out_channel effect
+-  stdLabels bigarray in_channel out_channel
++  stdLabels in_channel out_channel
  
  STDLIB_PREFIXED_MODULES = \
    $(filter-out stdlib camlinternal%, $(STDLIB_MODULE_BASENAMES))
@@ -96,16 +62,14 @@
  module State = struct
  
 -  type t = { st : int array; mutable idx : int }
-+  open Bigarray
- 
+-
 -  let new_state () = { st = Array.make 55 0; idx = 0 }
 -  let assign st1 st2 =
 -    Array.blit st2.st 0 st1.st 0 55;
 -    st1.idx <- st2.idx
-+  type t = (int64, int64_elt, c_layout) Array1.t
++  open Bigarray
  
-+  external next: t -> (int64[@unboxed])
-+      = "caml_lxm_next" "caml_lxm_next_unboxed" [@@noalloc]
++  type t = (int64, int64_elt, c_layout) Array1.t
  
 -  let full_init s seed =
 -    let combine accu x = Digest.string (accu ^ Int.to_string x) in
@@ -126,20 +90,22 @@
 -      s.st.(j) <- (s.st.(j) lxor extract !accu) land 0x3FFFFFFF;  (* PR#5575 *)
 -    done;
 -    s.idx <- 0
++  external next: t -> (int64[@unboxed])
++      = "caml_lxm_next" "caml_lxm_next_unboxed" [@@noalloc]
+ 
 +  let create () : t =
 +    Array1.create Int64 C_layout 4
  
+-  let make seed =
+-    let result = new_state () in
+-    full_init result seed;
+-    result
 +  let set s i1 i2 i3 i4 =
 +    Array1.unsafe_set s 0 (Int64.logor i1 1L); (* must be odd *)
 +    Array1.unsafe_set s 1 i2;
 +    Array1.unsafe_set s 2 (if i3 <> 0L then i3 else 1L); (* must not be 0 *)
 +    Array1.unsafe_set s 3 (if i4 <> 0L then i4 else 2L) (* must not be 0 *)
  
--  let make seed =
--    let result = new_state () in
--    full_init result seed;
--    result
--
 +  let mk i1 i2 i3 i4 =
 +    let s = create () in
 +    set s i1 i2 i3 i4; s
@@ -358,16 +324,27 @@
 +           (-8591268803865043407L)
 +           6388613595849772044L
  
+ (* BACKPORT BEGIN
  let random_key =
-   Domain.DLS.new_key ~split_from_parent:State.split mk_default
-@@ -230,107 +190,15 @@ let bits32 () = State.bits32 (Domain.DLS.get random_key)
+@@ -231,8 +191,7 @@ let bits32 () = State.bits32 (Domain.DLS.get random_key)
  let bits64 () = State.bits64 (Domain.DLS.get random_key)
  let nativebits () = State.nativebits (Domain.DLS.get random_key)
  
 -let full_init seed = State.full_init (Domain.DLS.get random_key) seed
 -let init seed = State.full_init (Domain.DLS.get random_key) [| seed |]
 +let full_init seed = State.reinit (Domain.DLS.get random_key) seed
+ *)
+ let default = mk_default ()
+ let bits () = State.bits default
+@@ -247,11 +206,15 @@ let bits32 () = State.bits32 default
+ let bits64 () = State.bits64 default
+ let nativebits () = State.nativebits default
+ 
+-let full_init seed = State.full_init default seed
+-let init seed = State.full_init default [| seed |]
++let full_init seed = State.reinit default seed
 +let init seed = full_init [| seed |]
+ (* BACKPORT END *)
  let self_init () = full_init (random_seed())
  
 +(* Splitting *)
@@ -376,8 +353,11 @@
 +
  (* Manipulating the current state. *)
  
- let get_state () = State.copy (Domain.DLS.get random_key)
- let set_state s = State.assign (Domain.DLS.get random_key) s
+ (* BACKPORT BEGIN
+@@ -261,99 +224,3 @@ let set_state s = State.assign (Domain.DLS.get random_key) s
+ let get_state () = State.copy default
+ let set_state s = State.assign default s
+ (* BACKPORT END *)
 -
 -(********************
 -
