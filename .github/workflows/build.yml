name: Build

on:
  push:
#    branches:
#      - '4.**'
#      - '5.**'
#      - 'trunk'
  pull_request:

# Restrict the GITHUB_TOKEN
permissions: {}

env:
  MAKE_ARG: -j

# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#concurrency
# Concurrent workflows are grouped by the PR or branch that triggered them
# (github.ref) and the name of the workflow (github.workflow). The
# 'cancel-in-progress' option then make sure that only one workflow is running
# at a time. This doesn't prevent new jobs from running, rather it cancels
# already running jobs before scheduling new jobs.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name == 'pull_request' || github.sha }}
  cancel-in-progress: true

jobs:
# This job will do the initial build of the compiler (on linux), with flambda on.
# We then upload the compiler tree as a build artifact to enable re-use in
# subsequent jobs.
  build:
    name: 'Build: Linux'
    runs-on: 'ubuntu-latest'
    outputs:
      manual_changed: ${{ steps.manual.outputs.manual_changed }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: false
      - name: Check for manual changes
        id: manual
        run: >-
          tools/ci/actions/check-manual-modified.sh
          '${{ github.ref }}'
          '${{ github.event_name }}'
          '${{ github.event.pull_request.base.ref }}'
          '${{ github.event.pull_request.base.sha }}'
          '${{ github.event.pull_request.head.ref }}'
          '${{ github.event.pull_request.head.sha }}'
          '${{ github.event.ref }}'
          '${{ github.event.before }}'
          '${{ github.event.ref }}'
          '${{ github.event.after }}'
          '${{ github.event.repository.full_name }}'
      - name: Restore config.cache
        id: config-cache
        uses: actions/cache/restore@v3
        with:
          path: config.cache
          key: config.cache-linux-${{ hashFiles('configure') }}
      - name: Configure tree
        run: >-
          tools/ci/actions/runner.sh configure
          --enable-flambda
          --enable-cmm-invariants
          --enable-dependency-generation
          --enable-native-toplevel
      - name: Save config.cache
        if: steps.config-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v3
        with:
          path: config.cache
          key: config.cache-linux-${{ hashFiles('configure') }}
      - name: Build
        run: tools/ci/actions/runner.sh build
      - name: Prepare Artifact
        run: tar --zstd -cf /tmp/sources.tar.zstd .
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: compiler
          path: /tmp/sources.tar.zstd
          retention-days: 1

# Testsuite runs, and other sanity checks, reusing the previously built compiler tree.
# - Full testsuite run, and other sanity checks
# - Full testsuite run, with the debug runtime and minor heap verification
# - Partial testsuite run with the debug runtime and a small minor heap
  linux-tests:
    needs: build
    runs-on: ubuntu-latest
    name: 'Test: Linux ${{ matrix.name }}'
    strategy:
      matrix:
        include:
          - name: Normal runtime + sanity checks
            id: normal
            dependencies: texlive-latex-extra texlive-fonts-recommended hevea sass
            OCAMLRUNPARAM: b=0,v=0
          - name: Debug runtime
            id: debug
            OCAMLRUNPARAM: v=0,V=1
            use-runtime: d
            show-timings: 1
          - name: Debug runtime (s=4096)
            id: debug-s4096
            OCAMLRUNPARAM: s=4096,v=0
            use-runtime: d
            show-timings: 1
            # These directories are selected because of their tendencies to
            # reach corner cases in the runtime system.
            # GitHub Actions doesn't allow this to be specified using a variable
            # so this list must be manually kept in sync with the -O0 build
            tests: parallel callback gc-roots weak-ephe-final
    env:
      OCAMLRUNPARAM: ${{ matrix.OCAMLRUNPARAM }}
      USE_RUNTIME: ${{ matrix.use-runtime }}
      SHOW_TIMINGS: ${{ matrix.show-timings }}
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: compiler
      - name: Unpack Artifact
        run: |
          tar --zstd -xf sources.tar.zstd
          rm -f sources.tar.zstd
      - name: ${{ runner.os }} Dependencies
        if: matrix.dependencies != ''
        run: tools/ci/actions/setup-dependencies ${{ runner.os }} "${{ matrix.dependencies }}"
      - name: Run the testsuite
        run: tools/ci/actions/runner.sh test ${{ matrix.tests }}
      - name: Build API Documentation
        if: matrix.id == 'normal'
        run: tools/ci/actions/runner.sh api-docs
      - name: Install
        if: matrix.id == 'normal'
        run: tools/ci/actions/runner.sh install
      - name: Build the manual
        if: matrix.id == 'normal' && needs.build.outputs.manual_changed == 'true'
        run: tools/ci/actions/runner.sh manual
      - name: Other checks
        if: matrix.id == 'normal'
        run: tools/ci/actions/runner.sh other-checks

# Other platforms:
#   - macOS
#   - Linux with -O0
  other-platforms:
    name: 'Test: ${{ matrix.name }}'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - name: Linux -O0
            id: linux-O0
            os: ubuntu-latest
            config-arg: CFLAGS='-O0'
            OCAMLRUNPARAM: v=0,V=1
            use-runtime: d
            # These directories are selected because of their tendencies to
            # reach corner cases in the runtime system.
            # GitHub Actions doesn't allow this to be specified using a variable
            # so this list must be manually kept in sync with the s=4096 test
            tests: parallel callback gc-roots weak-ephe-final
          - name: macOS
            id: macos
            os: macos-latest
            dependencies: parallel
    env:
      OCAMLRUNPARAM: ${{ matrix.OCAMLRUNPARAM }}
      USE_RUNTIME: ${{ matrix.use-runtime }}
      SHOW_TIMINGS: 1
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: false
      - name: ${{ runner.os }} Dependencies
        if: matrix.dependencies  != ''
        run: tools/ci/actions/setup-dependencies ${{ runner.os }} "${{ matrix.dependencies }}"
      - name: Restore config.cache
        id: config-cache
        uses: actions/cache/restore@v3
        with:
          path: config.cache
          key: config.cache-${{ matrix.id }}-${{ hashFiles('configure') }}
      - name: configure tree
        run: tools/ci/actions/runner.sh configure ${{ env.config-arg }}
      - name: Save config.cache
        if: steps.config-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v3
        with:
          path: config.cache
          key: config.cache-${{ matrix.id }}-${{ hashFiles('configure') }}
      - name: Build
        run: tools/ci/actions/runner.sh build
      - name: Run the testsuite
        run: tools/ci/actions/runner.sh test ${{ matrix.tests }}

# Linux i386 has to be in a separate job as it needs a Docker container and
# GitHub actions doesn't allow mixing container/VM in a single matrix.
  i386:
    name: 'Test: Linux i386'
    runs-on: ubuntu-latest
    container:
      image: debian:12
      options: --platform linux/i386 --user root
    steps:
      - name: ${{ runner.os }} Dependencies
        run: |
          apt-get update
          apt-get install -y git gcc make parallel
      - name: Checkout
        # See https://github.com/actions/checkout/issues/334
        uses: actions/checkout@v1
        # actions/cache requires node16 from the actions/runner, which is not
        # available for a 32-bit build.
      - name: configure tree
        run: tools/ci/actions/runner.sh configure
      - name: Build
        run: tools/ci/actions/runner.sh build
      - name: Run the testsuite
        run: tools/ci/actions/runner.sh test
