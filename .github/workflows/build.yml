name: Build

on:
  push:
#    branches:
#      - '4.**'
#      - '5.**'
#      - 'trunk'
  pull_request:

# Restrict the GITHUB_TOKEN
permissions: {}

# List of test directories for the debug-s4096 and linux-O0 jobs.
# These directories are selected because of their tendencies to reach corner
# cases in the runtime system.
env:
  PARALLEL_TESTS: parallel callback gc-roots weak-ephe-final

# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#concurrency
# Concurrent workflows are grouped by the PR or branch that triggered them
# (github.ref) and the name of the workflow (github.workflow). The
# 'cancel-in-progress' option then make sure that only one workflow is running
# at a time. This doesn't prevent new jobs from running, rather it cancels
# already running jobs before scheduling new jobs.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name == 'pull_request' || github.sha }}
  cancel-in-progress: true

jobs:
#  windows:
#    runs-on: 'windows-latest'
##    outputs:
##      year: ${{ steps.date.outputs.year }}
##      week: ${{ steps.date.outputs.week }}
#    steps:
##      - name: Wakey wakey
##        id: date
##        run: |
##          Add-Content -Path $env:GITHUB_OUTPUT -Value "year=$(Get-Date -UFormat '%Y')"
##          Add-Content -Path $env:GITHUB_OUTPUT -Value "week=$(Get-Date -UFormat '%W')"
##      - name: Status
##        run: |
##          echo "Year is ${{ steps.date.outputs.year }}"
##          echo "Week is ${{ steps.date.outputs.week }}"
##      - name: MSYS2 Installer Cache
##        uses: actions/cache@v3
##        with:
##          path: msys2-installer
##          key: msys2-installer-${{ steps.date.outputs.year }}-${{ steps.date.outputs.week }}
##          restore-keys: |
##            msys2-installer-${{ steps.date.outputs.year }}
##            msys2-installer-
#      - name: Checkout
#        uses: actions/checkout@v4
#        with:
#          path: ocaml
#          submodules: ${{ matrix.submodules }}
#          show-progress: false
#          persist-credentials: false
#      - name: MSYS2 Installation
#        id: msys2
#        run: |
#          C:\msys64\usr\bin\bash -lc "`$GITHUB_WORKSPACE/ocaml/tools/ci/actions/msys2.sh"
#      - name: MSYS2 Installation Cache
#        uses: actions/cache@v3
#        with:
#          path: msys2
#          key: msys2-${{ steps.msys2.outputs.msys2-release }}-${{ steps.msys2.outputs.msys2-cache }}
#          restore-keys: |
#            msys2-1-${{ steps.msys2.outputs.msys2-release }}-
#            msys2-1-
#      - name: MSYS2 Installation
#        run: |
#          C:\msys64\usr\bin\bash -lc "`$GITHUB_WORKSPACE/tools/ci/actions/msys2_unpack.sh"

# This job will do the initial build of the compiler (on linux), with flambda on.
# We then upload the compiler tree as a build artifact to enable re-use in
# subsequent jobs.
#  build:
#    runs-on: 'ubuntu-latest'
#    outputs:
#      manual_changed: ${{ steps.manual.outputs.manual_changed }}
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#        with:
#          persist-credentials: false
#      - name: Check for manual changes
#        id: manual
#        run: >-
#         tools/ci/actions/check-manual-modified.sh
#         '${{ github.ref }}'
#         '${{ github.event_name }}'
#         '${{ github.event.pull_request.base.ref }}'
#         '${{ github.event.pull_request.base.sha }}'
#         '${{ github.event.pull_request.head.ref }}'
#         '${{ github.event.pull_request.head.sha }}'
#         '${{ github.event.ref }}'
#         '${{ github.event.before }}'
#         '${{ github.event.ref }}'
#         '${{ github.event.after }}'
#         '${{ github.event.repository.full_name }}'
#      - name: Configure tree
#        run: |
#          MAKE_ARG=-j CONFIG_ARG='--enable-flambda --enable-cmm-invariants --enable-dependency-generation --enable-native-toplevel' OCAMLRUNPARAM=b,v=0 bash -xe tools/ci/actions/runner.sh configure
#      - name: Build
#        run: |
#          MAKE_ARG=-j bash -xe tools/ci/actions/runner.sh build
#      - name: Prepare Artifact
#        run: tar --zstd -cf /tmp/sources.tar.zstd .
#      - name: Upload Artifact
#        uses: actions/upload-artifact@v3
#        with:
#          name: compiler
#          path: /tmp/sources.tar.zstd
#          retention-days: 1
#
## Full testsuite run, and other sanity checks
#  normal:
#    needs: build
#    runs-on: ubuntu-latest
#    steps:
#      - name: Download Artifact
#        uses: actions/download-artifact@v3
#        with:
#          name: compiler
#      - name: Unpack Artifact
#        run: |
#          tar --zstd -xf sources.tar.zstd
#          rm -f sources.tar.zstd
#      - name: Packages
#        run: |
#          sudo apt-get update -y && sudo apt-get install -y texlive-latex-extra texlive-fonts-recommended hevea sass
#      - name: Run the testsuite
#        run: |
#          MAKE_ARG=-j OCAMLRUNPARAM=b,v=0 bash -xe tools/ci/actions/runner.sh test
#      - name: Build API Documentation
#        run: |
#          MAKE_ARG=-j OCAMLRUNPARAM=b,v=0 bash -xe tools/ci/actions/runner.sh api-docs
#      - name: Install
#        run: |
#         MAKE_ARG=-j OCAMLRUNPARAM=b,v=0 bash -xe tools/ci/actions/runner.sh install
#      - name: Build the manual
#        run: |
#          MAKE_ARG=-j OCAMLRUNPARAM=b,v=0 bash -xe tools/ci/actions/runner.sh manual
#        if: needs.build.outputs.manual_changed == 'true'
#      - name: Other checks
#        run: |
#          MAKE_ARG=-j OCAMLRUNPARAM=b,v=0 bash -xe tools/ci/actions/runner.sh other-checks

# MacOS build+testsuite run, and Linux O0 run.
  others:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
#          - name: linux-O0
#            os: ubuntu-latest
#            shell: bash
#            dependencies: gcc make libzstd-dev parallel
#            config_arg: CFLAGS='-O0'
#          - name: macos
#            os: macos-latest
#            shell: bash
#            dependencies: parallel
          - name: mingw64
            os: windows-latest
            shell: D:\a\ocaml\ocaml\bin\msys2.cmd {0}
            MSYSTEM: MINGW64
            dependencies: mingw-w64-x86_64-gcc
            submodules: true
# XXX Temporary...
      fail-fast: false
    defaults:
      run:
        shell: ${{ matrix.shell }}
        working-directory: ./ocaml
    env:
      MSYSTEM: ${{ matrix.MSYSTEM }}
    steps:
      - name: Restore MSYS2 Installation Cache
        if: runner.os == 'Windows'
        uses: actions/cache/restore@v3
        with:
          path: |
            msys2-installer
            msys2
          # XXX Use a global epoch number instead of the -1
          key: msys2-1-latest
          restore-keys: msys2-1-
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: ocaml
          submodules: ${{ matrix.submodules }}
          show-progress: false
          persist-credentials: false
#      - uses: msys2/setup-msys2@v2
#        with:
#          msystem: mingw64
#          release: false
#          install: >-
#            mingw-w64-x86_64-gcc
#            mingw-w64-x86_64-binutils
#            make
#            diffutils
#            parallel
      - name: MSYS2 (Windows only)
        if: runner.os == 'Windows'
        id: install-msys2
        shell: cmd
        env:
          DEPENDENCIES: ${{ matrix.dependencies }}
        run: ${{ github.workspace }}\ocaml\tools\ci\actions\setup-msys2.cmd
      - name: ${{ runner.os }} Dependencies
        if: matrix.dependencies != ''
        run: tools/ci/actions/setup-dependencies.sh ${{ runner.os }} "${{ matrix.dependencies }}"
#          C:\msys64\usr\bin\bash -lc "`$GITHUB_WORKSPACE/ocaml/tools/ci/actions/msys2.sh"
#      - name: stuff
#        shell: cmd
#        run: echo %PATH%
#      - name: content
#        shell: cmd
#        run: type D:\a\_temp\setup-msys2\msys2.cmd
#      - name: status
#        shell: msys2 {0}
#        env:
#          MSYSTEM: MINGW64
#        run: |
#          pwd
#          echo "$PATH"
#          pacman -Q
      - name: configure tree
        run: |
          CONFIG_ARG=${{ matrix.config_arg }} MAKE_ARG=-j bash -xe tools/ci/actions/runner.sh configure
      - name: Build
        run: |
          MAKE_ARG=-j bash -xe tools/ci/actions/runner.sh build
      - name: Run the testsuite
        if: ${{ matrix.name != 'linux-O0' }}
        run: |
          bash -c 'SHOW_TIMINGS=1 tools/ci/actions/runner.sh test'
# FIXME This is causing a YAML error...
#      - name: Run the testsuite (linux-O0)
#        if: ${{ matrix.name == 'linux-O0' }}
#        env:
#          OCAMLRUNPARAM: v=0,V=1
#          USE_RUNTIME: d
#        run: >
#          for dir in $PARALLEL_TESTS; do
#           bash -cxe "SHOW_TIMINGS=1 tools/ci/actions/runner.sh test_prefix $dir";
#         done
      - name: Update MSYS2 (Windows only)
        if: ${{ steps.install-msys2.outcome == 'success' && always() }}
        id: update-msys2
        shell: cmd
        run: tools/ci/actions/setup-msys2.cmd update
      - name: Save MSYS2 Installation Cache
        if: ${{ steps.install-msys2.outcome == 'success' && steps.update-msys2.outcome == 'success' && always() }}
        uses: actions/cache/save@v3
        with:
          path: |
            D:\a\ocaml\ocaml\msys2-installer
            D:\a\ocaml\ocaml\msys2
          key: msys2-1-${{ steps.install-msys2.outputs.msys2-release }}-${{ steps.update-msys2.outputs.msys2-cache }}

#  i386:
#    runs-on: ubuntu-latest
#    container:
#      image: debian:12
#      options: --platform linux/i386 --user root
#    steps:
#      - name: OS Dependencies
#        run: |
#          apt-get update
#          apt-get install -y git gcc make parallel
#      - name: Checkout
#        # See https://github.com/actions/checkout/issues/334
#        uses: actions/checkout@v1
#      - name: configure tree
#        run: |
#          MAKE_ARG=-j bash -xe tools/ci/actions/runner.sh configure
#      - name: Build
#        run: |
#          MAKE_ARG=-j bash -xe tools/ci/actions/runner.sh build
#      - name: Run the testsuite
#        run: |
#          bash -xe tools/ci/actions/runner.sh test
#
## "extra" testsuite runs, reusing the previously built compiler tree.
## debug: running the full testsuite with the
##        debug runtime and minor heap verification.
## debug-s4086: select testsuite run with the debug runtime and a small
##              minor heap.
#  extra:
#    needs: build
#    runs-on: ubuntu-latest
#    strategy:
#      matrix:
#        id:
#          - debug
#          - debug-s4096
#    steps:
#      - name: Download artifact
#        uses: actions/download-artifact@v3
#        with:
#          name: compiler
#      - name: Unpack Artifact
#        run: |
#          tar --zstd -xf sources.tar.zstd
#          rm -f sources.tar.zstd
#      - name: Run the testsuite (debug runtime)
#        if: ${{ matrix.id == 'debug' }}
#        env:
#          OCAMLRUNPARAM: v=0,V=1
#          USE_RUNTIME: d
#        run: |
#          bash -cxe "SHOW_TIMINGS=1 tools/ci/actions/runner.sh test"
#      - name: Run the testsuite (s=4096, debug runtime)
#        if: ${{ matrix.id == 'debug-s4096' }}
#        env:
#          OCAMLRUNPARAM: s=4096,v=0
#          USE_RUNTIME: d
#        run: |
#          for dir in $PARALLEL_TESTS; do \
#            bash -cxe "SHOW_TIMINGS=1 tools/ci/actions/runner.sh test_prefix $dir"; \
#          done
