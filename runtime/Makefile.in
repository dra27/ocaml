#**************************************************************************
#*                                                                        *
#*                                 OCaml                                  *
#*                                                                        *
#*            Xavier Leroy, projet Cristal, INRIA Rocquencourt            *
#*                                                                        *
#*   Copyright 1999 Institut National de Recherche en Informatique et     *
#*     en Automatique.                                                    *
#*                                                                        *
#*   All rights reserved.  This file is distributed under the terms of    *
#*   the GNU Lesser General Public License version 2.1, with the          *
#*   special exception on linking described in the file LICENSE.          *
#*                                                                        *
#**************************************************************************

# XXX COMBAK configure could generate this?
ifeq "@toolchain@" "msvc"
@BP@_ASM_SOURCES := @arch@nt.@ARCH_S@
else
@BP@_ASM_SOURCES := @arch@.@ARCH_S@
endif

# List of object files for each target

@BP@_ASM_OBJECTS := $(@BP@_ASM_SOURCES:.@ARCH_S@=.@OBJEXT@)

@BP@_libcamlrun_OBJECTS := $(BYTECODE_C_SOURCES:.c=_b.@OBJEXT@)

@BP@_libasmrun_OBJECTS := $(NATIVE_C_SOURCES:.c=_n.@OBJEXT@) $(@BP@_ASM_OBJECTS)

# On Windows, OCAML_STDLIB_DIR needs to be defined dynamically

ifeq "@unix_or_win32@" "win32"
# OCAML_STDLIB_DIR needs to arrive in dynlink.c as a string which both gcc and
# msvc are willing parse without warning. This means we can't pass UTF-8
# directly since, as far as I can tell, cl can cope, but the pre-processor
# can't. So the string needs to be directly translated to L"" form. To do this,
# we take advantage of the fact that Cygwin uses GNU libiconv which includes a
# Java pseudo-encoding which translates any UTF-8 sequences to \uXXXX (and,
# unlike the C99 pseudo-encoding, emits two surrogate values when needed, rather
# than \UXXXXXXXX). The \u is then translated to \x in order to accommodate
# pre-Visual Studio 2013 compilers where \x is a non-standard alias for \u.
@BP@_OCAML_STDLIB_DIR = $(shell echo $(LIBDIR)| iconv -t JAVA | sed -e 's/\\u/\\x/g')
@BP@_STDLIB_CPP_FLAG = -DOCAML_STDLIB_DIR='L"$(@BP@_OCAML_STDLIB_DIR)"'
else # Unix
@BP@_OCAML_STDLIB_DIR = $(LIBDIR)
@BP@_STDLIB_CPP_FLAG = -DOCAML_STDLIB_DIR='"$(@BP@_OCAML_STDLIB_DIR)"'
endif

# General (non target-specific) assembler and compiler flags

ifdef BOOTSTRAPPING_FLEXLINK
@BP@_OC_CPPFLAGS += -DBOOTSTRAPPING_FLEXLINK
endif

@BP@_OC_CPPFLAGS += @iflexdir@

@BP@_OC_CPPFLAGS += -I $(ROOTDIR)/runtime/@BP@

ifneq "@ccomptype@" "msvc"
@BP@_OC_CFLAGS += -g
endif

@BP@_OC_NATIVE_CPPFLAGS = -DNATIVE_CODE -DTARGET_@arch@

ifeq "@unix_or_win32@" "unix"
@BP@_OC_NATIVE_CPPFLAGS += -DMODEL_@model@
endif

# XXX The LIBUNWIND_INCLUDE_FLAGS should be guarded by a spacetime check!
@BP@_OC_NATIVE_CPPFLAGS += -DSYS_@system@ @iflexdir@ @libunwind_include_flags@

OC_DEBUG_CPPFLAGS=-DDEBUG
OC_INSTR_CPPFLAGS=-DCAML_INSTR

ifeq "@toolchain@" "msvc"
ASMFLAGS=
ifeq ($(WITH_SPACETIME),true)
ASMFLAGS=-DWITH_SPACETIME
endif
endif

@BP@_ASPPFLAGS = -DSYS_@system@ -I$(ROOTDIR)/runtime -I$(ROOTDIR)/runtime/@BP@
ifeq "@unix_or_win32@" "unix"
@BP@_ASPPFLAGS += -DMODEL_@model@
endif

# Commands used to build native libraries

ifeq "@unix_or_win32@" "win32"
@BP@_LIBS = $(@BP@_BYTECCLIBS) $(EXTRALIBS)
# XXX COMBAK bootstrapping case
ifdef BOOTSTRAPPING_FLEXLINK
@BP@_MAKE_OCAMLRUN=$(MKEXE_BOOT)
else
# XXX This is broken for Windows cross-compilation...
@BP@_MAKE_OCAMLRUN = @mkexe@ -o $(1) $(2)
endif
else
@BP@_LIBS = $(@BP@_BYTECCLIBS)
# XXX Nervous about usurping @mkexe@ here
@BP@_MAKE_OCAMLRUN = @CC@ $(@BP@_OC_CFLAGS) $(@BP@_OC_CPPFLAGS) @oc_ldflags@ -o $(1) $(2)
endif

# Libraries and programs

@BP@/ocamlrun@exeext@: @BP@/prims.@OBJEXT@ @BP@/libcamlrun.@libext@
	$(call @BP@_MAKE_OCAMLRUN,$@,$^ $(@BP@_LIBS))

@BP@/libcamlrun.@libext@: $(addprefix @BP@/,$(@BP@_libcamlrun_OBJECTS))
	$(call @BP@_MKLIB,$@, $^)

@BP@/libasmrun.@libext@: $(addprefix @BP@/,$(@BP@_libasmrun_OBJECTS))
	$(call @BP@_MKLIB,$@, $^)

# Target-specific preprocessor and compiler flags

@BP@/%_n.@OBJEXT@: @BP@_OC_CPPFLAGS += $(@BP@_OC_NATIVE_CPPFLAGS)

# Compilation of C files

# The COMPILE_C_FILE macro below receives as argument the pattern
# that corresponds to the name of the generated object file
# (without the extension, which is added by the macro)
define COMPILE_C_FILE
@BP@/$(1).@OBJEXT@: %.c
	@CC@ -c $$(@BP@_OC_CFLAGS) $$(@BP@_OC_CPPFLAGS) @outputobj@$$@ $$<
endef

object_types := % %_b %_bd %_bi %_bpic %_n %_nd %_ni %_np %_npic

$(foreach object_type, $(object_types), \
  $(eval $(call COMPILE_C_FILE,$(object_type))))

@BP@/dynlink_%.@OBJEXT@: @BP@_OC_CPPFLAGS += $(@BP@_STDLIB_CPP_FLAG)

@BP@/startup_byt_%.@OBJEXT@: @BP@_OC_CPPFLAGS += $(@BP@_STDLIB_CPP_FLAG) -DHOST='"@host@"'

$(foreach object_type,$(subst %,,$(object_types)), \
  $(eval @BP@/dynlink$(object_type).@OBJEXT@: $(ROOTDIR)/Makefile.config))

# Compilation of assembly files

@BP@/%.o: %.S
	@ASPP@ $(@BP@_ASPPFLAGS) -o $@ $< || \
	{ echo "If your assembler produced syntax errors, it is probably";\
          echo "unhappy with the preprocessor. Check your assembler, or";\
          echo "try producing $*.o by hand.";\
          exit 2; }

%_libasmrunpic.o: %.S
	@ASPP@ $(@BP@_ASPPFLAGS) $(@BP@_SHAREDLIB_CFLAGS) -o $@ $<

@BP@/amd64nt.obj: amd64nt.asm domain_state64.inc
	@AS@$@ $(ASMFLAGS) $<

@BP@/i386nt.obj: i386nt.asm domain_state32.inc
	@AS@$@ $(ASMFLAGS) $<

@BP@/%_libasmrunpic.obj: %.asm
	@AS@$@ $(ASMFLAGS) $<
